### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Request to create a new Content Provider for a given customer
"""
input A2PAddContentProviderRequest {
  """
  Content provider name
  """
  contentProviderName: String!

  """
  Customer case url
  """
  customerCareUrl: String

  """
  Customer number
  """
  customerNumber: String!

  """
  Helpdesk email
  """
  helpdeskEmail: String

  """
  Phone number
  """
  phoneNumber: String
}

"""
Response to create a new Content Provider for a given customer
"""
type A2PAddContentProviderResponse implements GenericMutationResponse {
  code: Int!
  contentProviderId: String
  message: String!
  success: Boolean!
}

"""
Request to submit request for shortcode to be created
"""
input A2PAddServiceRequestRequest {
  address: A2PServiceRequestAddress!

  """
  Service request carriers
  """
  carriers: [A2PServiceRequestCarrier!]!
  companyName: String!

  """
  Content provider id
  """
  contentProviderId: Int!

  """
  Customer number
  """
  customerNumber: String!

  """
  Service request message volume
  """
  expectedMessageVolume: A2PServiceRequestMessageVolume!
  expectedMessageVolumeDescription: String!

  """
  First name
  """
  firstName: String!

  """
  Job title
  """
  jobTitle: String!

  """
  Last name
  """
  lastName: String!

  """
  MessageType
  """
  messageType: A2PServiceRequestMessageType!

  """
  Message usage
  """
  messageUsage: A2PServiceRequestMessageUsage!

  """
  Mobile originating message example
  """
  mobileOriginatingMessageExample: String!

  """
  Mobile terminating message example
  """
  mobileTerminatingMessageExample: String!

  """
  Predicted peak time description
  """
  predictedPeakTimeDescription: String!

  """
  Preferred number
  """
  preferredNumber: String

  """
  Service compliance description
  """
  serviceComplianceDescription: String!

  """
  Service description
  """
  serviceDescription: String!

  """
  Service end date and time
  """
  serviceEndDateTime: String!

  """
  Service request marketing channels
  """
  serviceMarketingChannels: [String!]!

  """
  Service name
  """
  serviceName: String!

  """
  Signature
  """
  signature: String!
  technicalContact: A2PServiceRequestTechnicalContact!
}

"""
Response to submit request for shortcode to be created
"""
type A2PAddServiceRequestResponse implements GenericMutationResponse {
  code: Int!
  message: String!

  """
  Service request id
  """
  serviceRequestId: String
  success: Boolean!
}

"""
Returns overview of sms metrics for all customers. Admin dashboard overview for admin role
"""
type A2PAdminOverview implements A2PResponsePeriod {
  """
  End date
  """
  dateTimeEnd: String

  """
  Start date
  """
  dateTimeStart: String

  """
  Overview interval
  """
  interval: A2POverviewInterval

  """
  Overview length in days
  """
  length: Int

  """
  Total amount of pending shortcodes
  """
  pendingShortcodesCount: Int!

  """
  Total amount of suspended shortcodes
  """
  suspendedShortcodesCount: Int!

  """
  Total amount of customers
  """
  totalCustomersCount: Int!

  """
  Total amount of shortcodes
  """
  totalShortcodesCount: Int!
}

"""
Returns overview of sms metrics for all shortcodes used by the admin dashboard overview for admin role
"""
type A2PAdminShortcodeItem {
  """
  Shortcode CTAs
  """
  ctas: [A2PShortcodeCTA!]!

  """
  Customer name
  """
  customerName: String!

  """
  Customer number
  """
  customerNumber: Int!

  """
  Total amount of delivered sms
  """
  deliveredSmsCount: Int!

  """
  Total amount of failed sms
  """
  failedSmsCount: Int!

  """
  Total amount of sent sms
  """
  sentSmsCount: Int!

  """
  Shortcode number
  """
  shortCodeNumber: Int!

  """
  Shortcode status
  """
  status: A2PShortcodeStatus!

  """
  Total amount of sms
  """
  totalSmsCount: Int!

  """
  Shortcode type
  """
  type: A2PShortcodeType!
}

"""
Returns overview of sms metrics for all shortcodes used by the admin dashboard overview for admin role
"""
type A2PAdminShortcodesOverview implements A2PResponsePeriod {
  """
  Total amount of active shortcodes
  """
  activeShortcodesCount: Int!

  """
  End date
  """
  dateTimeEnd: String

  """
  Start date
  """
  dateTimeStart: String

  """
  Overview interval
  """
  interval: A2POverviewInterval

  """
  Overview length in days
  """
  length: Int

  """
  Total amount of pending shortcodes
  """
  pendingShortcodesCount: Int!

  """
  Total amount of suspended shortcodes
  """
  suspendedShortcodesCount: Int!

  """
  Total amount of shortcodes
  """
  totalShortcodesCount: Int!
}

"""
Return all Content Providers for a given Customer
"""
type A2PCustomerContentProvider {
  """
  Content provider id
  """
  contentProviderId: Int!

  """
  Content provider name
  """
  contentProviderName: String!
  ctas: [A2PCustomerContentProviderCTA!]!

  """
  Customer care url
  """
  customerCareUrl: String

  """
  Customer name
  """
  customerName: String!

  """
  Customer number
  """
  customerNumber: String!

  """
  Helpdesk email
  """
  helpdeskEmail: String

  """
  Phone number
  """
  phoneNumber: String
}

"""
Content provider CTA
"""
enum A2PCustomerContentProviderCTA {
  DELETE
  EDIT
}

"""
Returns overview of sms metrics for all customers. Admin dashboard overview for admin role
"""
type A2PCustomerOverview implements A2PResponsePeriod {
  """
  End date
  """
  dateTimeEnd: String

  """
  Start date
  """
  dateTimeStart: String

  """
  Total amount of sms delivered
  """
  deliveredSmsCount: Int!

  """
  Total amount of sms failed
  """
  failedSmsCount: Int!

  """
  Overview interval
  """
  interval: A2POverviewInterval

  """
  Overview length in days
  """
  length: Int

  """
  Total amount of sms sent
  """
  sentSmsCount: Int!

  """
  Total amount of sms
  """
  totalSmsCount: Int!
}

"""
Service provider message type
"""
enum A2PCustomerServiceProviderMessageType {
  STANDARD
  ZERO_RATED
}

"""
Service provider status
"""
enum A2PCustomerServiceProviderStatus {
  APPROVED
  OPEN
  REJECTED
}

"""
Service request
"""
type A2PCustomerServiceRequest {
  """
  Assigned shortcode number
  """
  assignedShortcodeNumber: String

  """
  Content provider id
  """
  contentProviderId: Int!

  """
  Date and time created
  """
  dateTimeCreated: String!

  """
  Date and time modified
  """
  dateTimeModified: String!

  """
  Message type
  """
  messageType: A2PCustomerServiceProviderMessageType!

  """
  Requested shortcode number
  """
  requestedShortcodeNumber: String

  """
  Service request id
  """
  serviceRequestId: String!

  """
  Status
  """
  status: A2PCustomerServiceProviderStatus!
}

"""
Shortcode fields
"""
type A2PCustomerShortcode implements A2PCustomerShortcodeBase {
  """
  Service request carriers
  """
  carriers: [A2PServiceRequestCarrier!]!

  """
  Content provider id
  """
  contentProviderId: Int!
  ctas: [A2PShortcodeCTA!]!

  """
  Customer name
  """
  customerName: String!

  """
  Customer number
  """
  customerNumber: String!

  """
  Service request message volume
  """
  expectedMessageVolume: A2PServiceRequestMessageVolume!

  """
  First name
  """
  firstName: String!

  """
  Job title
  """
  jobTitle: String!

  """
  Last name
  """
  lastName: String!

  """
  MessageType
  """
  messageType: A2PServiceRequestMessageType!

  """
  Message usage
  """
  messageUsage: A2PServiceRequestMessageUsage!

  """
  Mobile originating message example
  """
  mobileOriginatingMessageExample: String!

  """
  Mobile terminating message example
  """
  mobileTerminatingMessageExample: String!

  """
  Predicted peak time description
  """
  predictedPeakTimeDescription: String!

  """
  Preferred number
  """
  preferredNumber: String

  """
  Service compliance description
  """
  serviceComplianceDescription: String!

  """
  Service description
  """
  serviceDescription: String!

  """
  Service end date and time
  """
  serviceEndDateTime: String!

  """
  Service request marketing channels
  """
  serviceMarketingChannels: [String!]!

  """
  Service name
  """
  serviceName: String!

  """
  Shortcode number
  """
  shortCodeNumber: Int!

  """
  Signature
  """
  signature: String!
  status: A2PShortcodeStatus!
  usage: A2PCustomerUsage!
}

"""
Shortcode base fields
"""
interface A2PCustomerShortcodeBase {
  ctas: [A2PShortcodeCTA!]!

  """
  Customer name
  """
  customerName: String!

  """
  Customer number
  """
  customerNumber: String!

  """
  Shortcode number
  """
  shortCodeNumber: Int!
  status: A2PShortcodeStatus!
  usage: A2PCustomerUsage!
}

"""
Shortcode list item
"""
type A2PCustomerShortcodeListItem implements A2PCustomerShortcodeBase {
  ctas: [A2PShortcodeCTA!]!

  """
  Customer name
  """
  customerName: String!

  """
  Customer number
  """
  customerNumber: String!

  """
  Shortcode number
  """
  shortCodeNumber: Int!
  status: A2PShortcodeStatus!
  type: A2PShortcodeType
  usage: A2PCustomerUsage!
}

"""
Returns series data for a given customer by date range
"""
type A2PCustomerUsage implements A2PResponsePeriod {
  """
  End date
  """
  dateTimeEnd: String

  """
  Start date
  """
  dateTimeStart: String

  """
  Overview interval
  """
  interval: A2POverviewInterval

  """
  Overview length in days
  """
  length: Int
  series: [A2PCustomerUsageItem!]!
}

"""
Usage item
"""
type A2PCustomerUsageItem {
  """
  End date
  """
  dateTimeEnd: String!

  """
  Start date
  """
  dateTimeStart: String!

  """
  Total amount of delivered sms
  """
  deliveredSmsCount: Int!

  """
  Total amount of failed sms
  """
  failedSmsCount: Int!

  """
  Total amount of sent sms
  """
  sentSmsCount: Int!

  """
  Total amount of sms
  """
  totalSmsCount: Int!
}

"""
Date range
"""
enum A2PDateRange {
  last12months
  last30days
  last6months
  last7days
}

"""
Request to delete a content provider for a given customer
"""
input A2PDeleteContentProviderRequest {
  """
  Content provider Id
  """
  contentProviderId: Int!

  """
  Customer number
  """
  customerNumber: String!
}

"""
Request to modify a content provider for a given customer
"""
input A2PModifyContentProviderRequest {
  """
  Content provider Id
  """
  contentProviderId: Int!

  """
  Content provider name
  """
  contentProviderName: String!

  """
  Customer case url
  """
  customerCareUrl: String

  """
  Customer number
  """
  customerNumber: String!

  """
  Helpdesk email
  """
  helpdeskEmail: String

  """
  Phone number
  """
  phoneNumber: String
}

"""
Request to modify a shortcode status by creating a new service request
"""
input A2PModifyShortcodeRequest {
  """
  Customer number
  """
  customerNumber: String!

  """
  Shortcode number
  """
  shortcodeNumber: String!

  """
  New shortcode status
  """
  status: A2PModifyShortcodeStatus!
}

"""
Response to modify a shortcode status by creating a new service request
"""
type A2PModifyShortcodeResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Modify shortcode status
"""
enum A2PModifyShortcodeStatus {
  INACTIVE
}

"""
Organisation details
"""
type A2POrganisationDetails {
  adminOverview(dateRange: A2PDateRange!): A2PAdminOverview!
  adminShortcodes(dateRange: A2PDateRange): [A2PAdminShortcodeItem!]!
  adminShortcodesOverview(dateRange: A2PDateRange!): A2PAdminShortcodesOverview!
  contentProviders: [A2PCustomerContentProvider!]!

  """
  Customer number
  """
  customerNumber: String
  overview(dateRange: A2PDateRange!): A2PCustomerOverview!
  serviceRequests: [A2PCustomerServiceRequest!]!
  shortcode(shortcode: String!): A2PCustomerShortcode!
  shortcodes(
    dateRange: A2PDateRange
    topAmount: Int
  ): [A2PCustomerShortcodeListItem!]!
  usage(dateRange: A2PDateRange!): A2PCustomerUsage!
}

"""
Overview interval
"""
enum A2POverviewInterval {
  DAYS
  MONTHS
  YEARS
}

"""
Interface for response with dates
"""
interface A2PResponsePeriod {
  """
  End date
  """
  dateTimeEnd: String

  """
  Start date
  """
  dateTimeStart: String

  """
  Overview interval
  """
  interval: A2POverviewInterval

  """
  Overview length in days
  """
  length: Int
}

input A2PServiceRequestAddress {
  elid: String!
  label: String!
}

"""
Service request carrier
"""
enum A2PServiceRequestCarrier {
  SPARK
  TWODEGREES
  VODAFONE
}

"""
Service request message type
"""
enum A2PServiceRequestMessageType {
  STANDARD
  ZERO_RATED
}

"""
Service request message usage
"""
enum A2PServiceRequestMessageUsage {
  MARKETING
  TRANSACTIONAL
}

"""
Service request message volume
"""
enum A2PServiceRequestMessageVolume {
  HIGH
  LOW
  MEDIUM
}

input A2PServiceRequestTechnicalContact {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

"""
Shortcode CTA
"""
enum A2PShortcodeCTA {
  DEACTIVATE
  EDIT
  VIEW
}

"""
Shortcode status
"""
enum A2PShortcodeStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

"""
Shortcode type
"""
enum A2PShortcodeType {
  STANDARD
  ZERO_RATED
}

"""
Response with status
"""
type A2PStatusResponse implements GenericMutationResponse {
  code: Int!
  message: String!

  """
  Status
  """
  status: Boolean!
  success: Boolean!
}

"""
indicates whether the access is given (through added or granted access) or
inherited (via having high level access to the line)
"""
enum AccessType {
  GIVEN
  INHERITED
}

"""
Object representing an account
"""
type AccountAccessInformation {
  """
  The account's number
  """
  accountNumber: String

  """
  Users with access to the account
  """
  associatedUsers(
    includeNotFound: Boolean = false
    includePending: Boolean = true
    includeRevoked: Boolean = false
    number: String
  ): [AssociatedUser!]!

  """
  The type of the line (if this is a line level access record), or of all the
  lines under the account (if this is an account level access record).  Strictly
  speaking, this is an account-level attribute, but we mostly use it at line
  level, so I have phrased it that way.
  """
  balanceManagement: BalanceManagement

  """
  The user friendly name of the account
  """
  displayName: String

  """
  Line numbers associated with the account
  """
  lines: [Line!]!

  """
  The status text for pending account access requests
  """
  statusText: String
}

enum AccountAccessStatus {
  Active
  NotFound
  Revoked
}

type AccountAssociatedProduct {
  assetId: String
  ifpEligible: Boolean!
  lineNumber: String
  offerId: String
  offerName: String
  productInstanceId: String
}

input accountBalance {
  amount: Float!
}

"""
object to hold account balance details
"""
type AccountBalance {
  """
  Account number
  """
  accountNumber: String!

  """
  current balance detail
  """
  currentBalance: CurrentBalance

  """
  current billing cycle of the account
  """
  currentBillCycle: Int

  """
  detail message
  """
  detailMessage: BalanceInformationMessage

  """
  First name
  """
  firstName: String

  """
  last bill date
  """
  lastBill: LastBill

  """
  Last name
  """
  lastName: String

  """
  last payment details
  """
  lastPayment: LastPayment

  """
  monthly Payment Setup
  """
  monthlyPaymentSetup: [MonthlyPaymentSetup!]

  """
  Next bill date
  """
  nextBill: NextBill

  """
  contains messages to be shown in summary page
  """
  summaryMessage: BalanceInformationMessage
}

"""
object to hold fields for Direct debit/Bank account details
"""
type AccountDetails {
  """
  account name
  """
  accountName: String

  """
  account number
  """
  accountNumber: String

  """
  Bank account suffix
  """
  accountNumberSuffix: String

  """
  Bank name
  """
  bank: String

  """
  Bank number
  """
  bankNumber: String

  """
  Branch name
  """
  branchName: String

  """
  Branch number
  """
  branchNumber: String
}

"""
Object representing an account
"""
type AccountList {
  accountId: String!
  accountNumber: String!

  """
  The type of the line (if this is a line level access record), or of all the
  lines under the account (if this is an account level access record).  Strictly
  speaking, this is an account-level attribute, but we mostly use it at line
  level, so I have phrased it that way.
  """
  balanceManagement: BalanceManagement
  businessName: String
  customerNumber: String!

  """
  DESL's customerSegment e.g. 'Consumer' or 'Business'
  """
  customerSegment: String! @deprecated(reason: "Use segment instead")
  firstName: String
  inCollections: Boolean!
  lastName: String
  products: [AccountAssociatedProduct!]

  """
  Cleaned segment enum e.g. 'personal' or 'business'
  """
  segment: Segment!
  status: String!
}

"""
An object that contains all account information
"""
type AccountResource {
  """
  Indicates whether there is a business name present in the corresponding customer
  """
  hasBusinessName: Boolean

  """
  Indicates whether the user is allowed to add access to this account
  """
  isAccountAccessAllowed: Boolean!

  """
  Indicates whether the corresponding customer has a password setup in Siebel
  """
  isPasswordProtected: Boolean
}

"""
object to hold the account summary fields
"""
type AccountSummary {
  """
  First name
  """
  firstName: String!

  """
  Last Name
  """
  lastName: String!
}

"""
Transaction detail
"""
type AccountTransactionDetail {
  """
  The UUID of the digital bill
  """
  billId: String

  """
  The calculated balance (amount to pay) following this specific transaction represented as a number
  """
  calculatedBalance: Float

  """
  The date that this transaction event was recorded
  """
  date: String!

  """
  A description of the payment or adjustment
  """
  description: String!

  """
  The type of transaction
  """
  type: TransactionType!

  """
  The value of the transaction in NZD, represented as a number
  """
  value: Float!
}

type AccountTransactionsDetails {
  """
  Retrieve an array of transactions (payments, adjustments and charges) associated with an account over a period of time
  """
  details: [AccountTransactionDetail!]!
}

"""
Input for adding account access
"""
input AddAccountAccessInput {
  """
  The account number for the Spark Identity to gain access to
  """
  accountNumber: String!

  """
  The business name of the customer that owns the account
  """
  businessName: String

  """
  The first name of the customer that owns the account
  """
  firstName: String

  """
  The last name of the customer that owns the account
  """
  lastName: String

  """
  A valid line number that's billed to the account
  """
  lineNumber: String

  """
  The password supplied to get access if it is a password protected account
  """
  password: String
}

enum AddAccountAccessNextSection {
  BusinessNameEntry
  FullNameEntry
  LineNumberEntry
  PasswordEntry
}

"""
Response from the add account access mutation
"""
type AddAccountAccessResponse implements GenericMutationResponse {
  code: Int!
  message: String!

  """
  The next form section if more information is required
  """
  nextStep: AddAccountAccessNextSection
  success: Boolean!

  """
  The title of the success response if applicable
  """
  title: String
}

"""
Input for associating account to cart
"""
input AddAccountToCartInput {
  """
  account number that you want to associated to cart
  """
  accountNumber: String!

  """
  Cart unique identitier
  """
  cartId: String!
  channel: CartChannel!
}

type AddAccountToCartResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for adding airpoints to an account
"""
input AddAirpointsInput {
  """
  Account number to add airpoints to
  """
  accountNumber: String!

  """
  The airpoints card number to be added
  """
  airpointsNumber: String!

  """
  First name taken from the Spark Identity of the current user.
  """
  firstName: String!

  """
  Last name taken from the Spark Identity of the current user.
  """
  lastName: String!

  """
  The status passed in to be set to equal Active
  """
  status: String!
}

"""
The action to perform on the cart item
"""
enum AddBundleAction {
  add
  delete
  keep
  modify
}

"""
Use to cancel or resume an existing product
"""
enum AddBundleAutoRenew {
  GR
  OFF
  ON
}

type AddBundleOperationResponse implements GenericMutationResponse {
  bundles: [AddBundlesResponse!] @deprecated(reason: "Use cart instead")
  cart: Cart
  cartId: String @deprecated(reason: "Use cart instead")
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for adding items in the new bundle when cart id is unknown.
"""
input AddBundlesInput {
  bundles: [AddBundlesInputBundle!]!
  channel: CartChannel!

  """
  The process context used for orchestration and creation of the downstream service order
  """
  processContext: ProcessContext
}

"""
Input for adding bundles when cart id is unknown.
"""
input AddBundlesInputBundle {
  accountNumber: String

  """
  Category Id
  """
  categoryId: String
  items: [AddBundlesInputItem!]!
  lineNumber: String
}

"""
Input for adding items in the new bundle when cart id is unknown.
"""
input AddBundlesInputItem {
  action: AddBundleAction
  offerId: String!
  productCharacteristics: ProductCharacteristicsInput
  productInstanceId: String
  quantity: Int
}

type AddBundlesResponse {
  bundleId: String!
  categoryId: String!
  categoryName: String!
  isAffected: Boolean!
  items: [AddBundlesResponseItem!]!
}

type AddBundlesResponseItem {
  itemId: String!
  offerId: String!
}

"""
Use to send action to downstream CRM to invoke follow on orders
"""
enum AddBundleSystemAction {
  ADDED
  CANCEL
  NONE
  RESUME
  TERMINATE
  UPDATE
}

"""
Detail object of Connection Promise request data.
"""
input AddConnectionPromiseLineInput {
  """
  The Spark mobile number to be associated with this Connection Promise.
  """
  lineNumber: String!

  """
  A flag to indicate if the Spark mobile line is considered a primary or secondary alternative connection.
  """
  primaryLine: Boolean!
}

"""
Object having fields for add connection promise results response
"""
type AddConnectionPromiseLineResponse implements GenericMutationResponse {
  code: Int!

  """
  The unique identifier for the Connection Promise record
  """
  connectionPromiseId: String
  message: String!
  success: Boolean!
}

"""
Individual item input to add to existing bundle
"""
input AddItem {
  action: AddBundleAction!
  itemId: String!
  quantity: Int
}

"""
Input for adding items in the new bundle when cart id is unknown.
"""
input AddItemsToBundleInput {
  bundleId: String!
  cartId: String!
  channel: CartChannel!
  items: [AddItem!]!
}

type AddItemsToBundleResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for adding line access
"""
input AddLineAccessInput {
  """
  A SMS-sent code to authorise this access addition
  """
  authorisationCode: String

  """
  The type of line, either POSTPAID or PREPAID
  """
  balanceManagement: BalanceManagement!

  """
  The line number to which access is requested
  """
  lineNumber: String!
}

enum AddLineAccessNextSection {
  AuthorisationCodeEntry
}

"""
Response from the add line access mutation
"""
type AddLineAccessResponse implements GenericMutationResponse {
  code: Int!
  message: String!

  """
  The next form section if more information is required
  """
  nextStep: AddLineAccessNextSection
  success: Boolean!

  """
  The title of the success response if applicable
  """
  title: String
}

enum AddonAction {
  displayProducts
  navigateBack
  redirect
  showErrorScreen
}

"""
A collection of product details with bundleId and isAccountLevel
"""
type AddonOfferDetail implements BaseOfferDetailInterface {
  associatedPriceRules: [AssociatedPriceRule!]
  bundleId: String!
  category: [OfferDetailCategory!]
  categoryIdentifier: String
  contentKey: String
  contractTerm: ContractTerm
  description: String
  entitlements: [Entitlement!]
  externalId: String
  group: Group
  id: String! @deprecated(reason: "Use offerId instead")
  images: [Image!]
  isAccountLevel: Boolean!
  isGrandfathered: Boolean
  name: String!
  offerId: String
  price: Price
  productCharacteristics: ProductCharacteristic
  productFeatures: ProductFeature
  productSpecifications: [ProductSpecification!]
  productType: String
  promotions: [Promotion!]
  stock: Stock
  supportedDestinations: [String!]
}

"""
Offered products
"""
type AddonsProducts {
  accessoryBundles: [AddonOfferDetail!]
  insuranceBundles: [AddonOfferDetail!]
  vasBundles: [AddonOfferDetail!]
}

"""
Possible address suggestion that match the partial
"""
type AddressDetail {
  """
  The mandatory first line of the address at the location
  """
  addressLine1: String!

  """
  The optional second line of the address at the location
  """
  addressLine2: String

  """
  The optional third line of the address at the location
  """
  addressLine3: String

  """
  The optional fourth line of the address at the location
  """
  addressLine4: String

  """
  Unique address identifier
  """
  elid: String!

  """
  The standard latitude of the location
  """
  latitude: Float!

  """
  The standard longitude of the location
  """
  longitude: Float!
}

type AddressResponse {
  """
  Formatted name and GPS co-ordinates for an address identified by its ELID
  """
  detail(elid: String!): AddressDetail!

  """
  Location auto complete
  """
  suggestions(partialAddress: String!): [AddressSuggestion!]!
}

"""
Possible address suggestion that match the partial
"""
type AddressSuggestion {
  """
  Unique address identifier
  """
  elid: String!

  """
  Full address
  """
  label: String!
}

"""
object to hold fields in response when adding payment method to wallet.
"""
type AddWalletPaymentMethodResponse implements GenericMutationResponse {
  """
  rest of the add wallet payment method response.
  """
  addWalletPaymentMethodResponse: RestOfAddWalletPaymentMethodResponse
  code: Int!
  message: String!
  success: Boolean!
}

"""
object to hold fields for response when deleting an airpoints card from account
"""
type AirpointsDeleteResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Airpoints details
"""
type AirpointsResponse {
  airpointsNumber: String!
  firstName: String!
  lastName: String!
  status: String!
}

type AirpointsUpdateResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
The type of payment.
"""
enum AmountType {
  ONEOFF
  TOTALDUE
  TOTALOVERDUE
}

enum AssetType {
  CTA
  Document
  Icon
  Image
  TextContent
  Video
}

type AssociatedPriceRule {
  description: String!
  price: Price!
  pricePointID: String!
  ruleType: RuleType!
  sources: [BaseOfferDetail!]!
}

"""
Object representing a Spark user with access to an account or line
"""
type AssociatedUser {
  """
  The business name of a Spark Identity
  """
  businessName: String

  """
  The Spark email address of the Spark Identity
  """
  email: String!

  """
  	The unique id of the Spark Identity which has access (to the account or line)
  """
  entityID: String!

  """
  The first name the user has set up for their Spark Identity
  """
  firstName: String

  """
  The pending status, true if the access has been requested but not approved
  """
  isPending: Boolean

  """
  The last name the user has set up for their Spark Identity
  """
  lastName: String

  """
  The role of the access the Spark Identity has
  """
  role: String

  """
  indicates whether the access is given (through added or granted access) or
  inherited (via having high level access to the account)
  """
  type: AccessType!
}

"""
object holding fields for association
"""
input Association {
  """
  the access type of the association.
  """
  accessType: PaymentMethodAccessType!

  """
  the spark post pay account number if teh association is on the account.
  """
  accountNumber: String

  """
  the spark line number if the association is on the line.
  """
  lineNumber: String

  """
  the unique identifier of the associated payment method.
  """
  paymentMethodId: String!

  """
  the type of association, as of now we support only one type.
  """
  type: PaymentMethodAssociationType!
}

"""
Authentication information by guest or self service
"""
type Auth {
  isAuthenticated: Boolean!
  isGuest: Boolean!
}

"""
Profile info of the user
"""
type AuthenticatedInfoResponse {
  """
  Indicates if a user is a MySpark user
  """
  hasSparkId: Boolean!

  """
  Indicates if a user is a Guest
  """
  isGuest: Boolean!

  """
  Indicates if a user is logged in as a Guest/MySpark user
  """
  isLoggedIn: Boolean!

  """
  User profile object
  """
  profile: ProfileInfo
}

type AutoTopupDetails {
  """
  Topup settings associated with the line
  """
  topupSettings: [TopupSettings!]!
}

"""
Object containing input fields required to process a voucher topup
"""
input AutoTopupInput {
  """
  The auto topup amount in NZD
  """
  amount: Float!

  """
  The settings for the auto topup
  """
  autoTopupSettings: AutoTopupSettings!

  """
  The prepay line number that is requesting for autotopup and the user has access to
  """
  lineNumber: String!

  """
  This is the unique identifier of the payment method used
  """
  paymentMethodId: String

  """
  the secure transaction token required to pay the amount without persisting any card details.
  """
  secureTransactionToken: String = null

  """
  The source of the payment/card.
  """
  source: TopupSource!
}

"""
The response object of a voucher topup
"""
type AutoTopupResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
The settings for the auto topup
"""
input AutoTopupSettings {
  """
  The first topup date, mandatory for RT
  """
  firstTopupDate: String

  """
  The monthly LB topup limit, mandatory for LB
  """
  monthlyTopupLimit: Float

  """
  The threshold to trigger LB, mandatory for LB
  """
  thresholdAmount: Float

  """
  The type of autotopup
  """
  type: AutoTopupType!
}

enum AutoTopupType {
  LB
  RT
}

type AvailableNumbersResponse {
  code: Int! @deprecated(reason: "use graphql errors")
  lineNumber: String
  lineNumberReservationChunkIndex: Int!
  lineNumberReservationChunks: [[LineNumberReservation!]!]!
  lineNumberReservations: [LineNumberReservation!]!
    @deprecated(reason: "use lineNumberReservationChunks")
  lineNumbers: [String!]! @deprecated(reason: "use lineNumberReservationChunks")
  message: String! @deprecated(reason: "use graphql errors")
  pagingId: String! @deprecated(reason: "use lineNumberReservationChunks")
  reservationId: String! @deprecated(reason: "use lineNumberReservationChunks")
  success: Boolean! @deprecated(reason: "use graphql errors")
}

"""
object to hold fields for summary and detail messages
"""
type BalanceInformationMessage {
  """
  other CTA details
  """
  otherCtas: [OperationTypeCtaDetails!]

  """
  Primary message
  """
  primary: String!

  """
  primary CTA details
  """
  primaryCta: OperationTypeCtaDetails!

  """
  secondary message
  """
  secondary: String

  """
  secondary CTA details
  """
  secondaryCta: OperationTypeCtaDetails

  """
  message status
  """
  status: BalanceMessageStatus

  """
  tertiary message
  """
  tertiary: String
}

"""
Whether the service follows a prepaid billing model, or a postpaid model
"""
enum BalanceManagement {
  POSTPAID
  PREPAID
}

"""
message status
"""
enum BalanceMessageStatus {
  IMPORTANT
  NORMAL
  POSITIVE
  UNAVAILABLE
  WARNING
}

"""
object to hold the bank details.
"""
type BankAccountDetail {
  """
  the name of the account
  """
  accountName: String!

  """
  the account number
  """
  accountNumber: String!

  """
  the name of the bank
  """
  bankName: String!

  """
  the allowed bank names
  """
  bankType: PaymentMethodBankType!
}

"""
input object having fields for bank account detail
"""
input BankAccountDetailInput {
  """
  array holding all associations if any.
  """
  associations: [Association!]

  """
  Object holding the bank details. Mandatory if the type is BANK.
  """
  bankAccountDetail: BankAccountInformation!

  """
  true indicates that he payment method is chosen as the default method of payment.
  """
  isPreferred: Boolean!

  """
  A customised name given by the user for the payment method
  """
  personalisedName: String
}

"""
input object holding the bank details. Mandatory if the type is BANK
"""
input BankAccountInformation {
  """
  the name of the account
  """
  accountName: String!

  """
  the account number
  """
  accountNumber: String!

  """
  the name of the bank
  """
  bankName: String!
}

"""
A collection of product details
"""
type BaseOfferDetail implements BaseOfferDetailInterface {
  associatedPriceRules: [AssociatedPriceRule!]
  category: [OfferDetailCategory!]
  contentKey: String
  contractTerm: ContractTerm
  description: String
  entitlements: [Entitlement!]
  externalId: String
  group: Group
  id: String! @deprecated(reason: "Use offerId instead")
  images: [Image!]
  isGrandfathered: Boolean
  name: String!
  offerId: String
  price: Price
  productCharacteristics: ProductCharacteristic
  productFeatures: ProductFeature
  productSpecifications: [ProductSpecification!]
  productType: String
  promotions: [Promotion!]
  stock: Stock
  supportedDestinations: [String!]
}

"""
An interface for a collection of product details
"""
interface BaseOfferDetailInterface {
  associatedPriceRules: [AssociatedPriceRule!]
  category: [OfferDetailCategory!]
  contentKey: String
  contractTerm: ContractTerm
  description: String
  entitlements: [Entitlement!]
  externalId: String
  group: Group
  id: String! @deprecated(reason: "Use offerId instead")
  images: [Image!]
  isGrandfathered: Boolean
  name: String!
  offerId: String
  price: Price
  productCharacteristics: ProductCharacteristic
  productFeatures: ProductFeature
  productSpecifications: [ProductSpecification!]
  productType: String
  promotions: [Promotion!]
  stock: Stock
  supportedDestinations: [String!]
}

"""
Object representing the breakdown of charges for a billing period
"""
type BillBreakdown {
  """
  The unique identifier for the digital bill
  """
  billId: String!

  """
  The charge summary associated with each billing period
  """
  charges: [BillBreakdownCharge!]!

  """
  The ISO8601 formatted date-time when the digital bill was issued
  """
  date: String!

  """
  The title associated with the digital bill
  """
  title: String!
}

"""
Object representing the charge summary associated with a billing period
"""
type BillBreakdownCharge {
  """
  The type of aggregated charge
  """
  type: String!

  """
  The NZD value of the charge
  """
  value: Float!
}

"""
Billing frequency
"""
enum BillingFrequency {
  EVERY_28_DAYS
  MONTHLY
  ONE_OFF
}

"""
A summary of the billing activity associated with an account
"""
type BillSummary {
  """
  The breakdown of charges for each billing period
  """
  bills: [BillBreakdown!]!
}

enum BiometricProgressInfoBanner {
  MAX_LINKS
  NO_MATCH
  SUCCESS
  TIMED_OUT
}

type BiometricProgressResponse {
  infoBanner: BiometricProgressInfoBanner
  isContinueEnabled: Boolean!
  showResend: Boolean!
  steps: [BiometricProgressStep!]!
}

type BiometricProgressStep {
  label: String!
  status: BiometricProgressStepStatus!
  stepId: String!
}

enum BiometricProgressStepStatus {
  DONE
  ERROR
  INACTIVE
  LOADING
}

type BroadbandDiagnostics {
  """
  The gateway modem model if known
  """
  modemModel: String!

  """
  A list of diagnostic results. If there are no results then an empty array will be returned.
  """
  results: [BroadbandDiagnosticsResult!]

  """
  For the v1 implementation, it will always return true. Included as a future-proofing option.
  """
  testSuiteCompleted: Boolean

  """
  The type of diagnostic test suite run against the line number.
  """
  testSuiteType: BroadbandDiagnosticsTestSuiteType
}

"""
Object having fields for availableCTA
"""
type BroadbandDiagnosticsAvailableCTA {
  """
  The cta type will allow for mapping to be done on the presentation side to ensure the correct CTA can be presented
  """
  ctaType: BroadbandDiagnosticsCtaType!

  """
  The label for the CTA.
  """
  label: String!

  """
  The web link for the article CTA.
  """
  webAction: String
}

"""
The cta type will allow for mapping to be done on the presentation side to ensure the correct CTA can be presented
"""
enum BroadbandDiagnosticsCtaType {
  CHAT
  CONNECTION_TROUBLESHOOTER
  DIAGNOSTIC_CHECK
}

"""
object having fields for diagnostic result
"""
type BroadbandDiagnosticsResult {
  """
  A list of Call To Actions (CTA) representing the next steps the customer can
  take to resolve their connection issue. If no relevant CTAs are possible for
  this troubleshooting step then an empty availableCTAs list will be returned.
  """
  availableCTAs: [BroadbandDiagnosticsAvailableCTA!]!

  """
  Description text that summarises the result of the test and call to action options.
  """
  desc: String

  """
  If an issue was encountered during the execution of this test, this attribute
  is the key that represents the nature of the issue experienced.
  """
  diagnosticSummaryCode: String

  """
  A flag indicated whether this particular diagnostic test has been executed or
  was not performed due to connectivity issues identified earlier.
  """
  testExecuted: Boolean!

  """
  The customer-facing label associated with the diagnostic test result
  """
  testLabel: String!

  """
  A flag indicating whether the diagnostic test has been completed successfully.
  """
  testPassed: Boolean!

  """
  The type of diagnostic test performed
  """
  testType: BroadbandDiagnosticsTestType!

  """
  The title/headline of the diagnostic result
  """
  title: String
}

"""
interface containing fields for diagnosticResults mutation response.
"""
type BroadbandDiagnosticsResultsResponse implements GenericMutationResponse {
  broadbandDiagnostics: BroadbandDiagnostics
  code: Int!
  message: String!
  success: Boolean!
}

"""
The type of diagnostic test suite run against the line number.
"""
enum BroadbandDiagnosticsTestSuiteType {
  COPPER
  FIBRE_CHORUS
  FIBRE_OTHER
  WIRELESS_BB
}

"""
 The type of diagnostic test performed
"""
enum BroadbandDiagnosticsTestType {
  ACCESS_POINT
  CONNECTIVITY
  NETWORK
}

"""
Object having fields for availableCTA
"""
type BroadbandTroubleshooterAvailableCTA {
  """
  The label for the CTA.
  """
  label: String!

  """
  The cta type will allow for mapping to be done on the presentation side to ensure the correct CTA can be presented
  """
  type: BroadbandTroubleshooterCTAType!

  """
  The web link for the article CTA.
  """
  webCTA: String
}

"""
Object having fields for body
"""
type BroadbandTroubleshooterBody {
  componentType: BroadbandTroubleshooterComponentType

  """
  The mandatory text copy associated with the block of content. It is assumed
  that a block of content will contain at least one character of text for
  display or screen reader purposes.
  """
  copy: String
}

"""
The type of component that should be rendered onscreen for this body content element.
"""
enum BroadbandTroubleshooterComponentType {
  CHECKLIST_ITEM
  HEADING
  HIGHLIGHTED_NOTE
  TROUBLESHOOT_MODEM_DETAILS
}

"""
The cta type will allow for mapping to be done on the presentation side to ensure the correct CTA can be presented
"""
enum BroadbandTroubleshooterCTAType {
  CHAT
  TROUBLESHOOTING_STEP
}

"""
Object having fields for Gallery
"""
type BroadbandTroubleshooterGallery {
  """
  The URI to the image to render in the gallery. If a gallery item is present it
  is assumed that it will have an image attribute associated with it.
  """
  url: String
}

"""
Object having fields for troubleshooter results response
"""
type BroadbandTroubleshooterResultsResponse {
  """
  The recognised diagnostic summary code that the troubleshooting steps in the result are associated with.
  """
  diagnosticSummaryCode: String!

  """
  A list of troubleshooting steps associated with this diagnostic summary code and modem model.
  """
  helpSteps: [BroadbandTroubleshooterStep!]!

  """
   The first Step ID to take in the connection troubleshooting micro-journey.
  """
  initialStep: String!

  """
  A URI that is a reference to the AEM DAM image resource of this specific modem model.
  """
  modemImage: String

  """
  The manufacturer of the modem if known.
  """
  modemManufacturer: String

  """
  The gateway modem serial number if known.
  """
  modemSerialNumber: String

  """
  The modem model that these connection troubleshooting steps relate to.
  """
  stepForModemModel: String!
}

"""
Object having fields for troubleshooting step
"""
type BroadbandTroubleshooterStep {
  """
  A list of body content text that describes the troubleshooting actions for
  this step. If no body content is defined in the downstream source then an
  empty list is returned.
  """
  bodyList: [BroadbandTroubleshooterBody!]

  """
  A list of Call To Actions (CTA) representing the next steps the customer can
  take to resolve their connection issue. If no relevant CTAs are possible for
  this troubleshooting step then an empty availableCTAs list will be returned.
  """
  ctaList: [BroadbandTroubleshooterAvailableCTA!]!

  """
  The title that a list of CTA options should be grouped under and semantically relate to.
  """
  ctaTitle: String

  """
  A list of images associated with this troubleshooting step. If no images are
  associated with this step then an empty list is returned.
  """
  imageList: [BroadbandTroubleshooterGallery!]

  """
  The unique identifier for the connection troubleshooting step.
  """
  stepId: String!

  """
  The title/headline of the connection troubleshooting step.
  """
  title: String
}

"""
An array of items either
"""
type Bundle {
  bundleId: String!
  categoryId: String
  filteredItems(actions: [CartItemAction!]): [Item!]!
  isLineNumberRequired: Boolean
  items: [Item!]
  lineNumber: String
  offerIds: [String!]!
}

"""
indicates the card vendor
"""
enum CardBrand {
  amex
  diners
  mastercard
  visa
}

"""
object to hold the credit card details.
"""
type CardDetail {
  """
  indicates the card vendor and is
  """
  brand: CardBrand

  """
  The name on the card
  """
  cardName: String

  """
  indicates the card vendor
  """
  cardType: String! @deprecated(reason: "Use CardDetail.brand instead")

  """
  indicates the card vendor
  """
  creditCardType: PaymentMethodCardType!
    @deprecated(reason: "Use CardDetail.brand instead")

  """
  the month of expiry on the card
  """
  expiryMonth: Int!

  """
  the year of expiry on the card
  """
  expiryYear: Int!

  """
  the masked card number
  """
  maskedCardNumber: String!
}

"""
input object holding the card details. Mandatory if the type is CREDIT.
"""
input CardDetailInformation {
  """
  The name on the card
  """
  cardName: String

  """
  indicates the card vendor
  """
  cardType: String!

  """
  the month of expiry on the card
  """
  expiryMonth: Int!

  """
  the year of expiry on the card
  """
  expiryYear: Int!

  """
  the masked card number.
  """
  maskedCardNumber: String!

  """
  temporary representation of the token until registration in Bambora
  """
  oneTimeToken: String

  """
  The secure transaction token provided by bambora to register the card
  """
  secureTransactionToken: String

  """
  The token representing the card in Bambora.
  """
  token: String
}

"""
input object having fields for card detail
"""
input CardDetailInput {
  """
  array holding all associations if any.
  """
  associations: [Association!]

  """
  Object holding the card details. Mandatory if the type is CREDIT.
  """
  cardDetail: CardDetailInformation!

  """
  true indicates that the payment method is chosen as the default method of payment
  """
  isPreferred: Boolean!

  """
  A customised name given by the user for the payment method.
  """
  personalisedName: String
}

"""
Object having fields for display surcharge results response
"""
type CardDisplaySurchargeResponse {
  amex: String!
  dinersClub: String!
  displayText: [String!]!
  masterCard: String!
  operationType: String!
  visa: String!
}

input CardToSaveInput {
  amount: Float!
  cardholderName: String
  token: String!
}

"""
An list of bundles which is in your cart
"""
type Cart {
  accountNumber: String
  auth: Auth!
  bundles: [Bundle!]
  cartId: String!
  id: String!
  isAccountNumberRequired: Boolean!
  productOfferImages: [ProductOfferImage!]
  segment: String
  shippableItems: [Item!]
  summaries: [Summary!]
}

"""
Channel to be used, defaults to personalshop
"""
enum CartChannel {
  businessshop
  personalshop
  personalss
}

type CartExistingMpdLine {
  currentDiscountPercentage: Discount!
  currentPrice: Float!
  description: String!
  existingDiscountPercentage: Discount!
  lineNumber: String!
  updatedPrice: Float!
}

enum CartItemAction {
  add
  delete
  keep
  modify
}

"""
Cart Price object
"""
type CartPrice {
  taxExclusiveValue: Float!
  value: Float!
}

"""
An representation of what should be shown on the Shop Cart page.
"""
type CartView {
  cart: Cart
  id: ID!
  mandatoryAction: CartViewMandatoryAction
  screen: CartViewScreen!
}

"""
Indicates what action need to be done by the customer to proceed.
"""
enum CartViewMandatoryAction {
  CHOOSE_ACCOUNT
  CHOOSE_ELIGIBLE_IFP_PLAN
  SIGN_IN
}

"""
Indicates which UI screen to show on the Cart page.
"""
enum CartViewScreen {
  EMPTY_SCREEN
  NO_ACCOUNT_SCREEN
  OVERVIEW_SCREEN
}

type Category {
  iconName: String!
  label: String!
  url: String
}

"""
The type of the medium, which provides context for the medium value.
"""
enum ChannelType {
  email
  inapp
  push
  sms
}

type CheckoutDataFieldEntry {
  name: String!
  value: String
}

input CheckoutDataInput {
  cartId: String!
  channel: CartChannel!
}

type CheckoutDataResponse {
  id: ID!
  sections: [CheckoutDataSection!]!
}

type CheckoutDataSection {
  sectionId: String!
  steps: [CheckoutDataStep!]!
}

type CheckoutDataStep {
  entries: [CheckoutDataFieldEntry!]!
  offerContainerId: String
  stepId: String!
  stepPath: String!
}

"""
BlueMarble's Dynamic Checkout field
"""
type CheckoutField {
  """
  Indicates which React component to render
  """
  component: CheckoutFieldComponent!
  componentViewId: String
  componentViewName: String
  contentKey: String
  customItems: [String!]
  dataRef: [CheckoutFieldDataRef!]
  defaultValue: String
  fieldType: CheckoutFieldComponent!
    @deprecated(reason: "Use component instead")
  filterDate: String
  infoLayerContentKey: String
  key: String!
  label: String
  maximumRule: FieldRule
  minimumRule: FieldRule
  name: String!
  options: [CheckoutFieldOption!]
  parent: Parent
  placeholder: String
  regionId: String
  required: Boolean!
  shouldHideWhenSingleOption: Boolean!
  shouldMask: Boolean!
  showInSummary: Boolean!
  summaryLabel: String
  summaryTemplate: String
  validationRule: FieldRule
  visibilityExpression: String
}

enum CheckoutFieldComponent {
  ACCOUNT_NUMBER
  ADDRESS_SEARCH
  BENEFITS
  BLACKBOX
  BUTTON
  CARD_INPUT
  CART_REVIEW_FOOTNOTE
  CART_TABLE
  CHANGE_PAYMENT_METHOD
  CHANGE_PLAN_COMPARER
  CHECKBOX
  CHOICEBOX
  CLOSE_BUTTON
  CONTENT_FIELD
  COPY_PERSONAL_DETAILS_CHECKBOX
  DATEPICKER
  DELIVERY_ITEMS
  DELIVERY_OPTIONS
  DROPDOWN
  EMAIL_DELIVERY_ITEMS
  FOOTNOTE
  FULL_DATE_INPUT
  HEADING_FIELD
  HIDDEN
  INFO_BOX_FIELD
  INLINE_DATE_PICKER
  MOBILE_TRANSFER_MESSAGE
  MONTH_DATE_INPUT
  MPD_COMPARER
  MPD_DETAILS
  NEW_PHONE_NUMBER
  NUMBER_INPUT
  PAYMENT_AMOUNT
  PAYMENT_BUTTON
  PAYMENT_FIELD
  PAYMENT_OPTIONS
  PHONE_INPUT
  REVIEW_BUTTON
  SERVICE_PROVIDER
  SIM_NUMBER
  STORE_LIST
  SUBMIT_BUTTON
  SUBMIT_RECOMMENDATION_BUTTON
  SUBSCRIPTION_COMPARER
  TEXT_INPUT
  TOGGLE_BUTTON
  UNSUPPORTED
  UPFRONT_PAYMENT
}

type CheckoutFieldDataRef {
  id: String!
  text: String!
}

"""
BlueMarble's Dynamic Checkout field option
"""
type CheckoutFieldOption {
  iconName: String
  label: String!
  sublabel: String
  value: String!
  visibility: Boolean!
}

"""
BlueMarble's Dynamic Checkout step
"""
type CheckoutSection {
  descriptionContentKey: String
  name: String
  sectionId: String!
  steps: [CheckoutStep!]!
}

"""
BlueMarble's Dynamic Checkout step
"""
type CheckoutStep {
  bundleId: String
  fields: [CheckoutField!]!
  itemId: String
  name: String
  nameExpression: String
  stepId: String!

  """
  This is a combination of the stepId and the bundle/offer container id that this step is referring to e.g. "setup-7b08884e"
  """
  stepPath: String!
}

"""
BlueMarble's Dynamic Checkout structure
"""
type CheckoutStructureQueryResponse {
  id: String!
  sections: [CheckoutSection!]!
}

"""
The type of client that initiated the request.
"""
enum ClientType {
  CQ_DESKTOP
  CQ_MOBILE
  SMARTPHONE
}

type Color {
  name: String!
  primaryColor: String!
  value: String!
}

input CompatibleProductsInput {
  categoryId: String!
  channel: CartChannel!
  offerIds: [String!]!
}

"""
Detail object of line associated with connection promise.
"""
type ConnectionPromiseLine {
  """
  The unique identifier for the connection promise record
  """
  connectionPromiseId: String!

  """
  The spark mobile line number associated with this connection promise.
  """
  lineNumber: String!

  """
  A flag to indicate if the Spark mobile line is considered a primary (20GB data
  over 7 days) or secondary (5GB data over 7 days) alternative connection.
  """
  primaryLine: Boolean!
}

"""
Object having fields for connection promise results response
"""
type ConnectionPromiseLinesResponse {
  """
  A list of line details associated with this connection promise.
  """
  lines: [ConnectionPromiseLine!]
}

"""
object to hold fields for summary and detail messages
"""
type ContentAsset {
  """
  content details
  """
  content: [ContentDetails!]!
}

"""
object to hold assets to get help content
"""
type ContentAssets {
  """
  asset with content
  """
  assets: [ContentAsset!]!
}

"""
object to hold fields for summary and detail messages
"""
type ContentDetails {
  """
  asset type
  """
  assetType: AssetType!

  """
  format of content
  """
  format: ContentFormatType!

  """
  url
  """
  linkName: String

  """
  text of the content
  """
  text: String

  """
  content style type
  """
  type: ContentType
}

enum ContentFormatType {
  cta
  gif
  jpg
  mp4
  pdf
  png
  text
  zip
}

"""
Content journey details to get content text info
"""
type ContentJourneyDetails {
  key: String!

  """
  Content field type
  """
  type: ContentJourneyKeys!
  url: String
  value: String
}

enum ContentJourneyKeys {
  HEADING
  HYPERLINK
  IMAGE
  LABEL
  ORDERED_LIST_ITEM
  PARAGRAPH
  SUB_HEADING
  UNORDERED_LIST_ITEM
}

enum ContentType {
  cta
  heading
  paragraph
}

"""
Information on contract term
"""
type ContractTerm {
  description: String
  name: String
  unit: ContractTermUnit!
  value: Int!
}

enum ContractTermUnit {
  Day
  Hour
  Month
  Week
  Year
}

"""
object to hold fields for credit card details
"""
type CreditCard {
  """
  Card issuer
  """
  cardIssuer: String

  """
  Card name
  """
  cardName: String

  """
  Credit card token of the card
  """
  ccId: String

  """
  Card expiry month
  """
  expiryMonth: String

  """
  Card expiry year
  """
  expiryYear: String

  """
  Last 4 digits of the card
  """
  lastFourDigits: String
}

"""
input object having registered credit card bill payment request fields
"""
input CreditCardBillPaymentRequestInput {
  """
  The account number for which the bill needs to be paid.
  """
  accountNumber: String!

  """
  The amount to be paid from the credit card.
  """
  amount: Float

  """
  The type of payment.
  """
  amountType: AmountType!

  """
  The unique identifier of this payment method.
  """
  paymentMethodId: String!

  """
  Indicates if the given card has to be setup as autopay or not.
  """
  setupAutoPay: Boolean!

  """
  The source of the payment/card.
  """
  source: TopupSource!
}

"""
object to hold registered credit card bill payment response
"""
type CreditCardBillPaymentResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
input object containing fields for credit card topup input.
"""
input CreditCardTopupInput {
  """
  The amount to be paid in NZD
  """
  amount: Float!

  """
  the unique identifier of this payment method.
  """
  paymentMethodId: String = null

  """
  the secure transaction token required to pay the amount without persisting any card details.
  """
  secureTransactionToken: String = null

  """
  The source of the payment/card.
  """
  source: TopupSource = null
}

"""
object containing fields for credit card response
"""
type CreditCardTopupResponse implements GenericMutationResponse {
  """
  The total available balance.
  """
  availableBalance: Float
  code: Int!
  message: String!

  """
  The receipt number that uniquely identifies this transaction.
  """
  receiptNumber: String

  """
  The total reserved balance.
  """
  reservedBalance: Float
  success: Boolean!
}

"""
Credit/Debit marker
"""
enum CreditDebitMarker {
  CR
  DR
}

"""
This object provides details form SPARK CRM
"""
type CRMAttributes {
  """
  A comma separated list of unique legal categories (Individual, Business) the
  users linked access is associated in Sparks CRM system.
  """
  legalCategory: String

  """
  A comma separated list of unique line of business segments (Spark, Skinny,
  Wholesale) the users linked access is associated in Sparks CRM system.
  """
  lineOfBusiness: String

  """
  A comma separated list of unique customer segments (Consumer or Business) the
  users linked access is associated in Sparks CRM system.
  """
  segment: String
}

"""
CTA code
"""
enum CtaCode {
  ADD_CREDIT
  BUY_PACK_OR_EXTRA
  GET_HELP_WITH_BILL
  MANAGE_AUTO_TOPUP
  MANAGE_MONTHLY_PAYMENT
  MANAGE_PACK_OR_EXTRA
  MESSAGE_US
  PAY_BILL
  SETUP_AUTO_TOPUP
  SETUP_MONTHLY_PAYMENT
  TOPUP
  VIEW_IFP
  VIEW_LATEST_BILL
  VIEW_TRANSACTION_DETAIL
}

type CtaOverrideDetail {
  data: String
  label: String
  relatesTo: String
  segment: SegmentType
  sortOrder: Int
  style: StyleType
  type: String!
}

type CurrentBalance {
  """
  current due amount
  """
  due: PaymentAmount

  """
  current overdue amount
  """
  overdue: PaymentAmount
}

"""
Customer Segment
"""
enum CustomerSegment {
  Business
  Consumer
}

input DataCap {
  """
  The units of the value.
  """
  unit: SmartCapUnit

  """
  The new value of the smartcap.
  """
  value: Float!
}

"""
Input for deleting airpoints for an account
"""
input DeleteAirpointsInput {
  """
  Account number to delete airpoints from
  """
  accountNumber: String!

  """
  the status to be passed in and set as InActive to invalidate airpoints
  """
  status: String!
}

"""
input object having fields for removing existing monthly payment.
"""
input DeleteAutoPayBillInput {
  """
  The account number for which automatic bill payment setup to be removed if the given registered paymentmethodid is valid.
  """
  accountNumber: String!

  """
  the unique identifier of this payment method.
  """
  paymentMethodId: String!
}

"""
object to hold fields for response when deregistering a card or bank for automatic bill payment
"""
type DeleteAutoPayBillResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
input object having fields for removing auto topup.
"""
input DeleteAutoTopupInput {
  """
  The prepay line number whose auto-topup needs to be stopped and the user has access to.
  """
  lineNumber: String!
}

type DeleteAutoTopupResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

type DeleteBundleResponse implements GenericMutationResponse {
  cart: Cart!
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for delete cart bundle mutation
"""
input DeleteCartBundleInput {
  bundleId: String!
  cartId: String!
  channel: CartChannel!
}

"""
Object containing input fields for deleting connection promise line
"""
input DeleteConnectionPromiseLineInput {
  """
  The unique identifier for the Connection Promise record
  """
  connectionPromiseId: String!

  """
  The Spark mobile number to be associated with this Connection Promise.
  """
  lineNumber: String!
}

"""
Object having fields for delete connection promise results response
"""
type DeleteConnectionPromiseLineResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for deleting an item from an existing bundle.
"""
input DeleteItemFromBundleInput {
  bundleId: String!
  cartId: String!
  channel: CartChannel!
  itemId: String!
}

type DeleteItemFromBundleResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
input object having fields for removing existing user preference channel.
"""
input DeleteUserPreferenceChannelInput {
  """
  The preference channel type to be removed for the given user, eg. email or sms.
  """
  channelType: String!

  """
  The channel value for this preference, eg. 02765432. When combined with
  channel Type, creates a unique identifier for this preference channel.
  """
  channelValue: String!
}

"""
object to hold fields for response when removing a preference channel for a given user.
"""
type DeleteUserPreferenceChannelResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Destination Code
"""
type DestinationCode {
  isoAlpha3: String!
}

"""
Destinations related information
"""
type Destinations {
  destinationCode: DestinationCode!
  destinationName: String!
  network: String
  rates: [Rate!]!
  zone: String!
}

"""
Product filter related information
"""
type DeviceGalleryFilter {
  filterId: String!
  name: String!
  options: [DeviceGalleryFilterOption!]!
}

type DeviceGalleryFilterOption {
  count: Int!
  label: String!
  optionId: String!
}

type DeviceGalleryProduct {
  basePrice: Float
  basePriceExcludingTax: Float
  brand: String
  colors: [Color!]
  description: String
  discountText: String
  effectivePrice: Float
  effectivePriceExcludingTax: Float
  groupId: String
  ifpId: String
  imageUrl: String
  isFeatured: Boolean
  launchDate: String
  name: String!
  offerId: String!
  planId: String
  priceType: String
  startPricePoint: Float
  tag: String
}

"""
Discount related information for selected multi product
"""
type Discount {
  appliedValue: Float!
  discountCategory: String!
  discountedValue: Float!
}

"""
Array of display surcharge operation types to get the surharge values.
"""
input DisplaySurchargeInput {
  """
  The type of payment.
  """
  operationTypes: [DisplaySurchargeOperationType!]!
}

enum DisplaySurchargeOperationType {
  PAY_BILL
  SETUP_MONTHLY_PAYMENT
}

"""
Object having fields for display surcharge results response
"""
type DisplaySurchargeResponse {
  surchargeValues: [CardDisplaySurchargeResponse!]!
}

type EligibleLine {
  """
  The account number associated with the eligible line number.
  """
  accountNumber: String!

  """
  The line number that the product offer is eligible for.
  """
  lineNumber: String!

  """
  The current plan offer ID associated to the eligible line number.
  """
  offerId: String!

  """
  The customer-facing name of the current plan associated to the eligible line number.
  """
  offerName: String!
}

"""
Indicates price type
"""
enum EntitledEntityType {
  ACCOUNT
  LINE
}

"""
Information on product entitlements
"""
type Entitlement {
  contentKey: String
  iconUrl: String
  longDescription: String
  name: String!
  quantity: String
  shortDescription: String
  sortOrder: Int
  type: String
}

input ExistingCardInput {
  paymentMethodId: String!
  paymentMethodSource: WalletPaymentMethodSource!
}

type extrasCategory {
  defaultSelected: Boolean
  description: String
  id: String!
  isCategoryContainer: Boolean
  name: String!
  offers: [ExtrasDetail!]
  sortOrder: Int
  subCategories: [ProductDetailsSubCategory!]
  visibility: Boolean
}

"""
Extras detail related information
"""
type ExtrasDetail {
  category: [OfferDetailCategory!]
  contentKey: String
  description: String
  entitlements: [Entitlement!]
  id: String!
  name: String!
  price: Price
  productCharacteristics: ProductCharacteristic
  promotions: [Promotion!]
  supportedDestinations: [String!]
}

input ExtrasInput {
  lineNumber: String!
}

type ExtrasResponse {
  extrasCategories: [extrasCategory!]

  """
  Array of notifications to be presented to frontend.
  """
  notifications: [Notifications!]
}

enum FeasibilityReason {
  ALLOWED
  CALL_CENTRE
  CHANGE_OFFER
  IN_PROGRESS
  PORT_OUT
  SERVICE_NOT_ACTIVATED
  TERMINATE
  UNKNOWN
}

"""
BlueMarble's Dynamic Checkout field rules
"""
type FieldRule {
  expression: String!
  message: String
}

type FooterContentResponse {
  footerLegalLinks: [FooterLinkItem!]!
  footerLinkMenu: [FooterMenuItem!]!
  footerSocialMediaLinks: [FooterLinkItem!]!
}

type FooterLinkItem {
  iconName: String
  id: String!
  label: String!
  url: String!
}

type FooterMenuItem {
  heading: String!
  id: String!
  items: [FooterLinkItem!]!
  url: String!
}

"""
Frequency Period
"""
enum FrequencyPeriod {
  Day
  Hour
  Month
  Week
  Year
}

"""
Frequency Type
"""
enum FrequencyType {
  OneOff
  Recurring
}

type GalleryProductResponse {
  filters: [DeviceGalleryFilter!]!
  products: [DeviceGalleryProduct!]!
  subcategories: [Subcategory!]!
  subcategoryId: String!
}

"""
Generic mutation response
"""
interface GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Product group information
"""
type Group {
  description: String
  groupId: String
  groupImages: [Image!]
  id: String!
  images: [Image!]
  isDefault: Boolean
  name: String!
  sortOrder: Int
}

type HeaderContent {
  businessCategories: [Category!]!
  businessCategoriesDesktop: [Category!]!
  personalCategories: [Category!]!
  personalCategoriesDesktop: [Category!]!
}

"""
Offer detail object for IFP products
"""
type IfpOfferDetail {
  description: String
  id: String!
  name: String!
  promotions: [Promotion!]
}

"""
Information on product images
"""
type Image {
  defaultUrl: String
  description: String
  id: String @deprecated(reason: "Use the image id instead")

  """
  the unique identifier of the image
  """
  imageId: String
  sortOrder: Int
  standardUrl: String
  thumbnailUrl: String
  tinyUrl: String
  type: ImageType
  zoomUrl: String
}

enum ImageType {
  BACKGROUND
  FEATURED
  GALLERY
  LOGO
  OTHER
  PRODUCT
  SHOWCASE
}

"""
Input for initiating Checkout process for a specific Cart.
"""
input InitiateCheckoutInput {
  cartId: String!
  channel: CartChannel!
}

type InitiateCheckoutResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
An item in a bundle could be plan or addon or accessory
"""
type Item {
  action: CartItemAction
  balanceManagement: BalanceManagement
  basePrice: CartPrice
  billingFrequency: BillingFrequency
  categories: [String!]!
  contractTerm: ContractTerm
  dealText: String!
  description: String
  discountPrice: CartPrice
  effectivePrice: CartPrice
  frequencyPeriod: FrequencyPeriod
  frequencyType: FrequencyType
  frequencyValue: Int
  imageUrl: String
  isIncluded: Boolean
  itemId: String!
  offerId: String!
  productOfferingId: String!
  quantity: Int!
  removable: Boolean
  shouldHide: Boolean
  title: String!
}

type KeyFloatValuePair {
  key: String!
  value: Float!
}

type KeyIntegerValuePair {
  key: String!
  value: Int!
}

type KeyStingValuePair {
  key: String!
  value: String!
}

type LabelFloatValuePair {
  label: String!
  value: Float!
}

type LabelIntegerValuePair {
  label: String!
  value: Int!
}

type LabelStringValuePair {
  label: String!
  value: String!
}

"""
object to hold fields for last bill details
"""
type LastBill {
  """
  Last bill date
  """
  billDate: String
}

"""
object to hold fields for last payment details
"""
type LastPayment {
  """
  Last payment amount
  """
  paymentAmount: PaymentAmount

  """
  Last payment date
  """
  paymentDate: String
}

"""
Object representing a line
"""
type Line {
  allowances: LineAllowancesType!

  """
  Users with access to the line
  """
  associatedUsers(
    includeNotFound: Boolean = false
    includePending: Boolean = true
    includeRevoked: Boolean = false
    number: String
  ): [AssociatedUser!]!

  """
  Whether the service follows a prepaid billing model, or a postpaid model
  """
  balanceManagement: BalanceManagement
  changeExtraFeasibility: OrderFeasibility!
  changePlanFeasibility: OrderFeasibility!

  """
  The user friendly name of the line
  """
  displayName: String
  group: LineShareGroupCaps!

  """
  The units of the soft cap
  """
  groupCapUnit: LineSoftCapUnit

  """
  The optional soft cap (will only be present for some sharers)
  """
  groupCapValue: Int

  """
  A reference to the group
  """
  groupID: String

  """
  In the case of shared group constructs the role of the line within the share construct is available
  """
  groupProfile: String

  """
  The line's number
  """
  lineNumber: String!
  plan: LinePlan!

  """
  Retrieve eligible plans or packs for Line Number.
  """
  planProductOffers(packInstanceId: String): PlanProductOffers!

  """
  The type of service the usage is for
  """
  serviceType: LineServiceType!

  """
  Returns a summary of a spend (charges, discounts, credits, etc) associated to
  the supplied line number for a defined interval. Note currently only a monthly
  reporting period is supported.
  """
  spendHistory(
    end: String
    interval: LineHistoryInterval!
    start: String
  ): LineSpendHistoryResponse!
  spendHistoryDetail(
    interval: LineHistoryInterval!
    periodBreakdownId: String!
  ): LineSpendHistoryDetailResponse!

  """
  Returns details of subscription component offer for a given SparkId. Includes billing information and CTAs.
  """
  subscription(productInstanceId: String!): LineSubscription!

  """
  Query the activation url to activate the product at partner site.
  """
  subscriptionActivation(
    productInstanceId: String!
  ): LineSubscriptionActivation!

  """
  Returns eligible subscription offers from BlueMarble for a given line.
  """
  subscriptionProductOffers(
    productInstanceId: String
  ): SubscriptionProductOffers!
  summary: LineSummary!
  usageHistory(
    end: String
    interval: LineHistoryInterval!
    start: String
    usageType: LineUsageHistoryUsageType!
  ): LineUsageHistory!
  usageHistoryDetail(
    interval: LineHistoryInterval!
    periodBreakdownId: String!
    usageType: LineUsageHistoryUsageType!
  ): LineUsageHistoryDetail!

  """
  An array of the types of usage that are applicable to the connection
  """
  usages: [LineUsage!]!
  usageSummary: LineUsageSummary
  usageTransactions(
    end: String
    size: String
    start: String
  ): LineUsageTransactions!
}

enum LineAccessLevelType {
  LINE_LEVEL
}

type LineAllowanceCountry {
  """
  Country code value
  """
  code: String!

  """
  Name of the country
  """
  name: String!

  """
  Network type supported in country
  """
  network: String
}

type LineAllowanceDataStackAllowance {
  """
  Limit of the data stack allowance
  """
  capLimit: Float!

  """
  Status of the data stack entitlement
  """
  endDateTime: String!

  """
  Id of the data stack entitlement
  """
  id: String!

  """
  Remaining from data stack allowance
  """
  remainingVolume: Float!

  """
  Start date of the data stack entitlement
  """
  startDateTime: String!

  """
  Status of the data stack entitlement
  """
  status: LineAllowanceEntitlementStatus!

  """
  Used data from the data stack
  """
  usedVolume: Float

  """
  Type/Unit of the volume
  """
  volumeType: LineAllowanceVolumeType!
}

enum LineAllowanceEntitlementStatus {
  ACTIVE
  GRACE
}

enum LineAllowanceExtraDetailRenewalState {
  GUARANTEE_RENEWAL
  OFF
  ON
  PENDING_PAYMENT
}

enum LineAllowanceExtraDetailSubtype {
  DOMESTIC
  ROAMING
}

type LineAllowanceRolloverDetails {
  """
  List of rollover allowance detail
  """
  rolloverAllowances: [LineAllowanceRolloverDetailsRolloverAllowance!]
}

type LineAllowanceRolloverDetailsRolloverAllowance {
  """
  Remaining amount from roll over allowance
  """
  remainingAmount: Float!

  """
  Remaining amount unit of roll over allowance
  """
  remainingUnit: String!

  """
  List of roll over allowance details
  """
  rolloverExpiry: [LineAllowanceRolloverDetailsRolloverAllowanceRolloverExpiry!]

  """
  Rollover priority value
  """
  rolloverPriority: Int

  """
  Status of the rollover
  """
  rolloverStatus: String

  """
  Type of the rollover
  """
  rolloverType: String

  """
  Type of usage
  """
  usageType: String!
}

type LineAllowanceRolloverDetailsRolloverAllowanceRolloverExpiry {
  """
  Value of expiry amount
  """
  expiryAmount: Float!

  """
  Expiry amount unit
  """
  expiryAmountUnit: String!

  """
  Expiry date time
  """
  expiryDate: String!
}

type LineAllowancesExtraDetails {
  """
  The optional number of this type of extra that the customer allowed to have available to activate.
  """
  allowedCount: Int

  """
  The number of this type of extra that the customer currently has available to activate.
  """
  availableCount: Int

  """
  Billing frequency code
  """
  billingFrequencyCode: String

  """
  Billing frequency name
  """
  billingFrequencyName: String

  """
  Contract renewal type
  """
  contractRenewalType: String

  """
  Contract term frequency
  """
  contractTermFrequency: String

  """
  Contract term number
  """
  contractTermNumber: Int
  countries: [LineAllowanceCountry!]

  """
  Display priority of extra
  """
  displayPriority: Int

  """
  Entitlements of the extra
  """
  entitlements: [LineEntitlementDetails!]

  """
  Offer id of the extra
  """
  offerId: String!

  """
  End date of the subscription
  """
  periodEndDate: String

  """
  Flag to indicate the addon/extra product is prepaid base plan value pack
  """
  prepaidBasePlanValuePack: Boolean!

  """
  Price of the extra product
  """
  price: Float

  """
  Price type of the extra
  """
  priceType: String

  """
  Product id of the extra
  """
  productId: String!

  """
  Product instance id of the extra
  """
  productInstanceId: String!

  """
  Name of the product
  """
  productName: String!

  """
  Flag to indicate the extra is renewable or not
  """
  renewable: Boolean

  """
  Renewal frequency of the extra
  """
  renewalFrequency: String

  """
  Renewal state of the extra
  """
  renewalState: LineAllowanceExtraDetailRenewalState

  """
  Status of the extra
  """
  status: String!

  """
  Subscription term name
  """
  subscriptionTermName: String

  """
  Subtype of the extra
  """
  subtype: LineAllowanceExtraDetailSubtype!

  """
  Type of extra
  """
  type: String!

  """
  Usage type of the extra
  """
  usageType: String
}

type LineAllowanceSharePlanDetails {
  """
  Group id of the share plan
  """
  groupId: String

  """
  List of lines shared the share plan
  """
  lines: [LineAllowanceSharePlanLineDetails!]

  """
  Share plan type of the current plan
  """
  type: LineAllowanceSharePlanLineDetailSharePlanType
}

type LineAllowanceSharePlanLineDetails {
  """
  Line number of the sharer plan
  """
  lineNumber: String!

  """
  Plan name of the line
  """
  planName: String

  """
  Service id of the sharer line
  """
  serviceId: String!

  """
  Sharer type
  """
  sharerType: LineAllowanceSharePlanLineDetailSharerType

  """
  Share plan type of the current plan
  """
  type: LineAllowanceSharePlanLineDetailSharePlanType!
}

enum LineAllowanceSharePlanLineDetailSharePlanType {
  LEADER
  SHARER
}

enum LineAllowanceSharePlanLineDetailSharerType {
  DATA
  MOBILE
}

type LineAllowanceSpeedAllowancesDetails {
  """
  The optional data allowance remaining if the speed allowance is expired after a certain amount of data is consumed.
  """
  allowanceRemainingAmount: Float

  """
  The optional unit of measure for a speed allowance that is expired after a certain amount of data is consumed.
  """
  allowanceRemainingUnit: String

  """
  The optional type of product associated with this speed allowance
  """
  allowanceType: String

  """
  The optional current speed cap limit associated with the plan in the unit of measure specified by the unitType attribute.
  """
  capLimit: Float

  """
  Expiry date time
  """
  expiryDateTime: String

  """
  The optional identifier of the product associated with the speed allowance
  """
  offerId: String

  """
  The optional name of the product associated with the speed allowance
  """
  productName: String

  """
  The status of the speed allowance
  """
  status: LineAllowanceSpeedAllowancesDetailStatus!

  """
  The optional string representing the type of units the speed cap is measured by.
  """
  unitType: String
}

enum LineAllowanceSpeedAllowancesDetailStatus {
  ACTIVE
  DEFAULT
  NEXT
}

type LineAllowancesType {
  """
  Data stack allowance detail list applicable for this plan
  """
  dataStackAllowances: [LineAllowanceDataStackAllowance!]

  """
  Entitlements of the plan
  """
  entitlements: [LineEntitlementDetails!]

  """
  Extras associated with the line
  """
  extras: [LineAllowancesExtraDetails!]

  """
  Auto purchage roaming product details
  """
  rolloverDetails: LineAllowanceRolloverDetails

  """
  Share plan details associated with the plan
  """
  sharePlanDetails: LineAllowanceSharePlanDetails

  """
  The information about the speed allowance associated with the plan.
  """
  speedAllowances: LineAllowanceSpeedAllowancesDetails
}

enum LineAllowanceVolumeType {
  GB
  KB
  MB
}

"""
Object to hold fields for card details associated with the topup setting
"""
type LineDetails {
  """
  Auto topup details of the line
  """
  autoTopupDetails: AutoTopupDetails
}

type LineEntitlementDetails {
  """
  Description of entitlement
  """
  description: String

  """
  Detailed description of entitlement
  """
  detailedDescription: String

  """
  Display priority of entitlement
  """
  displayPriority: Int

  """
  The unit of the quantity
  """
  entitlementQuantityUnit: LineEntitlementQuantityUnit

  """
  Id of the entitlement
  """
  id: String!

  """
  Name of the entitlement
  """
  name: String!

  """
  Quantity of the entitlement
  """
  quantity: Float

  """
  Subtype of the entitlement
  """
  subtype: String

  """
  The throttle message of the entitlement
  """
  throttleMessage: String

  """
  True, if unlimited quantity
  """
  unlimited: Boolean!

  """
  Type of the entitlement
  """
  usageType: String!
}

enum LineEntitlementQuantityUnit {
  GB
  MB
  MBPS
  MIN
  TEXT
}

enum LineHistoryInterval {
  DAILY
  HOURLY
  MONTHLY
}

type LineNumberReservation {
  lineNumber: String!
  reservationId: String!
}

"""
Fetch line plan information from Line Plan API
https://sparknz.atlassian.net/wiki/spaces/DC/pages/9833644419/GET+Line+Plan+API
"""
type LinePlan {
  balanceManagement: BalanceManagement!
  contractEndDate: String
  customerSegment: CustomerSegment!
  legalCategory: String
  lineOfBusiness: String!
  offerId: String
  planType: String!
  price: Float!
  productId: String!
  productName: String!
  showPricesIncludingGST: Boolean!
}

"""
An object that contains all line information
"""
type LineResource {
  """
  Indicates whether the user is allowed to add access to this line
  """
  isLineAccessAllowed: Boolean!

  """
  The type of service on the line
  """
  lineType: LineType
}

enum LineServiceType {
  BROADBAND
  COPPER
  MOBILE
  WIRELESS_BROADBAND
}

type LineShareGroupCapMember {
  """
  The value of the sharer cap, it the share group member is capped. Can be 0 or
  any number. Optional, but required is isUncapped is false.
  """
  capValue: String

  """
  Indicates if the cap is set to unlimited.  If unlimited the value will be true.
  """
  isUncapped: Boolean!

  """
  The service/connection number for the group member.
  """
  serviceId: String!

  """
  The status of the group member.  Only expect Active or Pending
  """
  status: String!

  """
  The unit of time that the usage data is aggregated by
  """
  type: LineShareGroupCapMemberType!

  """
  The units of the value
  """
  unit: LineShareGroupCapMemberUnit

  """
  The amount used by the sharer. Can be 0 or any number. Optional but expected, even if it is 0
  """
  usedValue: String
}

enum LineShareGroupCapMemberType {
  Leader
  MobileSharer
}

enum LineShareGroupCapMemberUnit {
  GB
  MB
}

type LineShareGroupCaps {
  """
  The Siebel reference id of the group.
  """
  id: String!

  """
  An array of the members which are included in the group.
  """
  members: [LineShareGroupCapMember!]!

  """
  The name of the group.
  """
  name: String!

  """
  An object providing the total data that group has access to.
  """
  totalData: LineShareTotalData!
}

type LineShareTotalData {
  """
  Unit of value.
  """
  unit: LineShareGroupCapMemberUnit!

  """
  Total data consumed.
  """
  value: Float!
}

enum LineSoftCapUnit {
  GB
  MB
}

"""
An enum representing the high-level product type associated with the breakdown.
"""
enum LineSpendHistoryBreakdownType {
  ADDITIONAL_INCLUDED
  ADDITIONAL_PAID
  CREDIT
  PLAN
}

type LineSpendHistoryContributingProduct {
  """
  The date when the charge for the product is ended.
  """
  chargeEndDateTime: String

  """
  The date when the instance of this product was purchased, renewed or activated.
  """
  chargeStartDateTime: String!

  """
  The downstream Offer ID associated to this product.
  """
  offerId: String

  """
  The spend to the line for this product, it will have 2 d.p.
  """
  periodSpend: Float!

  """
  The date when the product service is terminated.
  """
  productEndDateTime: String

  """
  The customer-facing name for this product.
  """
  productName: String!
}

type LineSpendHistoryDetailResponse {
  breakdownType: LineSpendHistoryBreakdownType!

  """
  An array of the products that contributed to this total spend over the
  nominated period. If no products are identified for the period then an empty
  array will be returned.
  """
  contributingProducts: [LineSpendHistoryContributingProduct!]!

  """
  The ISO8601 date-time representing the end of the spend history summary response.
  """
  endDateTime: String!

  """
  A flag to indicate whether the spend values (charges, discounts, credits, etc) are exclusive of GST.
  """
  gstInclusive: Boolean!

  """
  Identifies the type of summary returned. Current supported value is MONTHLY
  """
  interval: LineHistoryInterval!

  """
  The period spend, it will have 2 d.p.
  """
  periodSpend: Float!

  """
  The ISO8601 date-time representing the start of the spend history summary response.
  """
  startDateTime: String!

  """
  Whether this summarised period has been billed - always false if PREPAID.
  """
  unbilled: Boolean!
}

type LineSpendHistoryPeriodBreakdownDetail {
  breakdownType: LineSpendHistoryBreakdownType!

  """
  An identifier that can be supplied to the Line Spend History Detail API
  endpoint to retrieve product-level spend details for this specific period. If
  this product-level breakdown is not available downstream then this identifier will be null.
  """
  periodBreakdownId: String

  """
  The period spend for this breakdown, it will have 2 d.p.
  """
  periodSpend: Float!
}

type LineSpendHistoryResponse {
  accountType: BalanceManagement!

  """
  The average period spend, it will have 2 d.p.
  """
  averagePeriodSpend: Float!

  """
  The ISO8601 date-time representing the end of the spend history summary response.
  """
  endDateTime: String!

  """
  A flag to indicate whether the spend values (charges, discounts, credits, etc) are exclusive of GST.
  """
  gstInclusive: Boolean!

  """
  Identifies the type of summary returned. Current supported value is MONTHLY
  """
  interval: LineHistoryInterval!

  """
  The ISO8601 date-time representing the start of the spend history summary response.
  """
  startDateTime: String!

  """
  An array of the summarised periods covered in this historical spend query
  sorted chronologically based on the object's startDateTime attribute value.
  If no periods are covered then an empty array should be returned.
  """
  summarisedPeriods: [LineSpendHistorySummarisedPeriodSpend!]!
}

type LineSpendHistorySummarisedPeriodSpend {
  """
  The ISO8601 date-time representing the end of the spend history summary response.
  """
  endDateTime: String!

  """
  An array of objects representing a breakdown of the high-level product types
  that contributed to the overall spend attributed to this line for the period.
  If this breakdown-level information is not available downstream then the array will be empty.
  """
  periodBreakdown: [LineSpendHistoryPeriodBreakdownDetail!]!

  """
  The spend to the line for this period, it will have 2 d.p.
  """
  periodSpend: Float!

  """
  The ISO8601 date-time representing the start of the spend history summary response.
  """
  startDateTime: String!

  """
  Whether this summarised period has been billed - always false if PREPAID.
  """
  unbilled: Boolean!
}

type LineSubscription {
  """
  The Siebel account number of which the Subscription product is associated with.
  """
  accountNumber: String!

  """
  The date-time the asset was initially active in Siebel.
  """
  assetStartDate: String!

  """
  Auto renew status of the asset from Siebel
  """
  autoRenew: LineSubscriptionAutoRenew
  bundleOffer: LineSubscriptionBundleOffer

  """
  The Call To Actions (CTAs) available for the given Subscription.
  """
  ctas: [SubscriptionCta!]

  """
  The Siebel line number of which the Subscription product is associated to.
  """
  lineNumber: String!

  """
  The lock TTL (in seconds) for the correlating PROCESSING status.
  """
  lockTtl: Int

  """
  The date-time when the subscription will be next renewed based on the renewal date root product.
  """
  nextRenewalDate: String
  offer: LineSubscriptionOffer!

  """
  The status of the subscription
  """
  status: SubscriptionStatus!

  """
  The date-time when the subscription will end if the subscription is cancelled
  based on the renewal date of the bundle offer.
  """
  subscriptionEndDate: String

  """
  The username used by the customer to activate the subscription (from the third party partner).
  """
  username: String
}

type LineSubscriptionActivation {
  """
  The activation url to activate the product at partner site.
  """
  activationUrl: String!

  """
  The lock duration TTL (Time to Live) in seconds of the subscription type for the given product instance id if configured
  """
  lockTtl: Int
}

enum LineSubscriptionAutoRenew {
  GR
  OFF
  ON
}

type LineSubscriptionBundleOffer {
  """
  The BlueMarble unique identifier of the bundle.
  """
  bundleOfferId: String!

  """
  The BlueMarble offer name of the bundle.
  """
  name: String

  """
  The Siebel product instance id of the bundle.
  """
  productInstanceId: String!
}

enum LineSubscriptionCta {
  ACTIVATE
  ACTIVATE_RETRY
  CANCEL
  CHANGE_PAYMENT_METHOD
  EDIT_PARTNER_ACCOUNT
  REACTIVATE
  RESUME
  SWITCH
}

type LineSubscriptionOffer {
  """
  The BlueMarble offer name of the subscription component.
  """
  name: String!

  """
  The BlueMarble unique identifier of the subscription component.
  """
  offerId: String!

  """
  The Siebel product instance id of the offer.
  """
  productInstanceId: String!
}

type LineSubscriptions {
  """
  The Siebel account number of which the Subscription product is associated with.
  """
  accountNumber: String!

  """
  The date-time the asset was initially active in Siebel.
  """
  assetStartDate: String!
  bundleOffer: LineSubscriptionsBundleOffer

  """
  The Siebel line number of which the Subscription product is associated to.
  """
  lineNumber: String!
  offer: LineSubscriptionsOffer!

  """
  The status of the subscription
  """
  status: LineSubscriptionsStatus!
}

type LineSubscriptionsBundleOffer {
  """
  The BlueMarble unique identifier of the bundle.
  """
  bundleOfferId: String!

  """
  The BlueMarble offer name of the bundle.
  """
  name: String

  """
  The Siebel product instance id of the bundle.
  """
  productInstanceId: String!
}

type LineSubscriptionsOffer {
  """
  The BlueMarble offer name of the subscription component.
  """
  name: String!

  """
  The BlueMarble unique identifier of the subscription component.
  """
  offerId: String!

  """
  The Siebel product instance id of the offer.
  """
  productInstanceId: String!
}

type LineSubscriptionsStatus {
  """
  The label of the subscription.
  """
  label: String

  """
  The status of the subscription.
  """
  type: LineSubscriptionStatus!
}

enum LineSubscriptionStatus {
  ACTIVE
  CANCELLED
  NOT_ACTIVE
  PROCESSING_ACTIVATION
  PROCESSING_ORDER_ADD
  PROCESSING_ORDER_AUTORENEW_CANCEL
  PROCESSING_ORDER_AUTORENEW_RESUME
  PROCESSING_ORDER_CHANGEPAYMENTMETHOD
  PROCESSING_ORDER_CHANGEPLAN
  TERMINATED
}

type LineSummary {
  """
  The account number associated with the line.
  """
  accountNumber: String!

  """
  How the customer chooses to pay for the line
  """
  balanceManagement: BalanceManagement!

  """
  The line number.
  """
  lineNumber: String!

  """
  Offer ID of the primary product associated with the line number.
  """
  offerId: String!

  """
  The name of the primary product associated with the line number
  """
  offerName: String!

  """
  The identifier of the package associated with the line
  """
  packageId: String

  """
  Offer ID of the primary product associated with the line number.
  """
  parentLine: String

  """
  The type of plan associated with the line.
  """
  planType: String

  """
  The array of secondary line numbers strings if the line is a leader within a
  group. If no secondary lines are associated with this line then an empty array is returned.
  """
  secondaryLineNumbers: [String!]!

  """
  The status of the asset associated with the line.
  """
  status: String!

  """
  This is identifier for the line
  """
  type: LineType
}

"""
The type of service the usage is for
"""
enum LineType {
  BROADBAND
  MOBILE_POSTPAID
  MOBILE_PREPAID
  UNKNOWN
}

type LineUsage {
  """
  The billing status for the plan or extra.
  """
  billingStatus: LineUsageBillingStatus

  """
  The maximum for the type of usage; for this, a value of UNLIMITED represents an uncapped usage allowance
  """
  cap: LineUsageCap

  """
  The type of usage represented by this object
  """
  category: LineUsageCategory!

  """
  Details related to when the pack or plan expires
  """
  expiry: [LineUsageExpiry!]

  """
  The name of the pack or extra this usage instance relates to
  """
  name: String

  """
  The date this usage rolls over (renews)
  """
  nextRenewalDate: String

  """
  Indicates the order in which allowances are used.
  """
  priority: Int

  """
  The Siebel product instance id of the product this usage relates to.
  """
  productId: String

  """
  The name of the product which the usage relates to.
  """
  productName: String

  """
  the current amount remaining.  If there is an UNLIMITED cap, the value will be UNLIMITED
  """
  remaining: LineUsageCap

  """
  If the product that contains this usage auto-renews, contains how it auto renews.
  """
  renewal: LineUsageRenewal

  """
  whether this usage was roaming or local
  """
  roaming: Boolean

  """
  Rollover accumulated data.
  """
  rolloverData: LineUsageExpiry

  """
  Details related to when the pack or plan expires
  """
  rolloverExpiry: [LineUsageExpiry!]

  """
  The type of usage
  """
  types: [String!]!

  """
  Uncapped means the usage is Unlimited
  """
  uncapped: Boolean!

  """
  the current amount used.  If there is an UNLIMITED cap, the value will be UNLIMITED.
  """
  used: LineUsageUsed!
}

enum LineUsageBillingStatus {
  ACTIVE
  GRACE
  PENDING_FIRST_USE
  PENDING_GR
  PENDING_PAYMENT
  STOPPED
}

type LineUsageCap {
  """
  the units the value represents
  """
  unit: LineUsageCapUnit!

  """
  the amount
  """
  value: Float!
}

enum LineUsageCapUnit {
  GB
  MB
  MIN
  TEXT
}

enum LineUsageCategory {
  DATA
  TALK
  TEXT
}

type LineUsageExpiry {
  """
  The date when the plan or pack expires
  """
  date: String!

  """
  The amount used by this sharer (optional; only returned for sharer lines).
  """
  unit: LineUsageCapUnit

  """
  The amount of usage which is going to expire
  """
  value: Float
}

type LineUsageHistory {
  """
  The type of account associated with this usage summary.
  """
  accountType: BalanceManagement!

  """
  The group average for the type of usage covered by this response
  """
  averageGroupPeriodUsage: LineUsageHistoryPeriodUsage

  """
  The average for the type of usage covered by this response
  """
  averagePeriodUsage: LineUsageHistoryPeriodUsage!

  """
  The end of the usage history summary
  """
  endDateTime: String!

  """
  The unit of time that the usage data is aggregated by
  """
  interval: LineHistoryInterval!

  """
  Indicates whether this plan is currently shared
  """
  sharerType: LineUsageHistorySharerType!

  """
  The start of the usage history summary
  """
  startDateTime: String!

  """
  Summarised periods covered in this historical usage query sorted chronologically based on startDateTime
  """
  summarisedPeriods: [LineUsageHistorySummaryPeriod!]!
}

type LineUsageHistoryDetail {
  """
  The type of breakdown associated with this usage history.
  """
  breakdownType: LineUsageHistoryPeriodBreakdownType!

  """
  An array of the products that contributed to this usage over the nominated
  period. If no products are identified for the period then an empty array will be returned.
  """
  contributingProducts: [LineUsageHistoryDetailContributingProducts!]!

  """
  The end of the usage history history
  """
  endDateTime: String!

  """
  The unit of time that the usage data is aggregated by
  """
  interval: LineHistoryInterval!

  """
  The group usage covered during this period
  """
  periodGroupUsage: LineUsageHistoryDetailPeriodUsage

  """
  The usage covered during this period
  """
  periodUsage: LineUsageHistoryDetailPeriodUsage!

  """
  The start of the usage history history
  """
  startDateTime: String!
  unbilled: Boolean
}

type LineUsageHistoryDetailContributingProducts {
  """
  The date of acquisition for this specific product
  """
  acquisitionDate: String!

  """
  The offerId for this specific product
  """
  offerId: String
  periodGroupLimit: LineUsageHistoryDetailPeriodLimit
  periodGroupRemaining: LineUsageHistoryDetailPeriodRemaining
  periodGroupUsage: LineUsageHistoryDetailPeriodUsage
  periodLimit: LineUsageHistoryDetailPeriodLimit
  periodRemaining: LineUsageHistoryDetailPeriodRemaining
  periodUsage: LineUsageHistoryDetailPeriodUsage!

  """
  The name for this specific product
  """
  productName: String!
}

type LineUsageHistoryDetailPeriodLimit {
  """
  the units of the value
  """
  unit: LineUsageHistoryPeriodUsageUnit!

  """
  The limit during this period; this should be rounded to have no more than two decimal places
  """
  value: Float!
}

type LineUsageHistoryDetailPeriodRemaining {
  """
  the units of the value
  """
  unit: LineUsageHistoryPeriodUsageUnit!

  """
  What's remaining during this period; this should be rounded to have no more than two decimal places
  """
  value: Float!
}

type LineUsageHistoryDetailPeriodUsage {
  """
  the units of the value
  """
  unit: LineUsageHistoryPeriodUsageUnit!

  """
  The usage during this period; this should be rounded to have no more than two decimal places
  """
  value: Float!
}

type LineUsageHistoryPeriodBreakdown {
  breakdownType: LineUsageHistoryPeriodBreakdownType!

  """
  The breakdown ID
  """
  periodBreakdownId: String
  periodGroupLimit: LineUsageHistoryPeriodLimit
  periodGroupRemaining: LineUsageHistoryPeriodRemaining
  periodGroupUsage: LineUsageHistoryPeriodUsage
  periodLimit: LineUsageHistoryPeriodLimit
  periodRemaining: LineUsageHistoryPeriodRemaining
  periodUsage: LineUsageHistoryPeriodUsage!
}

enum LineUsageHistoryPeriodBreakdownType {
  ADDITIONAL_INCLUDED
  ADDITIONAL_PAID
  PLAN
}

type LineUsageHistoryPeriodLimit {
  """
  The units of the value
  """
  unit: LineUsageHistoryPeriodUsageUnit!

  """
  The limit / cap during this period; this should be rounded to have no more than two decimal places
  """
  value: Float!
}

type LineUsageHistoryPeriodRemaining {
  """
  The units of the value
  """
  unit: LineUsageHistoryPeriodUsageUnit!

  """
  The amount remaining during this period; this should be rounded to have no more than two decimal places
  """
  value: Float!
}

type LineUsageHistoryPeriodUsage {
  """
  the units of the value
  """
  unit: LineUsageHistoryPeriodUsageUnit!

  """
  The usage during this period; this should be rounded to have no more than two decimal places
  """
  value: Float!
}

enum LineUsageHistoryPeriodUsageUnit {
  GB
  MB
  MIN
  TEXT
}

enum LineUsageHistorySharerType {
  LEADER
  NOT_SHARED
  SHARER
}

type LineUsageHistorySummaryPeriod {
  """
  The end of this specific time period
  """
  endDateTime: String!
  periodBreakdown: [LineUsageHistoryPeriodBreakdown!]
  periodGroupUsage: LineUsageHistoryPeriodUsage
  periodUsage: LineUsageHistoryPeriodUsage!

  """
  The start of this specific time period
  """
  startDateTime: String!
  unbilled: Boolean
}

enum LineUsageHistoryUsageType {
  DATA
  SMS
  VOICE
}

enum LineUsageMessageStatus {
  IMPORTANT
  WARNING
}

enum LineUsageRenewal {
  AutoTopup
  GuaranteedRenewal
}

type LineUsageSummary {
  displayName: String
  groupProfile: String
  lineNumber: String!
  messagePrimary: String
  messageSecondary: String
  messageStatus: LineUsageMessageStatus
  messageTertiary: String
  productIcon: ProductIconType
  topUpBuyExtra: TopUpBuyExtraType
}

type LineUsageTransactions {
  """
  The transactions associated with this line sorted in reverse chronological order (i.e. newest first).
  """
  transactions: [UsageTransactions!]!
}

type LineUsageUsed {
  """
  The amount used by this sharer (optional; only returned for sharer lines).
  """
  bySharer: Float

  """
  the units the value represents
  """
  unit: LineUsageCapUnit!

  """
  the amount
  """
  value: Float!
}

"""
Location Service
"""
type Location {
  address: AddressResponse!
  outages(
    outageType: PointsOfInterestOutageType
    serviceAffected: ServicesAffectedByOutageType!
  ): [PointsOfInterestOutage!]!
  pointsOfInterest(
    location: String
    serviceType: PointOfInterestServiceType!
  ): [PointsOfInterestResponse!]!
}

"""
Multi factor authentication
"""
enum mfaOption {
  email
  none
}

"""
Verifies if a number is a Spark mobile by checking whether it's prepaid or postpaid
"""
type MobileType {
  """
  Whether the number entered is a valid Spark mobile number or not
  """
  isValidMobile: Boolean!
}

"""
object to hold fields for monthly payment setup
"""
type MonthlyPaymentSetup {
  """
  Direct debit/Bank account details
  """
  accountDetails: AccountDetails

  """
  Credit card details
  """
  creditCard: CreditCard

  """
  Description of the monthly payment setup type
  """
  description: String

  """
  Monthly payment setup status
  """
  status: String

  """
  Monthly payment setup type
  """
  type: MonthlyPaymentSetupType

  """
  Upcoming payment details
  """
  upcomingPayment: UpcomingPayment
}

"""
Monthly payment setup type
"""
enum MonthlyPaymentSetupType {
  CC
  DD
  RCC
}

"""
Bundle related information for slected multi product
"""
type MpdPromotionsBundle {
  id: String!
  items: [MpdPromotionsBundleItem!]!
}

"""
Bundle Item related information for slected multi product
"""
type MpdPromotionsBundleItem {
  id: String!
  price: [MpdPromotionsPrice!]!
  productOfferingId: String!
}

"""
Price related information for selected multi product
"""
type MpdPromotionsPrice {
  basePrice: Float!
  discount: Discount
  effectivePrice: Float!
}

type MpdPromotionsResponse {
  bundles: [MpdPromotionsBundle!]!
  price: [MpdPromotionsPrice!]!
}

type Mutation {
  """
  Create a new content provider for a given customer
  """
  a2pAddContentProvider(
    input: A2PAddContentProviderRequest!
  ): A2PAddContentProviderResponse!

  """
  Submit request for shortcode to be created
  """
  a2pAddServiceRequest(
    input: A2PAddServiceRequestRequest!
  ): A2PAddServiceRequestResponse!

  """
  Delete a content provider for a given customer
  """
  a2pDeleteContentProvider(
    input: A2PDeleteContentProviderRequest!
  ): A2PStatusResponse!

  """
  Modify a content provider for a given customer
  """
  a2pModifyContentProvider(
    input: A2PModifyContentProviderRequest!
  ): A2PStatusResponse!

  """
  Modify a shortcode
  """
  a2pModifyShortcode(
    input: A2PModifyShortcodeRequest!
  ): A2PModifyShortcodeResponse!

  """
  Creates account access for a Spark identity
  """
  addAccountAccess(input: AddAccountAccessInput!): AddAccountAccessResponse!

  """
  Add account to cart
  """
  addAccountToCart(input: AddAccountToCartInput!): AddAccountToCartResponse!
    @deprecated(reason: "use updateCartAccount instead")

  """
  Adds airpoints number to account
  """
  addAirpoints(input: AddAirpointsInput!): AirpointsUpdateResponse!

  """
  adds a new bank account to a users digital wallet.
  """
  addBankAccountToWallet(
    input: BankAccountDetailInput!
  ): AddWalletPaymentMethodResponse!

  """
  Add items to new bundle
  """
  addBundles(input: AddBundlesInput!): AddBundleOperationResponse!

  """
  Create a new Connection Promise record associated with the nominated line number.
  """
  addConnectionPromiseLine(
    input: AddConnectionPromiseLineInput!
  ): AddConnectionPromiseLineResponse!

  """
  adds a new credit card to a users digital wallet
  """
  addCreditCardToWallet(
    input: CardDetailInput!
  ): AddWalletPaymentMethodResponse!

  """
  Add items to existing bundle
  """
  addItemsToBundle(input: AddItemsToBundleInput!): AddItemsToBundleResponse!

  """
  Creates line access for a Spark identity
  """
  addLineAccess(input: AddLineAccessInput!): AddLineAccessResponse!

  """
  Deletes airpoints number for an account
  """
  deleteAirpoints(input: DeleteAirpointsInput!): AirpointsDeleteResponse!

  """
  Delete Auto Topup.
  """
  deleteAutoTopup(input: DeleteAutoTopupInput!): DeleteAutoTopupResponse!
  deleteBundle(input: DeleteCartBundleInput!): DeleteBundleResponse!

  """
  Delete an existing Connection Promise record associated with the nominated line number.
  """
  deleteConnectionPromiseLine(
    input: DeleteConnectionPromiseLineInput!
  ): DeleteConnectionPromiseLineResponse!

  """
  Add items to existing bundle
  """
  deleteItemFromBundle(
    input: DeleteItemFromBundleInput!
  ): DeleteItemFromBundleResponse!

  """
  Readies the Cart for the checkout process before loading the checkout pages
  """
  initiateCheckout(input: InitiateCheckoutInput!): InitiateCheckoutResponse!

  """
  Pay a specific bill or balance via POLi pay.
  """
  initiatePOLi(input: PoliPayBillInput!): PoliPayBillResponse!

  """
  Pay a specific bill or balance via POLi pay.
  """
  initiateTopPOLi(input: TopupPoliPayBillInput!): PoliPayBillResponse!

  """
  Performs bill payment for the given account number using a registered credit card.
  """
  processCCPaymentWithRegisteredCard(
    input: CreditCardBillPaymentRequestInput!
  ): CreditCardBillPaymentResponse!

  """
  Performs bill payment for the given account number using a new credit card with registration.
  """
  processNewCardBillPaymentWithRegistration(
    input: NewCardBillPaymentWithRegistrationInput!
  ): NewCardBillPaymentResponse!

  """
  Performs one-off bill payment for the given account number using a new credit card.
  """
  processNewCardOneoffBillPayment(
    creditCardInput: CardDetailInput
    input: NewCardOneoffBillPaymentInput!
    isNewCreditCard: Boolean!
    shouldSaveCard: Boolean
  ): NewCardBillPaymentResponse!

  """
  Performs a topup on a line number using a voucher
  """
  processVoucherPayment(input: VoucherPaymentInput!): VoucherTopupResponse!

  """
  DeRegister a card or bank for automatic bill payment.
  """
  removeExistingMonthlyPayment(
    input: DeleteAutoPayBillInput!
  ): DeleteAutoPayBillResponse!

  """
  Removes a preference channel for a given user.
  """
  removeUserPreferenceChannel(
    input: DeleteUserPreferenceChannelInput!
  ): DeleteUserPreferenceChannelResponse!

  """
  Revoke account or line acceess
  """
  revokeAccess(input: RevokeAccessInput!): RevokeAccessResponse!

  """
  Initiate a series of downstream diagnostic checks for a line
  """
  runBroadbandDiagnostics(
    input: RunBroadbandDiagnosticsInput!
  ): BroadbandDiagnosticsResultsResponse!

  """
  Saves the field values of a Checkout step
  """
  saveCheckoutStep(input: SaveCheckoutStepInput!): SaveCheckoutStepResponse!

  """
  Sets up automatic topups for a line
  """
  setPrepaidAutoTopup(
    creditCardInput: CardDetailInput
    input: AutoTopupInput!
    isNewCreditCard: Boolean!
  ): AutoTopupResponse!

  """
  Performs topup for the given prepay line number using provided credit card
  which could be from wallet or registered against the line or new.
  """
  submitCCtopupPayment(
    creditCardInput: CardDetailInput
    input: CreditCardTopupInput!
    isNewCreditCard: Boolean!
    lineNumber: String!
    shouldSaveCard: Boolean
  ): CreditCardTopupResponse!
  submitOrder(input: SubmitOrderInput!): SubmitOrderResponse!
    @deprecated(reason: "Legacy mutation, currently only for Retail")
  submitOrderSS(input: SubmitOrderSSInput!): SubmitOrderSSResponse!
  submitRecommendation(
    input: SubmitRecommendationInput!
  ): SubmitRecommendationResponse!

  """
  Update the account associated with a cart
  """
  updateCartAccount(
    accountNumber: String!
    cartId: String!
    channel: CartChannel!
  ): Cart!

  """
  Update the cart's user and returns with a CartView
  """
  updateCartUser(cartId: ID!, segment: Segment!): CartView!

  """
  Update an existing Connection Promise record associated with the nominated line number.
  """
  updateConnectionPromiseLine(
    input: UpdateConnectionPromiseLineInput!
  ): UpdateConnectionPromiseLineResponse!

  """
  changes profile name  to account
  """
  updateName(input: UpdateNameInput!): UpdateNameResponse!

  """
  Updates an existing channel preference if its exists, otherwise it will create a new channel preference.
  """
  updatePreferenceChannel(
    input: UpdatePreferenceChannelInput!
  ): UpdatePreferenceChannelResponse!
  updateSmartCap(input: UpdateSmartCapInput!): UpdateSmartCapResponse!
}

"""
object to hold new card bill payment response
"""
type NewCardBillPaymentResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
input object having fields for new card bill payment with registration.
"""
input NewCardBillPaymentWithRegistrationInput {
  """
  The account number for which the bill needs to be paid.
  """
  accountNumber: String!

  """
  The amount to be paid from the credit card.
  """
  amount: Float!

  """
  The type of payment.
  """
  amountType: AmountType!

  """
  the secure transaction token required to pay the amount without persisting any card details.
  """
  secureTransactionToken: String!

  """
  Indicates if the given card has to be setup as autopay or not.
  """
  setupAutoPay: Boolean!
}

input NewCardInput {
  cardholderName: String
  shouldSaveCard: Boolean!
  token: String!
}

"""
input object having fields for new card one-off bill payment.
"""
input NewCardOneoffBillPaymentInput {
  """
  The account number for which the bill needs to be paid.
  """
  accountNumber: String!

  """
  The amount to be paid from the credit card.
  """
  amount: Float!

  """
  The type of payment.
  """
  amountType: AmountType!

  """
  Indicates if the given card has to be setup as autopay or not.
  """
  setupAutoPay: Boolean!
}

"""
object to hold fields for next bill details
"""
type NextBill {
  """
  Next bill date
  """
  billDate: String
}

"""
Superclass for other objects
"""
interface Node {
  """
  GUID for a resource
  """
  id: ID!
}

"""
Topic for user preference
"""
type NotificationPreference implements Node {
  """
  Mediums /channels the preference is sent over
  """
  channels: [PreferenceChannel!]!

  """
  The uuid of the preference
  """
  entityID: String!

  """
  GUID for a resource
  """
  id: ID!

  """
  This is identifier for the line
  """
  line: String
}

type Notifications {
  recommendationId: String!
  text: String!
  title: String
  type: NotificationType!
}

"""
Notification type
"""
enum NotificationType {
  ERROR
  INFO
  SUCCESS
  WARN
}

"""
Category related information
"""
type OfferDetailCategory {
  categoryId: String
  id: String!
}

input OneTimeCardInput {
  amount: Float!
  token: String!
}

type OperatingHours {
  """
  The local time that the location is closes for operation on the nominated day
  """
  close: String

  """
  Day of the week
  """
  day: String!

  """
  The local time that the location is opens for operation on the nominated day
  """
  open: String
}

type OperationTypeCtaDetails {
  """
  CTA code
  """
  code: CtaCode

  """
  CTA label
  """
  label: String!
}

type OrderFeasibility {
  feasibilityReason: FeasibilityReason!
  orderFeasible: Boolean!
}

"""
Origin of registration
"""
enum Origin {
  Apple
  Facebook
  Google
  MYSB
  MySpark
}

enum OutageStatus {
  CURRENT
  FIXED
  RESOLVED
}

"""
Represents the option that needs to be selected for this field to be shown
"""
type Parent {
  key: String!
  name: String!
  value: String!
}

type PaymentAmount {
  """
  Amount value
  """
  amount: Float

  """
  Credit/Debit marker
  """
  crDr: CreditDebitMarker
}

"""
object containing fields for payment methods.
"""
type PaymentMethod {
  """
  array holding all associations if any.
  """
  associations: [PaymentMethodAssociation!]

  """
  bank account information.
  """
  bankAccountDetail: BankAccountDetail

  """
  credit card details.
  """
  cardDetail: CardDetail

  """
  true indicates that the payment method is chosen as the default method of payment.
  """
  isPreferred: Boolean!

  """
  the unique identifier of this payment method.
  """
  paymentMethodId: String!

  """
  A customised name given by the user for the payment method.
  """
  personalisedName: String

  """
  Indicates the source of the payment method association.
  """
  source: PaymentMethodSource

  """
  Indicates if the payment method is a card or bank account.
  """
  type: PaymentMethodType!
}

"""
the access type of the association.
"""
enum PaymentMethodAccessType {
  ACCOUNT
  LINE
}

"""
object holding fields for association
"""
type PaymentMethodAssociation {
  """
  the access type of the association.
  """
  accessType: PaymentMethodAccessType!

  """
  the spark post pay account number if the association is on the account.
  """
  accountNumber: String

  """
  the spark line number if the association is on the line.
  """
  lineNumber: String

  """
  the unique identifier of the associated payment method.
  """
  paymentMethodId: String!

  """
  the type of association, as of now we support only one type.
  """
  type: PaymentMethodAssociationType!
}

"""
the type of association, as of now we support only one type.
"""
enum PaymentMethodAssociationType {
  RECURRING
}

"""
the name of the banks.
"""
enum PaymentMethodBankType {
  ANZ_Bank
  ASB_Bank
  Bank_of_New_Zealand
  Citibank_N_A
  HSBC_Bank_NZ
  Industrial_and_Commercial_Bank_of_China_Limited_NZ
  Kiwibank
  TSB_Bank
  Unknown
  Westpac
}

"""
indicates the card vendor
"""
enum PaymentMethodCardType {
  amex
  diners
  mastercard
  Unknown
  visa
}

"""
Indicates the source of the payment method association.
"""
enum PaymentMethodSource {
  DIRECT
  WALLET_OTHER
  WALLET_SELF
}

"""
Indicates if the payment method is a card or bank account.
"""
enum PaymentMethodType {
  BANK
  CREDIT
}

"""
enums for successful and unsuccessful transactions
"""
enum PaymentStatusType {
  APPLIED
  FAILED
}

"""
Offer detail related information
"""
type PlanOfferDetail {
  category: [OfferDetailCategory!]
  description: String
  entitlements: [Entitlement!]
  id: String!
  images: [Image!]
  name: String!
  price: Price
  productCharacteristics: ProductCharacteristic
  promotions: [Promotion!]
}

type PlanProductOffers {
  """
  Array of notifications to be presented to frontend.
  """
  notifications: [Notifications!]

  """
  Returns eligible subscription offers from BlueMarble for a given line.
  """
  offerDetails: [BaseOfferDetail!]!
}

type PlansMpdComparisonBundle {
  id: String!
  items: [PlansMpdComparisonItem!]!
  lineNumber: String
}

type PlansMpdComparisonDiscount {
  appliedValue: Float
  discountType: String
}

type PlansMpdComparisonExistingPlan {
  currentPrice: PlansMpdComparisonPrice!
  name: String!
  productOfferingId: String!
  updatedPrice: PlansMpdComparisonPrice!
}

type PlansMpdComparisonItem {
  action: String!
  name: String!
  price: PlansMpdComparisonPrice
  productOfferingId: String!
}

type PlansMpdComparisonPrice {
  basePrice: Float!
  discount: PlansMpdComparisonDiscount
  effectivePrice: Float!
  period: String!
  priceType: String!
}

type PlansMpdComparisonResponse {
  bundles: [PlansMpdComparisonBundle!]
  cartId: String!
  discountChanged: Boolean!
  existingPlans: [PlansMpdComparisonExistingPlan!]
}

type PointOfInterestContact {
  """
  The name of the contact
  """
  name: String

  """
  The role the contact holds
  """
  role: String
}

enum PointOfInterestDayOfWeek {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Wednesday
}

type PointOfInterestOperatingHours {
  """
  The local time that the location is closes for operation on the nominated day
  """
  close: String

  """
  The day of the week
  """
  day: PointOfInterestDayOfWeek!

  """
  The local time that the location is opens for operation on the nominated day
  """
  open: String
}

enum PointOfInterestServiceType {
  BUSINESS
  STORE
  WIFI
}

type PointsOfInterestOutage {
  """
  The category of the outage.
  """
  category: String!

  """
  Description of the outage.
  """
  description: String

  """
  The display name of the outage
  """
  displayName: String!

  """
  The end time of when the outage was resolved.
  """
  endDateTime: String

  """
  Used to geolocate the exact outage location in maps, will be negative due to NZ geo location
  """
  latitude: Float!

  """
  Used to geolocate the outage location in maps , will be positive due to NZ geo location.
  """
  longitude: Float!

  """
  The type of the outage.
  """
  outageType: PointsOfInterestOutageType!

  """
  The description of the service affected.
  """
  serviceAffected: ServicesAffectedByOutageType!

  """
  The start time of the outage, this may be the time logged.
  """
  startDateTime: String

  """
  The status of the outage describing.
  """
  status: OutageStatus
}

enum PointsOfInterestOutageType {
  MAINTENANCE
  OUTAGE
}

type PointsOfInterestResponse {
  """
  The first line of the address associated with the location, normally a street or building number
  """
  addressLine1: String

  """
  The second line of the address associated with the location, normally a street or building number
  """
  addressLine2: String

  """
  The city where the location resides within
  """
  city: String

  """
  n optional array of contact names and their roles associated with this point
  of interest, for example the manager of the Spark Business Hub.
  """
  contacts: [PointOfInterestContact!]

  """
  Customer-friendly directions for getting to the location if available
  """
  directions: String

  """
  The name of the location
  """
  displayName: String!

  """
  An optional value representing the distance in metre from the point of
  interest to the optionally supplied location in the query URI.
  """
  distanceFromLocation: Float

  """
  Primary email address
  """
  emailAddress: String

  """
  A flag that indicates if the point of inter has been featured by the curators
  """
  featured: Boolean!

  """
  An image of the point of interest
  """
  image: String

  """
  If the location provides mobile recycling services
  """
  isRecyclingOffered: Boolean!

  """
  If the location provides consumer store services.
  """
  isStore: Boolean!

  """
  If the location provides a public WiFi access point
  """
  isWifiAvailable: Boolean!

  """
  The geographic latitude of the location
  """
  latitude: Float!

  """
  The geographic longitude of the location
  """
  longitude: Float!

  """
  Location operating hours
  """
  operatingHours: [PointOfInterestOperatingHours!]

  """
  Primary contact phone number
  """
  phoneNumber: String

  """
  The suburb where the location resides within
  """
  suburb: String
}

"""
input object to hold fields for poli pay bill.
"""
input PoliPayBillInput {
  """
  The account number for which the bill has to be paid.
  """
  accountNumber: String!

  """
  The amount to be paid in NZD.
  """
  amount: Float

  """
  Indicates the payBill amount type.
  """
  amountType: AmountType!
}

"""
object containing fields for poliPayBill response.
"""
type PoliPayBillResponse implements GenericMutationResponse {
  code: Int!
  message: String!

  """
  rest of the poliPayBill response.
  """
  poliPayResponse: RestOfPoliPayBillResponse
  success: Boolean!
}

"""
Possible medium that relate to the preference.
"""
type PreferenceChannel implements Node {
  """
  The uuid of the medium
  """
  entityID: String!

  """
  GUID for a resource
  """
  id: ID!

  """
  Whether the channel is opted in.
  """
  isActive: Boolean
  status: String
  type: ChannelType

  """
  The medium value when applicable.  Not all medium types need a value.
  """
  value: String
}

"""
Topic for user preference
"""
type PreferenceTopic {
  """
  A description for the topic from the notification preference centre
  """
  description: String

  """
  The uuid of the topic
  """
  entityID: String!

  """
  This specifics the group of topics which should be retrieved.
  """
  group: String!

  """
  The name of the topic (or sub-topic)
  """
  name: String!

  """
  Subtopics for topic
  """
  subtopics: [PreferenceTopic!]
}

"""
object to hold prepaid balance details
"""
type PrepaidBalance {
  """
  account current balance
  """
  balance: Float!

  """
  balance Expiry date
  """
  balanceExpiryDate: String

  """
  detail message
  """
  detailMessage: BalanceInformationMessage

  """
  Last topup amount
  """
  lastTopUpAmount: Float

  """
  Last topup date
  """
  lastTopUpDate: String

  """
  Line number
  """
  lineNumber: String!

  """
  Retrieval date
  """
  retrievalDate: String

  """
  Contains messages to be shown in summary page
  """
  summaryMessage: BalanceInformationMessage
}

"""
Information on pricing
"""
type Price {
  basePrice: Float
  basePriceExcludingTax: Float
  description: String
  effectivePrice: Float
  effectivePriceExcludingTax: Float
  frequency: PriceFrequency
  length: Int
  priceType: String!
  taxPercentage: String
}

"""
Information on price frequency
"""
type PriceFrequency {
  period: FrequencyPeriod!
  value: Int!
}

type PrimaryCategory {
  id: String!
  name: String!
}

"""
The process context used for orchestration and creation of the downstream service order
"""
enum ProcessContext {
  AddVAS
  ChangeOffer
  ManageVAS
  MobileMigrate
  ModifyOffer
  NewOffer
}

"""
Indicates price type
"""
enum ProductBalanaceManagementType {
  POSTPAID
  PREPAID
}

"""
Information on product characteristics
"""
type ProductCharacteristic {
  addedInCart: Boolean
  balanceManagement: ProductBalanaceManagementType
  basePlanOfferId: String
  entitledEntity: EntitledEntityType
  isDeferrable: Boolean
  isFeatured: Boolean
  isIncluded: Boolean
  isShippable: Boolean
  partnerId: String
  soldSeparately: Boolean
}

"""
Input for productCharacteristics
"""
input ProductCharacteristicsInput {
  autoRenew: AddBundleAutoRenew
  systemAction: AddBundleSystemAction
}

"""
A collection of plan details to be displayed via card
"""
type ProductDetailsPlan {
  contractTerm: ContractTerm
  ctaOverrides: [CtaOverrideDetail!]
  entitlements: [Entitlement!]
  group: Group
  planCategories: [OfferDetailCategory!]
  planDetails: ProductDetailsPlanDetail!
  planImages: [Image!]
  price: ProductDetailsPlanPrice!
  productCharacteristics: ProductCharacteristic
  productSpecification: [ProductSpecification!]
  promotions: [Promotion!]
}

"""
Information on plan features
"""
type ProductDetailsPlanDetail {
  """
  Array of destructured category.id strings, used to identify the product ex. endless_plan, primary_mobile_plan, mobile_neon
  """
  categoryIdentifiers: [String!]
  contentKey: String
  description: String
  externalId: String
  planId: String!
  planName: String!
  productType: String
}

"""
Information on plan price
"""
type ProductDetailsPlanPrice {
  basePrice: Float
  basePriceExcludingTax: Float
  discountDiscription: String
  discountPrice: String
  priceFrequency: Float
  pricePeriod: String
  priceType: String!
}

type ProductDetailsResponse {
  code: Int!
  description: String
  id: String!
  isCategoryContainer: Boolean!
  message: String!
  name: String!
  plans: [ProductDetailsPlan!]!
  subCategories: [ProductDetailsSubCategory!]
  success: Boolean!
}

"""
Information on plan subcategories
"""
type ProductDetailsSubCategory {
  defaultSelected: Boolean
  id: String!
  name: String!
  sortOrder: Int
  subCategories: [ProductDetailsSubCategory!]
  visibility: Boolean
}

"""
Information on product features
"""
type ProductFeature {
  band: String
  brand: String
  color: String
  colorHex: String
  primaryColor: String
  storage: String
}

enum ProductIconType {
  BROADBAND
  MOBILE
  MOBILE_INFINITY
  WEARABLE
}

type ProductOfferDetailsResponse {
  """
  Returns eligible subscription offers from BlueMarble for a given line.
  """
  offerDetails: [BaseOfferDetail!]!
}

"""
Cart images from Product Offers
"""
type ProductOfferImage {
  offerId: String!
  url: String
}

"""
Information on display specs, camera specs etc
"""
type ProductSpecification {
  name: String!
  sortOrder: Int
  values: [ProductSpecificationValue!]!
}

type ProductSpecificationGroup {
  group: String!
  specifications: [ProductVariantSpecification!]!
}

"""
Product specification detail object, indicates specific group value and sort order
"""
interface ProductSpecificationValue {
  group: String
  sortOrder: Int
  value: String!
}

"""
Indicates type of promotion
"""
enum ProductType {
  CHARACTERISTIC
  DEAL
  FEATURE
  MARKETING
}

type ProductVariantAssociatedPriceRule {
  """
  The actual price of the product
  """
  basePrice: Float
  basePriceExcludingTax: Float
  description: String!

  """
  The price of the product in case a rule changes the base price. note: this
  effectivePrice field will only show under a associatedPriceRuleOffer object.
  """
  effectivePrice: Float
  effectivePriceExcludingTax: Float

  """
  Indicates the frequency of the price payment, e.g. Month, corresponding desl field: price.frequency.period
  """
  priceFrequencyPeriod: String

  """
  Value of the frequency period, e.g. 1, indicates 1 Month if
  priceFrequencyPeriod is Month, corresponding desl field: price.frequency.value
  """
  priceFrequencyValue: Int

  """
  The application duration of this price. only required if the price is
  applicable to a certain duration. like in ifp pricePoint’s
  applicationDuration. e.g 12
  """
  priceLength: Int
  pricePointID: String!

  """
  Indication of a price type of the product, example : Recurring, OneOff
  """
  priceType: String!

  """
  Indication of a price rule type of the product, example : IFP, REGULAR
  """
  ruleType: String!

  """
  list of OfferDetail Object, associated price rule
  """
  sources: [ProductVariantOfferDetail!]!
}

type ProductVariantAssociatedPrices {
  basePrice: Float
  basePriceExcludingTax: Float
  effectivePrice: Float
  effectivePriceExcludingTax: Float
  priceFrequencyPeriod: String
  priceFrequencyValue: Int
  priceLength: Int
  priceType: String!
}

"""
Offer detail objects of hardware product with payment product as associated price rules.
"""
type ProductVariantOfferDetail {
  associatedPriceRules: [ProductVariantAssociatedPriceRule!]
  associatedPrices: [ProductVariantAssociatedPrices!]

  """
  The actual price of the product
  """
  basePrice: Float
  basePriceExcludingTax: Float
  brand: String
  color: String
  colorHex: String

  """
  Description of a product/offer
  """
  description: String!

  """
  The price of the product in case a rule changes the base price. note: this
  effectivePrice field will only show under a associatedPriceRuleOffer object.
  """
  effectivePrice: Float
  effectivePriceExcludingTax: Float
  entitlements: [Entitlement!]
  externalId: String

  """
  Description of a product/offer group
  """
  groupDescription: String

  """
  An unique id of a product/offer group
  """
  groupId: String

  """
  Name of a product/offer group
  """
  groupName: String

  """
  An unique id of a product/offer
  """
  id: String!
  images: [Image!]

  """
  Identify if the offer is the default offer in an offer group
  """
  isDefault: Boolean
  isDeferrable: Boolean
  isEligibilityCheckRequired: Boolean
  isShippable: Boolean

  """
  Product/offer name
  """
  name: String!

  """
  Indicates the frequency of the price payment, e.g. Month, corresponding desl field: price.frequency.period
  """
  priceFrequencyPeriod: String

  """
  Value of the frequency period, e.g. 1, indicates 1 Month if
  priceFrequencyPeriod is Month, corresponding desl field: price.frequency.value
  """
  priceFrequencyValue: Int

  """
  The application duration of this price. only required if the price is
  applicable to a certain duration. like in ifp pricePoint’s
  applicationDuration. e.g 12
  """
  priceLength: Int

  """
  Indication of a price type of the product, example : Recurring, OneOff
  """
  priceType: String
  primaryCategory: PrimaryCategory
  productSpecificationGroups: [ProductSpecificationGroup!]
  promotions: [Promotion!]
  soldSeparately: Boolean
  stock: Stock
  storage: String
}

"""
Input for getting a list of product variants.
"""
input ProductVariantsInput {
  groupId: String
  offerId: String
}

type ProductVariantSpecification implements ProductSpecificationValue {
  group: String
  name: String!
  sortOrder: Int
  value: String!
}

"""
An Object with group details of the given group ID and a list of variants of the product offer details.
"""
type ProductVariantsResponse {
  """
  List of product/offer details object
  """
  offerDetails: [ProductVariantOfferDetail!]!
}

"""
Profile info of the user
"""
type ProfileInfo {
  """
  Company or business name for business users
  """
  businessName: String

  """
  Customer Service Representative - T-Number for Impersonate mode
  """
  csrTNumber: String

  """
  Users's display name
  """
  displayName: String!

  """
  User's email address
  """
  email: String!

  """
  User's first name
  """
  firstName: String

  """
  User account verification status
  """
  isVerified: Boolean!

  """
  The Unix Epoch Date when the user logged in last time
  """
  lastLogin: String!

  """
  User's last name
  """
  lastName: String

  """
  The type of the App user used to sign in
  """
  loginOption: String!

  """
  Users mfa selection
  """
  mfaOption: mfaOption!

  """
  Origin of registration
  """
  origin: Origin!

  """
  Spark SSC ID
  """
  sparkID: String!
}

"""
Information on marketing promotions
"""
type Promotion {
  contentKey: String
  iconUrl: String
  longDescription: String
  name: String!
  productType: ProductType!
  shortDescription: String
  sortOrder: Int
}

type Query {
  a2p(
    """
    Customer number
    """
    customerNumber: String
  ): A2POrganisationDetails!
  accountBalance(accountNumber: String!): AccountBalance!
  accountSummary(accountNumber: String!): AccountSummary!

  """
  Airpoints for account
  """
  airpoints(accountNumber: String!): AirpointsResponse!

  """
  Gets the logged in status of a user
  """
  authenticatedInfo: AuthenticatedInfoResponse!

  """
  Gets initial batch of available numbers
  """
  availableNumbers(
    lineNumber: String
    reservationId: String
  ): AvailableNumbersResponse!
  biometricProgress(
    cartId: String!
    channel: CartChannel!
  ): BiometricProgressResponse!

  """
  Get list of cart items in a bundle in your cart
  """
  cart(cartId: String, channel: CartChannel!): Cart!

  """
  Get list of cart items in a bundle in your cart
  """
  cartView(cartId: String!, channel: CartChannel!): CartView!

  """
  Gets the saved checkout form state
  """
  checkoutData(input: CheckoutDataInput!): CheckoutDataResponse!

  """
  Gets the full Checkout structure
  """
  checkoutStructure(
    cartId: String!
    channel: CartChannel!
  ): CheckoutStructureQueryResponse!
  clickAndCollectStores(
    location: String
    serviceType: StoreListServiceType!
  ): StoreList!
  contentAsset(
    filters: String!
    format: String!
    tags: String!
    type: String!
  ): ContentAssets!

  """
  Gets the content details from AEM by journey ID
  """
  contentJourneyDetails(
    journeyStepId: String!
    variation: String
  ): [ContentJourneyDetails!]!

  """
  Gets the list of products for the product gallery page
  """
  deviceGallery(
    channel: CartChannel!
    subcategoryId: String
  ): GalleryProductResponse!
  displaySurcharge(input: DisplaySurchargeInput!): DisplaySurchargeResponse!

  """
  An list of existing mpd lines
  """
  existingMpdLines(
    cartId: String!
    channel: CartChannel!
  ): [CartExistingMpdLine!]!

  """
  Extras
  """
  extras(lineNumber: String!): ExtrasResponse!

  """
  Gets content for footer navigation menu
  """
  footerContent(
    id: String!
    site: String
    variation: String
  ): FooterContentResponse!

  """
  Gets content for header navigation menu
  """
  headerContent(id: String!, site: String, variation: String): HeaderContent!
  lineDetails(lineNumber: String!): LineDetails!
  location: Location!

  """
  This object provides details of user lever profile details
  """
  marketingProfile: UserProfile!
  me: User!
  mobileType(lineNumber: String!): MobileType!

  """
  Gets the list of discounts related to the currently selected multi products
  """
  mpdPromotions(offerIds: [String!]!): MpdPromotionsResponse!

  """
  Allows to refetch any node by its ID
  """
  node(
    """
    ID of the node
    """
    id: ID!
  ): Node

  """
  Determines the MPD changes between two plans within a cart, as part of a self service change plan/pack scenario.
  """
  plansMpdComparison(
    cartId: String!
    channel: CartChannel!
  ): PlansMpdComparisonResponse!

  """
  Gets the list of products (plans) and their details to be displayed
  """
  productDetails(
    categoryId: String!
    channel: String!
    recursiveSearch: Boolean
  ): ProductDetailsResponse!

  """
  Retrieves product offer details from Blue Marble based on offerIds or externalId.
  """
  productOfferDetails(
    externalIds: [String!]
    includePriceRules: Boolean
    offerIds: [String!]
  ): ProductOfferDetailsResponse!

  """
  This query gets back a list of offer detail variants of a given product group
  (e.g. iPhone 13 pro) by providing the group id. Related DESL API : GET
  /v1/products/group/{groupId}/variants
  """
  productVariantsByGroupId(
    input: ProductVariantsInput!
  ): ProductVariantsResponse!

  """
  Related Device Addons
  """
  relatedAddons(
    bundleId: String!
    cartId: String!
    channel: CartChannel!
    itemIds: [String!]!
  ): RelatedAddonsResponse!

  """
  Fetching a list of eligible/related ifp products of the given products in cart(simulated/real cart)
  """
  relatedIfp(input: RelatedProductInput!): [IfpOfferDetail!]!

  """
  Related Plans
  """
  relatedPlans(input: CompatibleProductsInput!): RelatedPlansResponse!
  resource(resourceId: String!): Resource!

  """
  Roaming rates
  """
  roamingRates(
    accountType: BalanceManagement
    destinationIso3: [String!]!
  ): RoamingRatesResponse!
  serviceProvider(lineNumber: String!): ServiceProvider

  """
  Retrieves the compatible grouped subscriptions products for the logged in user (includes all accounts and lines).
  """
  subscriptionOffers(groupId: String): [SubscriptionOffer!]!

  """
  Retrieves the Subscription changes between two plans within a cart, as part of a self service change plan/pack scenario.
  """
  subscriptionsComparison(
    bundleId: String!
    cartId: String!
    channel: CartChannel!
  ): SubscriptionsComparisonWithOfferDetailsResponse!
  troubleshooter(
    diagnosticCode: String!
    lineNumber: String!
    modemModel: String
  ): BroadbandTroubleshooterResultsResponse!

  """
  Get all upfront payment details to show on Shop's Credit Check / Upfront payment page
  """
  upfrontPayment(
    cartId: String!
    channel: CartChannel!
  ): UpfrontPaymentResponse!
}

"""
Rate related information
"""
type Rate {
  accountType: BalanceManagement!
  data: String!
  dataOverage: String!
  moc: String!
  mtc: String!
  text: String!
}

input Recommendation {
  action: RecommendationAction!
  recommendationId: String!
}

enum RecommendationAction {
  CANCEL
  INFORM
  KEEP
}

"""
Bundle related information
"""
type RelatedAddonsResponse {
  addonAction: AddonAction!
  addonsCart: Cart
  addonsProducts: AddonsProducts
}

type RelatedPlansResponse {
  bundles: [RelatedPlansResponseBundle!]!
}

"""
Bundle related information
"""
type RelatedPlansResponseBundle {
  id: String!
  offerDetails: [PlanOfferDetail!]!
}

input RelatedProductBundleInput {
  id: String!
  items: [RelatedProductBundleItemInput!]!
}

input RelatedProductBundleItemInput {
  id: String!
}

"""
Query inputs to be passed into DESL POST request body.
"""
input RelatedProductInput {
  bundles: [RelatedProductBundleInput!]!
  cartId: String
}

"""
Information relating to resources
"""
type Resource {
  """
  An object that contains all account information
  """
  account: AccountResource

  """
  Indicates if the resource provided has been identified or not
  """
  isNumberIdentified: Boolean!

  """
  An object that contains all line information
  """
  line: LineResource
}

"""
object having fields for rest of the add wallet payment method response
"""
type RestOfAddWalletPaymentMethodResponse {
  """
  true indicates that this payment method already exists.
  """
  isDuplicate: Boolean

  """
  the unique identifier of this payment method.
  """
  paymentMethodId: String!

  """
  Indicates the source of the payment method association.
  """
  source: PaymentMethodSource
}

"""
object containing fields for rest of the poliPayBill response.
"""
type RestOfPoliPayBillResponse {
  """
  the polipay page to redirect to.
  """
  redirectUrl: String!

  """
  the token given by polipay to identify the transaction.
  """
  token: String!
}

"""
Input for revoking access
"""
input RevokeAccessInput {
  """
  uuid from the account or line access query, depending on which user this edit access was selected for
  """
  entityID: String!

  """
  account or line number depending on the component user edit was selected from
  """
  number: String!

  """
  ACCOUNT or LINE depending on the component user edit was selected from
  """
  type: RevokeAccessType!
}

"""
Response from the revoke access mutation
"""
type RevokeAccessResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

enum RevokeAccessType {
  Account
  Line
}

input RoamingRatesInput {
  accountType: BalanceManagement
  destinationIso3: [String!]!
}

"""
Rates roaming information
"""
type RoamingRatesResponse {
  destinations: [Destinations!]!
}

"""
Indicates type of rule
"""
enum RuleType {
  IFP
  REGULAR
}

"""
Detail object of run broadband diagnostics input data
"""
input RunBroadbandDiagnosticsInput {
  """
  The line number on which to run the broadband diagnostics
  """
  serviceGuidingId: String!
}

input SaveCheckoutStepFieldInput {
  name: String!
  value: String!
}

"""
Input for saving the field values of a Checkout step
"""
input SaveCheckoutStepInput {
  bundleId: String
  cartId: String!
  channel: CartChannel!
  itemId: String
  options: [SaveCheckoutStepOptionInput!]!
  rootFields: [SaveCheckoutStepFieldInput!]!

  """
  Identifies which section to save to
  """
  sectionId: String!

  """
  Identifies which step to save to
  """
  stepId: String!
}

input SaveCheckoutStepOptionInput {
  fields: [SaveCheckoutStepFieldInput!]!
  name: String!
  parentOption: SaveCheckoutStepFieldInput
  value: String!
}

type SaveCheckoutStepResponse implements GenericMutationResponse {
  cart(cartId: String!, channel: CartChannel!): Cart!
  checkoutData(cartId: String!, channel: CartChannel!): CheckoutDataResponse!
  checkoutStructure(
    cartId: String!
    channel: CartChannel!
  ): CheckoutStructureQueryResponse!
  code: Int!
  message: String!
  success: Boolean!
}

input SavedPaymentMethodInput {
  amount: Float!
  paymentMethodId: String!
}

enum Segment {
  business
  personal
}

enum SegmentType {
  BUSINESS
  CONSUMER
}

"""
The service provider of a specific phone number e.g. 2 Degrees or Vodafone
"""
type ServiceProvider {
  name: String!
  serviceProviderId: String!
}

enum ServicesAffectedByOutageType {
  INTERNET
  LANDLINE
  MOBILE
  OTHERS
}

"""
The type of smart cap being applied.
"""
enum SmartCapType {
  LOCAL
  ROAMING
  SHARER_LIMIT
}

"""
The units of the value.
"""
enum SmartCapUnit {
  DOLLAR
  GB
  MB
}

enum StatusType {
  IN_STOCK
  OUT_OF_STOCK
}

"""
Information on product stock
"""
type Stock {
  status: StatusType!
  storeStatus: StatusType!
  warehouseStatus: StatusType!
}

type Store {
  """
  Street Address of the store
  """
  address: String

  """
  unique identifier of the store
  """
  id: String!

  """
  Flag to confirm if product is in stock
  """
  inStock: Boolean!

  """
  Name of the store
  """
  name: String!
  operatingHours: [OperatingHours!]

  """
  Phone number of the store
  """
  phoneNumber: String

  """
  URL for the image of the store
  """
  storeImage: String
}

type StoreList {
  """
  List of nearby store to allow Click and Collect
  """
  storeList: [Store!]
}

enum StoreListServiceType {
  BUSINESS
  STORE
  WIFI
}

enum StyleType {
  PRIMARY
  SECONDARY
}

type Subcategory {
  categoryId: String!
  defaultSelected: String
  name: String!
  sortOrder: Int
  visibility: Boolean
}

input SubmitOrderInput {
  accountBalance: accountBalance
  cardToSave: CardToSaveInput

  """
  Cart ID for which the order has to be submitted
  """
  cartId: String!
  channel: CartChannel!
  hasRegisterPaymentMethodOnly: Boolean
  lineNumber: String
  oneTimeCard: OneTimeCardInput
  savedPaymentMethod: SavedPaymentMethodInput
}

"""
Submit Order Response
"""
type SubmitOrderResponse implements GenericMutationResponse {
  code: Int!
  confirmationEmailId: String
  message: String!
  orderNumber: String
  success: Boolean!
}

input SubmitOrderSSInput {
  account: Boolean
  amount: Float!
  cancel: Boolean

  """
  Cart ID for which the order has to be submitted
  """
  cartId: String!
  channel: CartChannel!
  existingCard: ExistingCardInput
  isSplitPayment: Boolean
  lineNumber: String
  newCard: NewCardInput
  prepaidBalance: Boolean
  voucher: Boolean
}

"""
Submit Order Response
"""
type SubmitOrderSSResponse implements GenericMutationResponse {
  code: Int!
  confirmationEmailId: String
  message: String!
  orderNumber: String
  success: Boolean!
}

input SubmitRecommendationInput {
  bundleId: String!
  cartId: String!
  channel: CartChannel!
  recommendations: [Recommendation!]!
}

type SubmitRecommendationResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

enum SubscriptionComparisonCTAType {
  CANCEL
  INFORM
  KEEP
}

type SubscriptionComparisonOffer {
  brand: String
  iconUrl: String
  isIncluded: Boolean
  offerId: String!
  offerName: String!
  price: SubscriptionsComparisonOfferPrice
}

type SubscriptionCta {
  """
  The Cta label.
  """
  label: String!

  """
  The Cta type.
  """
  type: LineSubscriptionCta!

  """
  The web link if opening external tab or webview of the Cta.
  """
  webLink: String
}

"""
subscription details.
"""
type SubscriptionOffer {
  """
  The accounts that the product offer is eligible for.
  """
  accountNumbers: [String!]

  """
  The Call to Action displayed to user.
  """
  ctas: [SubscriptionOfferCta!]

  """
  The lines that the product offer is eligible for.
  """
  lineNumbers: [String!]

  """
  The title of subscription.
  """
  name: String!

  """
  List of OfferDetail objects
  """
  offerDetails: [BaseOfferDetail!]!
}

"""
The available call to actions.
"""
type SubscriptionOfferCta {
  ctaType: SubscriptionOfferCtaType!

  """
  The formatted label of the Call to Action.
  """
  label: String!
}

enum SubscriptionOfferCtaType {
  ADD
}

type SubscriptionProductOffers {
  """
  Array of notifications to be presented to frontend.
  """
  notifications: [Notifications!]

  """
  Returns eligible subscription offers from BlueMarble for a given line.
  """
  offerDetails: [BaseOfferDetail!]!
}

type SubscriptionsComparisonCtas {
  type: SubscriptionComparisonCTAType!
}

type SubscriptionsComparisonOfferPrice {
  basePrice: Float
  description: String
  frequencyPeriod: FrequencyPeriod
}

type SubscriptionsComparisons {
  available: SubscriptionComparisonOffer
  ctas: [SubscriptionsComparisonCtas!]
  recommendationId: String!
  unavailable: SubscriptionComparisonOffer
}

type SubscriptionsComparisonWithOfferDetailsResponse {
  comparisons: [SubscriptionsComparisons!]!
}

type SubscriptionStatus {
  """
  The label of the subscription.
  """
  label: String

  """
  The status of the subscription.
  """
  type: LineSubscriptionStatus!
}

"""
Pricing Summary for the cart
"""
type Summary {
  billingFrequency: BillingFrequency
  discount: Float
  frequencyPeriod: FrequencyPeriod
  frequencyType: FrequencyType!
  frequencyValue: Int
  gst: Float!
  subtotal: Float!
  taxExclusiveDiscount: Float
  taxExclusiveSubtotal: Float!
  taxExclusiveTotal: Float!
  total: Float!
}

enum TopUpBuyExtraType {
  BUYEXTRA
  TOPUP
}

"""
Object to hold fields for card details associated with the topup setting
"""
type TopupCardDetails {
  """
  Last four digits of the card
  """
  lastFourDigits: String!
}

"""
input object to hold fields for top up poli pay bill.
"""
input TopupPoliPayBillInput {
  """
  The amount to be paid in NZD.
  """
  amount: Float

  """
  The account number for which the bill has to be paid.
  """
  lineNumber: String!
}

"""
Topup settings associated with the line
"""
type TopupSettings {
  """
  Card details associated with the topup setting
  """
  cardDetails: TopupCardDetails!

  """
  Maximum monthly topup limit for low balance payment preference
  """
  monthlyTopupLimit: Float

  """
  Upcoming payment date of the RT and RT28 payment preference
  """
  nextPaymentDate: String

  """
  Threshlold amount to trigger low balance auto topup payment preference
  """
  thresholdAmount: Float

  """
  Topup amount of the topup setting
  """
  topupAmount: Float!
}

"""
The source of the payment/card
"""
enum TopupSource {
  DIRECT
  NEW_CARD
  WALLET_SELF
}

"""
object contatining transactions List details
"""
type Transaction {
  """
  The users prepay current balance in NZD
  """
  currentBalance: Float!

  """
  Description of the transaction, e.g. the type of activity or product purchase.
  """
  description: String!

  """
  Indicates if the transaction is a debit, e.g. charge, or credit (payment).
  Note adjustments could potentially be either a debit or credit depending on
  the type applied.
  """
  isDebit: Boolean!

  """
  The start date-time used in the query placed to the downstream SingleView datasource
  """
  startDateTime: String!

  """
  A customer-friendly term for the type of transaction
  """
  type: String!

  """
  The value of the transaction in NZD
  """
  value: Float!
}

"""
Transaction types
"""
enum TransactionType {
  Charged
  Credit
  Failed
  Late_Fee
  Payment
  Surcharge
}

"""
object to hold fields for upcoming payment details
"""
type UpcomingPayment {
  """
  Upcoming payment amount
  """
  paymentAmount: PaymentAmount

  """
  Future dated payment date
  """
  paymentDate: String

  """
  Payment frequency
  """
  paymentFrequency: String

  """
  Payment method id
  """
  paymentMethodId: String
}

"""
Object containing input fields for updating connection promise line
"""
input UpdateConnectionPromiseLineInput {
  """
  The unique identifier for the Connection Promise record
  """
  connectionPromiseId: String!

  """
  The Spark mobile number to be associated with this Connection Promise.
  """
  lineNumber: String!

  """
  A flag to indicate if the Spark mobile line is considered a primary or secondary alternative connection.
  """
  primaryLine: Boolean!
}

"""
Object having fields for update connection promise results response
"""
type UpdateConnectionPromiseLineResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for changing profile name on an account
"""
input UpdateNameInput {
  """
  First name taken from the Spark Identity of the current user.
  """
  firstName: String!

  """
  Last name taken from the Spark Identity of the current user.
  """
  lastName: String!
}

type UpdateNameResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"""
Input for adding a user preference channel
"""
input UpdatePreferenceChannelInput {
  """
  The address of the channel type. The value of the address varies based on the
  address type. For in_app and push channels, no value is required.
  """
  address: String

  """
  Creating some channels email / sms requires authcode.
  """
  authCode: String
  channelId: String

  """
  The channel for the notification channel
  """
  channelType: ChannelType
  isOptedIn: Boolean
  preferenceId: String
  status: String
}

type UpdatePreferenceChannelResponse implements GenericMutationResponse {
  channelPreference: PreferenceChannel
  code: Int!
  message: String!
  success: Boolean!
}

input UpdateSmartCapInput {
  cap: DataCap
  isUncapped: Boolean

  """
  The line number to which smart cap is requested.
  """
  lineNumber: String!

  """
  The type of smart cap being applied.
  """
  type: SmartCapType
}

"""
List of Messages
"""
type UpdateSmartCapResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

type UpfrontPaymentItem {
  description: String!
  imagePath: String!
  itemId: String!
  price: Float!
  title: String!
}

"""
A representation of the required upfront payments that should be shown on the Shop Credit Check / Upfront Payment page.
"""
type UpfrontPaymentResponse {
  items: [UpfrontPaymentItem!]!
  monthlyIfpAmount: Float!
  requiredUpfrontAmount: Float!
}

type UsageTransactions {
  """
  The line balance prior to this transaction in NZD
  """
  currentBalance: Float!

  """
  Description of the transaction, e.g. the type of activity or product purchase
  """
  description: String!

  """
  The end of this transaction.  In the case of a payment or adjustment the
  endDateTime will be equal to the startDateTime as those are instantaneous events
  """
  endDateTime: String!

  """
  Indicates if the transaction is a debit, e.g. charge, or credit (payment).
  Note adjustments could potentially be either a debit or credit depending on
  the type applied.
  """
  isDebit: Boolean!

  """
  The line balance prior to this transaction in NZD
  """
  previousBalance: Float!

  """
  The start of this transaction
  """
  startDateTime: String!

  """
  The type of transaction
  """
  transactionType: UsageTransactionType!

  """
  A customer-friendly term for the type of transaction
  """
  type: String!

  """
  The value of the transaction in NZD
  """
  value: Float!
}

enum UsageTransactionType {
  ADJUSTMENT
  CHARGE
  PAYMENT
}

"""
Logged in users information
"""
type User {
  """
  Accounts the user has access to. DESL API: https://sparknz.atlassian.net/wiki/spaces/DC/pages/921829386/Get+My+Access+API+Design
  """
  accessibleAccounts(status: AccountAccessStatus): [AccountAccessInformation!]!

  """
  Retrieves the account monetary balance details for a account from Siebel.
  """
  accountBalance(accountNumber: String!): AccountBalance!

  """
  Returns a simple list of all accounts accessible by a Spark Identity. DESL API: https://sparknz.atlassian.net/wiki/spaces/DC/pages/9734029601/GET+Account+List+API+Design
  """
  accountList: [AccountList!]!

  """
  Accounts the user has access to. DESL API: https://sparknz.atlassian.net/wiki/spaces/DC/pages/921829386/Get+My+Access+API+Design
  """
  accounts(status: AccountAccessStatus): [AccountAccessInformation!]!
    @deprecated(
      reason: "This query will be delete Use accessibleAccounts instead"
    )
  accountTransactions(
    accountNumber: String!
    endDate: String
    startDate: String
  ): AccountTransactionsDetails!
  billSummary(
    accountNumber: String!
    endDate: String
    startDate: String
  ): BillSummary!

  """
  The connection promise API return the connection promise configuration for the nominated line number
  """
  connectionPromise(lineNumber: String!): ConnectionPromiseLinesResponse!

  """
  List of eligibleLine objects
  """
  eligibleLines(
    accountNumber: String
    channel: CartChannel!
    offerId: String!
  ): [EligibleLine!]!
  line(lineNumber: String!): Line!

  """
  Lines the user has access to
  """
  lines(accessLevel: LineAccessLevelType): [Line!]

  """
  Gets summary of all lines associated with SparkID
  """
  lineSummaries(lineTypes: [LineType!]): [LineSummary!]!

  """
  Users preferences for a requested topic
  """
  notificationPreference(topic: String!): [NotificationPreference]!

  """
  Wallet payment methods for credit card and bank account
  """
  paymentMethods(
    associatedLineNumber: String
    sources: [WalletPaymentMethodSource!]
  ): [PaymentMethod!]!

  """
  Topics which are eligible/available for users to set preference
  """
  preferenceTopics(group: String): [PreferenceTopic!]!

  """
  Retrieves the prepaid balance details for a linenumber.
  """
  prepaidBalance(lineNumber: String!): PrepaidBalance!

  """
  Logged in users claims/ profile information
  """
  profile: ProfileInfo!

  """
  Query all the eligble subscriptions for the current user.
  """
  subscriptions: [LineSubscriptions!]!

  """
  Transactions for line number
  """
  transactionList(
    endDate: String
    lineNumber: String!
    paymentStatus: PaymentStatusType
    size: Int
    startDate: String
  ): [Transaction!]!
  usageSummary: [LineUsageSummary!]
}

"""
Profile object for marketing user object
"""
type UserProfile {
  """
  This object provides extensibility to the profile object
  """
  attributes: UserProfileAttribute!

  """
  This object provides details of profile information for user
  """
  profileInfo: UserProfileInfo!

  """
  This object provides details of social login for user
  """
  social: UserProfileSocial
}

"""
Profile attribute
"""
type UserProfileAttribute {
  """
  This object provides details of product and account user has account level access to
  """
  access: UserProfileAttributeAccess

  """
  Identifies users according to their authentication status
  """
  authState: String

  """
  This object provides line level details of product user is interacting with
  """
  line: UserProfileAttributeLine

  """
  The type of login user used to sign in (.e.g.Spark, Facebook, Googleor Apple)
  """
  loginOption: String

  """
  Identifies users according to the type of service used to authenticate
  """
  multiFactorAuthType: String

  """
  This object provides details of products users have access to regardless of access type
  """
  product: UserProfileAttributeProduct

  """
  Identifies if user has selected remember me when loging in
  """
  rememberMe: Boolean

  """
  This object provides details of product and account user has account level access to
  """
  sparkCRM: CRMAttributes
}

"""
This object provides details of product and account user has account level access to
"""
type UserProfileAttributeAccess {
  """
  Total number of access (account or line level access) the user has
  """
  numberOfAccess: String

  """
  Number of account level access excluding prepaid mobile
  """
  numberOfAccount: String

  """
  Number of line level access for postpaid mobile the user has
  """
  numberOfPostpaidMobile: String

  """
  Number of line level access for prepaid mobile the user has
  """
  numberOfPrepaidMobile: String
}

"""
This object provides line level details of product user is interacting with
"""
type UserProfileAttributeLine {
  """
  Provides customer segment detail for line level for product user is interacting with
  """
  customer: UserProfileAttributeLineCustomer

  """
  Provides line level detail for product user is interacting with
  """
  product: UserProfileAttributeLineProduct
}

"""
Provides customer segment detail for line level for product user is interacting with
"""
type UserProfileAttributeLineCustomer {
  """
  Legal category in Spark CRM for product the user is interacting with
  """
  legalCategory: String

  """
  Line of business in Spark CRM for product the user is interacting with
  """
  lineOfBusiness: String

  """
  Customer segment in Spark CRM for product the user is interacting with
  """
  segment: String
}

"""
Provides line level detail for product user is interactingw ith
"""
type UserProfileAttributeLineProduct {
  """
  Plan ID for product the user is interacting with
  """
  servicePlanID: String

  """
  Service Plan name for product the user is interacting with
  """
  servicePlanName: String

  """
  Service Plan type for product the user is interacting with
  """
  servicePlanType: String
}

"""
This object provides details of products users have access to regardless of access type
"""
type UserProfileAttributeProduct {
  """
  Number of broadbands the user has access to regardless of technology (e.g. Fibre, ADSL/VDSLorWireless)
  """
  numberOfBroadband: String

  """
  Number of landlines the user has access to regardless of technology (e.g. CopperorWireless)
  """
  numberOfLandline: String

  """
  Number of postpaid mobiles the user has access to regardless of access type
  (e.g.postpaid mobile as part of account level accessor line level access
  """
  numberOfPostpaidMobile: String

  """
  Number of prepaid mobile the user has access to
  """
  numberOfPrepaidMobile: String

  """
  Total number of products/lines the user has access to
  """
  numberOfProduct: String

  """
  Array of product types user has access to (e.g.MOBILE_POSTPAID_NOTERM,FIBRE_DATA)
  """
  productTypes: String
}

"""
ProfileInfo object belongs to UserProfile object
"""
type UserProfileInfo {
  """
  Unique user id of the authenticated MySpark user
  """
  profileID: String!
}

"""
This object provides details of social login for user
"""
type UserProfileSocial {
  """
  This is not required as part of initial data layer implementation
  """
  apple: String

  """
  Unique Facebook id associated with MySpark user
  """
  facebook: String

  """
  Unique Google id associated with MySpark user
  """
  google: String
}

"""
Object containing input fields required to process a voucher topup
"""
input VoucherPaymentInput {
  """
  The line number for which the topup has to happen
  """
  lineNumber: String!

  """
  The voucher number
  """
  voucherNumber: String!
}

type VoucherResponse {
  """
  The balance available after payment processing
  """
  availableBalance: Float

  """
  The transaction receipt number
  """
  receiptNumber: String

  """
  The amount redeemed from the voucher
  """
  redeemedAmount: Float!

  """
  The reserved balance available after payment processing
  """
  reservedBalance: Float
}

"""
The response object of a voucher topup
"""
type VoucherTopupResponse implements GenericMutationResponse {
  code: Int!
  message: String!
  success: Boolean!
  voucherResponse: VoucherResponse
}

enum WalletPaymentMethodSource {
  DIRECT
  WALLET_OTHER
  WALLET_SELF
}
