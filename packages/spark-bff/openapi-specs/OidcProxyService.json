{
  "swagger": "2.0",
  "info": {
    "description": "OIDC Proxy Service interacting with OpenAM",
    "version": "1.0.0",
    "title": "DESL OIDC Proxy Service API",
    "x-ibm-name": "oidc-proxy-service-api"
  },
  "schemes": ["https"],
  "parameters": {
    "Realm": {
      "in": "header",
      "name": "Realm",
      "description": "Identifies the user realm, failure to provide a value would result in defaulting to SPARK_ID realm.",
      "required": false,
      "type": "string",
      "enum": ["SPARK_ID", "MYSB"],
      "x-example": "MYSB",
      "default": "SPARK_ID"
    }
  },
  "paths": {
    "/v1/user/oidc/accessToken": {
      "post": {
        "tags": ["oidc-controller"],
        "summary": "Request or renew access token endpoint according to RFC 6749",
        "operationId": "accessTokenUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "grant_type",
            "description": "The grant type according to RFC 6749",
            "required": true,
            "type": "string",
            "enum": ["authorization_code", "password", "refresh_token"]
          },
          {
            "in": "formData",
            "name": "auth_code",
            "description": "Authorization code according to RFC 6749",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "username",
            "description": "Resource owner username according to RFC 6749",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "password",
            "description": "Resource owner password according to RFC 6749",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "refresh_token",
            "description": "Refresh token according to RFC 6749",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Base64 encoded client_id and client_secret string according to RFC 6749",
            "required": true,
            "type": "string",
            "pattern": "^(Basic)\\s.*"
          },
          {
            "$ref": "#/parameters/Realm"
          }
        ],
        "responses": {
          "200": {
            "description": "Correct access token and refresh token returned",
            "schema": {
              "$ref": "#/definitions/AccessTokenResponse"
            }
          },
          "400": {
            "description": "Bad Request, internal error code 4200",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "401": {
            "description": "Unauthenticated, internal error code 4100",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error, internal error code 5200",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/social": {
      "post": {
        "tags": ["oidc-controller"],
        "summary": "OIDC social log in endpoint",
        "operationId": "oidcSocialLogin",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "socialToken",
            "description": "Json Web Token (JWT, alg: HS256) generated by Facebook, Google or Apple",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "socialProvider",
            "description": "social token provider",
            "type": "string",
            "required": true,
            "enum": ["FACEBOOK", "GOOGLE", "APPLE"]
          },
          {
            "in": "formData",
            "name": "clientName",
            "description": "The client name registered in OpenAm",
            "type": "string",
            "required": true,
            "enum": ["SparkApp", "SparkWeb"]
          },
          {
            "in": "formData",
            "name": "firstNameApple",
            "description": "The first name of the user which is required by Apple Inc. only",
            "type": "string",
            "required": false,
            "default": ""
          },
          {
            "in": "formData",
            "name": "lastNameApple",
            "description": "The last name of the user which is required by Apple Inc. only",
            "type": "string",
            "required": false,
            "default": ""
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Base64 encoded client_id and client_secret string according to RFC 6749",
            "required": true,
            "type": "string",
            "pattern": "^(Basic)\\s.*"
          }
        ],
        "responses": {
          "200": {
            "description": "Correct access token and refresh token returned",
            "schema": {
              "$ref": "#/definitions/AccessTokenResponse"
            }
          },
          "400": {
            "description": "Bad Request, internal error code 4200",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "401": {
            "description": "Unauthenticated, internal error code 4100",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error, internal error code 5200",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/userInfo": {
      "get": {
        "tags": ["oidc-controller"],
        "summary": "Request user profile info using access token as authentication bearer token",
        "operationId": "userInfoUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Access token in the Authorization header of the request sent to OpenAM",
            "required": true,
            "type": "string",
            "pattern": "^(Bearer)\\s.*"
          },
          {
            "$ref": "#/parameters/Realm"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched user information",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "Bad Request, internal error code 4200",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "401": {
            "description": "Unauthenticated, internal error code 4100",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error, internal error code 5200",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/revoke": {
      "post": {
        "tags": ["oidc-controller"],
        "summary": "Revokes the access token or refresh token with associated access tokens according to RFC 6749",
        "operationId": "revokeToken",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "formData",
            "name": "token",
            "description": "access token or refresh_token to be revoked",
            "type": "string",
            "x-example": "5ab03ced-4e20-490a-9898-d34b575510fa",
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Base64 encoded client_id and client_secret string according to RFC 6749",
            "required": true,
            "type": "string",
            "pattern": "^(Basic)\\s.*"
          },
          {
            "$ref": "#/parameters/Realm"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a success message if the token has been successfully revoked",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/OauthErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/logout": {
      "get": {
        "tags": ["oidc-controller"],
        "summary": "Logs out / ends the  Open AM session associated with the id_token which is issued by OpenAM if one exists",
        "operationId": "logOut",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "idToken",
            "description": "Id Token in JWT, which is issued by OpenAM",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Realm"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logs out the user",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/authorize": {
      "post": {
        "tags": ["oidc-controller"],
        "summary": "Authorizes the use of a user's session id.",
        "operationId": "authorize",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "$ref": "#/parameters/Realm"
          },
          {
            "in": "formData",
            "name": "client_id",
            "description": "client_id - used to identify the client device type to OpenAM",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "response_type",
            "description": "the 'credential' that the authorize should return.  The only supported value currently is 'code'",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "sessionId",
            "description": "A sessionId, returned by /v1/user/oidc/authenticate.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "redirect_uri",
            "description": "Callback location where the authorization code or tokens should be sent",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "prompt",
            "description": "The only currently supported value for this is 'none'.  Causes the server to return a 401 response when the sessionId is invalid",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "scope",
            "description": "openid is required for authentication requests.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "state",
            "description": "A client-supplied value to be returned in the token & response - for csrf mitigation.",
            "required": true,
            "pattern": "^[-A-Za-z0-9.,_]+$",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "nonce",
            "description": "A client-supplied value to be returned in the id_token - for replay attack mitigation.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful authorisation.",
            "schema": {
              "$ref": "#/definitions/AuthorisationResponse"
            }
          },
          "400": {
            "description": "Bad Request: one or more parameters is missing or invalid",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "401": {
            "description": "The session id was invalid",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/authenticate": {
      "post": {
        "tags": ["oidc-controller"],
        "summary": "Validates a customer's credentials to in order to recieve a sessionID which is required to initiate the OIDC authorisation code flow.",
        "operationId": "authenticate",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "$ref": "#/parameters/Realm"
          },
          {
            "in": "formData",
            "name": "username",
            "description": "username of the customer credentials",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "password",
            "description": "password of the customer credentials",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "For either of MFA required or not.",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "401": {
            "description": "Bad credentials presented, most likely",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "403": {
            "description": "I don't know when this will be returned",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/authenticate/mfa/verification": {
      "post": {
        "tags": ["oidc-controller"],
        "summary": "Validates a customer's credentials to in order to recieve a sessionID which is required to initiate the OIDC authorisation code flow.",
        "operationId": "supplyFactor",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "$ref": "#/parameters/Realm"
          },
          {
            "in": "formData",
            "name": "mfaToken",
            "description": "this is the OTP",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "nonce",
            "description": "The nonce provided by /v1/user/oidc/authenticate.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "stage",
            "description": "The stage provided by /v1/user/oidc/authenticate.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "amlb",
            "description": "The value of a cookie used for session stickiness between this service & AM",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The OTP was correctly provided",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "401": {
            "description": "The OTP was incorrect, the nonce is expired, or too many attempts have been made to validate this nonce.",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "403": {
            "description": "I don't know when this will be returned",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    },
    "/v1/user/oidc/authenticate/mfa/renew": {
      "get": {
        "tags": ["oidc-controller"],
        "summary": "Triggers a resend of the OTP to the spark id.",
        "operationId": "resendFactor",
        "produces": ["application/json"],
        "parameters": [
          {
            "$ref": "#/parameters/Realm"
          },
          {
            "in": "query",
            "name": "nonce",
            "description": "The nonce provided by /v1/user/oidc/authenticate.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "stage",
            "description": "The stage provided by /v1/user/oidc/authenticate.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "amlb",
            "description": "The value of a cookie used for session stickiness between this service & AM",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MfaRenewResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "401": {
            "description": "I don't know when this will be returned",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "403": {
            "description": "I don't know when this will be returned",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessTokenResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "required": [
            "access_token",
            "expires_in",
            "id_token",
            "refresh_token",
            "scope",
            "token_type"
          ],
          "properties": {
            "access_token": {
              "description": "Valid access token returned from OpenAm",
              "type": "string"
            },
            "expires_in": {
              "description": "In how many seconds the access token will expire",
              "type": "integer",
              "minimum": 1
            },
            "id_token": {
              "description": "Json web token representing identity information about the user",
              "type": "string"
            },
            "refresh_token": {
              "description": "The token which can be used to regenerate access token",
              "type": "string"
            },
            "scope": {
              "description": "Way to restrict access to specified areas",
              "type": "string"
            },
            "token_type": {
              "description": "The type of the access token, which defines how it is constructed",
              "enum": ["Bearer", "MAC"]
            }
          }
        }
      ]
    },
    "UserInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "required": [
            "sub",
            "sparkID",
            "isVerified",
            "email",
            "loginOption",
            "origin"
          ],
          "properties": {
            "sub": {
              "description": "Similar to sscid, which is a SSC number",
              "type": "string"
            },
            "firstName": {
              "description": "User's first name",
              "type": "string"
            },
            "lastName": {
              "description": "User's last name",
              "type": "string"
            },
            "lastLogin": {
              "description": "The Unix Epoch Date when the user logged in last time",
              "type": "string"
            },
            "isVerified": {
              "description": "User account verification status",
              "type": "boolean"
            },
            "company": {
              "description": "Company or business name for business users",
              "type": "string"
            },
            "origin": {
              "description": "Origin of registration",
              "enum": ["MySpark", "Facebook", "Google", "Apple", "MYSB"]
            },
            "loginOption": {
              "description": "The type of the App user used to sign in",
              "type": "string",
              "example": "Spark"
            },
            "updated_at": {
              "description": "Timestamp when the user info was updated",
              "type": "string"
            },
            "sparkID": {
              "description": "Spark SSC ID",
              "type": "string"
            },
            "email": {
              "description": "User's email address",
              "type": "string"
            },
            "socialFBId": {
              "description": "Social facebook ID linked to sparkID",
              "type": "string"
            },
            "socialGGId": {
              "description": "Social Google ID linked to sparkID",
              "type": "string"
            },
            "socialAppleId": {
              "description": "Social Apple ID linked to sparkID",
              "type": "string"
            },
            "mfaOption": {
              "description": "The type of mfa this user has requested.  null or blank is 'none'; the only other currently-implemented value is 'email'.",
              "type": "string"
            },
            "act": {
              "$ref": "#/definitions/Act"
            }
          }
        }
      ]
    },
    "Act": {
      "type": "object",
      "properties": {
        "sub": {
          "type": "string",
          "description": "Represents t-number when its an impersonation."
        }
      }
    },
    "OauthErrorResponse": {
      "type": "object",
      "required": ["error", "messages"],
      "properties": {
        "error": {
          "enum": [
            "invalid_request",
            "invalid_client",
            "invalid_grant",
            "invalid_token",
            "unauthorized_client",
            "unsupported_grant_type",
            "error_description",
            "error_uri"
          ],
          "description": "Error code elaborated in RFC6749 section 5.2"
        },
        "messages": {
          "type": "array",
          "description": "List of Messages",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "AuthenticationResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "properties": {
            "sessionId": {
              "description": "Used by /authorize to complete the authentication.  Will only be present if either mfa isn't required, or has successfully completed.",
              "type": "string"
            },
            "stage": {
              "description": "Present exactly when sessionId is not present (i.e. mfa is required); MFA type",
              "type": "string"
            },
            "nonce": {
              "description": "Present exactly when sessionId is not present (i.e. mfa is required); nonce for MFA",
              "type": "string"
            },
            "amlb": {
              "description": "The value of a cookie used for session stickiness between this service & AM",
              "type": "string"
            }
          }
        }
      ]
    },
    "MfaRenewResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "required": ["stage", "nonce"],
          "properties": {
            "stage": {
              "description": "MFA type",
              "type": "string"
            },
            "nonce": {
              "description": "nonce for MFA",
              "type": "string"
            }
          }
        }
      ]
    },
    "AuthorisationResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/Response"
        },
        {
          "type": "object",
          "required": ["code", "state", "client_id"],
          "properties": {
            "code": {
              "description": "The returned authorisation code",
              "type": "string"
            },
            "state": {
              "description": "The state provided by the client in the request.",
              "type": "string"
            },
            "client_id": {
              "description": "The requesting client id",
              "type": "string"
            }
          }
        }
      ]
    },
    "Response": {
      "type": "object",
      "required": ["messages"],
      "properties": {
        "messages": {
          "type": "array",
          "description": "List of Messages",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "required": ["message", "code"],
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "integer"
        }
      }
    }
  },
  "x-ibm-configuration": {
    "enforced": true,
    "testable": true,
    "phase": "realized",
    "cors": {
      "enabled": false
    },
    "assembly": {
      "execute": [
        {
          "activity-log": {
            "title": "activity-log",
            "content": "activity",
            "error-content": "payload",
            "version": "1.0.0"
          }
        },
        {
          "set-variable": {
            "title": "set-variable",
            "actions": [
              {
                "set": "message.headers.x-desl-handler",
                "value": "$(deslHeader)"
              },
              {
                "set": "message.headers.x-dasl-transaction-id",
                "value": "$(message.headers.X-Global-Transaction-ID)"
              }
            ],
            "version": "1.0.0"
          }
        },
        {
          "invoke": {
            "title": "invoke",
            "timeout": 60,
            "verb": "keep",
            "cache-response": "protocol",
            "cache-ttl": 900,
            "stop-on-error": [null],
            "version": "1.0.0",
            "target-url": "$(endPoint)$(request.path)$(request.search)"
          }
        }
      ],
      "catch": []
    },
    "properties": {
      "deslHeader": {
        "value": "",
        "description": "",
        "encoded": false
      },
      "endPoint": {
        "value": "",
        "description": "",
        "encoded": false
      }
    },
    "catalogs": {
      "ST2": {
        "properties": {
          "endPoint": "http://iamproxy-st05.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-st2.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "ST3": {
        "properties": {
          "endPoint": "http://iamproxy-st07.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-st3.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "ST4": {
        "properties": {
          "endPoint": "http://iamproxy-st06.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-st4.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "INT01": {
        "properties": {
          "endPoint": "http://iamproxy-int01.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-int01.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "INT02": {
        "properties": {
          "endPoint": "http://iamproxy-int02.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-int02.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "INT03": {
        "properties": {
          "endPoint": "http://iamproxy-int03.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-int03.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "INT04": {
        "properties": {
          "endPoint": "http://iamproxy-int04.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-int04.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "INT05": {
        "properties": {
          "endPoint": "http://iamproxy-int05.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-int05.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "NFT": {
        "properties": {
          "endPoint": "http://iamproxy-nft.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-nft.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "Staging": {
        "properties": {
          "endPoint": "http://iamproxy-stg.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl-stg.npe01.ocp.internal.spark.co.nz/"
        }
      },
      "Production-Internal": {
        "properties": {
          "endPoint": "http://iamproxy.internal.spark.co.nz/",
          "deslHeader": "http://oidc-proxy-service-desl.prod01.ocp.internal.spark.co.nz/"
        }
      }
    }
  },
  "basePath": "/",
  "security": [
    {
      "clientSecret": [],
      "clientId": []
    }
  ],
  "securityDefinitions": {
    "clientSecret": {
      "type": "apiKey",
      "description": "",
      "in": "header",
      "name": "X-IBM-Client-Secret"
    },
    "clientId": {
      "type": "apiKey",
      "description": "",
      "in": "header",
      "name": "X-IBM-Client-Id"
    }
  }
}
