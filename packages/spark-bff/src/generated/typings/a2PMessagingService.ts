/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/services/a2p-messaging/customers/overview': {
    get: operations['get-customers-overview'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/overview': {
    get: operations['get-v1-services-external-a2p-messaging-customers-customerNumber-overview'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/usage': {
    get: operations['get-v1-services-external-a2p-messaging-customers-customerNumber-usage'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/shortcodes': {
    get: operations['get-v1-services-external-a2p-messaging-customers-customerNumber-shortcodes'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/shortcodes/{shortcodeNumber}': {
    get: operations['get-shortcodes-shortcodeNumber'];
    patch: operations['patch-shortcodes-shortcodeNumber'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/content-providers': {
    get: operations['get-v1-services-a2p-messaging-customers-customerNumber-contentProviders-get'];
    post: operations['post-v1-services-a2p-messaging-customers-customerNumber-contentProviders-post'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/content-providers/{contentProviderId}': {
    put: operations['put-contentProviders'];
    delete: operations['delete-contentProviders'];
  };
  '/v1/services/a2p-messaging/shortcodes/overview': {
    get: operations['get-v1-services-a2p-messaging-shortcodes-overview'];
  };
  '/v1/services/a2p-messaging/shortcodes': {
    get: operations['get-v1-services-a2p-messaging-shortcodes'];
  };
  '/v1/services/a2p-messaging/customers/{customerNumber}/service-requests': {
    get: operations['get-customerNumber-service-requests'];
    post: operations['post-customerNumber-service-requests'];
  };
}

export interface definitions {
  CustomerOverviewDatabaseResource: definitions['Response'] & {
    overview: definitions['CustomerOverview'];
  };
  CustomerOverview: {
    /** The length of the date range. */
    length: number;
    interval: definitions['Interval'];
    /** The start datetime. */
    dateTimeStart: string;
    /** The end datetime. */
    dateTimeEnd: string;
    /** The total sms message count. */
    totalSmsCount: number;
    /** The sent sms message count. */
    sentSmsCount: number;
    /** The delivered sms message count. */
    deliveredSmsCount: number;
    /** The failed sms message count. */
    failedSmsCount: number;
  };
  UsageDatabaseResource: definitions['Response'] & {
    usage: definitions['Usage'];
  };
  Usage: {
    /** The length of the date range. */
    length: number;
    interval: definitions['Interval'];
    /** The start datetime. */
    dateTimeStart: string;
    /** The end datetime. */
    dateTimeEnd: string;
    /** List of the series data. */
    series?: definitions['Series'][];
  };
  Series: {
    /** The start datetime. */
    dateTimeStart: string;
    /** The end datetime. */
    dateTimeEnd: string;
    totalSmsCount?: number;
    sentSmsCount?: number;
    deliveredSmsCount?: number;
    failedSmsCount?: number;
  };
  ShortcodesDatabaseResource: definitions['Response'] & {
    /** The list of the shortcodes. */
    shortcodes: definitions['Shortcode'][];
  };
  Shortcode: {
    customerNumber: string;
    customerName: string;
    shortCodeNumber: number;
    status: 'PENDING' | 'ACTIVE' | 'SUSPENDED' | 'INACTIVE';
    type: 'STANDARD' | 'ZERO_RATED';
    ctas: ('VIEW' | 'EDIT' | 'DEACTIVATE')[];
    usage: definitions['Usage'];
  };
  /** The unit of date range. */
  Interval: 'DAYS' | 'MONTHS' | 'YEARS';
  ContentProvidersDatabaseResource: definitions['Response'] & {
    contentProviders: definitions['ContentProvider'][];
  };
  ContentProvider: {
    customerNumber: string;
    customerName: string;
    contentProviderId: number;
    contentProviderName: string;
    helpdeskEmail?: string;
    phoneNumber?: string;
    customerCareUrl?: string;
    ctas: ('EDIT' | 'DELETE')[];
  };
  CustomerAdminOverviewDatabaseResource: definitions['Response'] & {
    overview: definitions['CustomerAdminOverview'];
  };
  CustomerAdminOverview: {
    /** The length of the date range. */
    length: number;
    interval: definitions['Interval'];
    /** The start datetime. */
    dateTimeStart: string;
    /** The end datetime. */
    dateTimeEnd: string;
    /** The total customer count. */
    totalCustomersCount: number;
    /** The total shortcodes count. */
    totalShortcodesCount: number;
    /** The pending shortcodes count. */
    pendingShortcodesCount: number;
    /** The suspended shortcodes count. */
    suspendedShortcodesCount: number;
  };
  ShortcodeOverviewDatabaseResource: definitions['Response'] & {
    overview: definitions['ShortcodeOverview'];
  };
  ShortcodeOverview: {
    /** The length of the date range. */
    length: number;
    interval: definitions['Interval'];
    /** The start datetime. */
    dateTimeStart: string;
    /** The end datetime. */
    dateTimeEnd: string;
    /** The total shortcodes count. */
    totalShortcodesCount: number;
    /** The active shortcodes count. */
    activeShortcodesCount: number;
    /** The pending shortcodes count. */
    pendingShortcodesCount: number;
    /** The suspended shortcodes count. */
    suspendedShortcodesCount: number;
  };
  ShortcodesWithUsagesDatabaseResource: definitions['Response'] & {
    shortcodes: definitions['ShortcodeWithUsage'][];
  };
  ShortcodeWithUsage: {
    customerNumber: string;
    customerName: string;
    shortCodeNumber: number;
    status: 'PENDING' | 'ACTIVE' | 'SUSPENDED' | 'INACTIVE';
    type: 'STANDARD' | 'ZERO_RATED';
    ctas: ('VIEW' | 'EDIT' | 'DEACTIVATE')[];
    totalSmsCount: number;
    sentSmsCount: number;
    deliveredSmsCount: number;
    failedSmsCount: number;
  };
  ContentProviderPostForm: {
    contentProviderName: string;
    helpdeskEmail?: string;
    phoneNumber?: string;
    customerCareUrl?: string;
  };
  ContentProviderIdDatabaseResource: definitions['Response'] & {
    contentProviderId: string;
  };
  ServiceRequestsDatabaseResource: definitions['Response'] & {
    serviceRequests: definitions['ServiceRequest'][];
  };
  ServiceRequest: {
    /** The service request. */
    requestType: 'NEW' | 'EDIT' | 'DEACTIVATE';
    serviceRequestId: string;
    contentProviderId: number;
    assignedShortcodeNumber?: number;
    requestedShortcodeNumber?: number;
    messageType: definitions['MessageType'];
    status: 'OPEN' | 'APPROVED' | 'REJECTED';
    dateTimeCreated: string;
    dateTimeModified: string;
  };
  ServiceRequestPostForm: {
    /** The service request. */
    requestType: 'NEW' | 'EDIT' | 'DEACTIVATE';
    /** Identifier of the Content Provider */
    contentProviderId: number;
    /** Requested short code number, on fulfilment of order this may not necessarily be what the customer gets. */
    requestedNumber?: number;
    messageType: definitions['MessageType'];
    /** The message usage. */
    messageUsage: 'MARKETING' | 'TRANSACTIONAL';
    /** Service end datetime. */
    serviceEndDateTime: string;
    /** The carrier of content provider. */
    carriers: ('SPARK' | 'TWODEGREES' | 'VODAFONE')[];
    /** The service name. */
    serviceName: string;
    /** The service description. */
    serviceDescription: string;
    /** The mobile terminating message example. */
    mobileTerminatingMessageExample: string;
    /** The mobile originating message example. */
    mobileOriginatingMessageExample: string;
    /** The service marketing channels. */
    serviceMarketingChannels: ('PRINT' | 'ONLINE' | 'RADIO')[];
    /** The expected message volume. */
    expectedMessageVolume: 'LOW' | 'MEDIUM' | 'HIGH';
    /** The expected message volume description. */
    expectedMessageVolumeDescription: string;
    /** The predicted peak time description. */
    predictedPeakTimeDescription: string;
    /** The first name. */
    firstName: string;
    /** The last name. */
    lastName: string;
    /** The job title. */
    jobTitle: string;
    /** The job title. */
    serviceComplianceDescription: string;
    /** The signature. */
    signature: string;
    /** The company name. */
    companyName: string;
    /** The phone number. */
    phoneNumber?: string;
    /** The enterprise address. */
    address: definitions['Address'];
    /** The technical contact. */
    technicalContact: definitions['TechnicalContact'];
  };
  ServiceRequestIdDatabaseResource: definitions['Response'] & {
    /** The service request identifier from the downstream service. In the case of ServiceNow this is the task tracking identifier (RITM*). */
    serviceRequestId: string;
  };
  ShortcodesWithServiceRequestDatabaseResource: definitions['Response'] &
    definitions['ShortcodesWithoutUsage'] &
    definitions['ServiceRequestPostForm'];
  ShortcodesWithoutUsage: {
    customerNumber: string;
    customerName: string;
    shortCodeNumber: number;
    status: 'PENDING' | 'ACTIVE' | 'SUSPENDED' | 'INACTIVE';
    type: 'STANDARD' | 'ZERO_RATED';
    ctas: ('VIEW' | 'EDIT' | 'DEACTIVATE')[];
  };
  ShortcodeStatus: {
    status: 'INACTIVE';
  };
  Address: {
    label: string;
    elid?: string;
  };
  TechnicalContact: {
    firstName: string;
    lastName: string;
    phoneNumber?: string;
    email: string;
  };
  /** The message type. */
  MessageType: 'STANDARD' | 'ZERO_RATED';
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  /** Date Range */
  DateRange: 'last7days' | 'last30days' | 'last6months' | 'last12months';
  /** MySparkDigital customer number. */
  CustomerNumber: string;
  /** Content Provider Identifier. */
  ContentProviderId: string;
  /** Shortcode Number. */
  ShortcodeNumber: string;
}

export interface operations {
  'get-customers-overview': {
    parameters: {
      query: {
        /** Date Range */
        dateRange: parameters['DateRange'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['CustomerAdminOverviewDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed. */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-v1-services-external-a2p-messaging-customers-customerNumber-overview': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
      query: {
        /** Date Range */
        dateRange: parameters['DateRange'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['CustomerOverviewDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-v1-services-external-a2p-messaging-customers-customerNumber-usage': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
      query: {
        /** Date Range */
        dateRange: parameters['DateRange'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['UsageDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-v1-services-external-a2p-messaging-customers-customerNumber-shortcodes': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
      query: {
        /** Date Range */
        dateRange?: 'last7days' | 'last30days' | 'last6months' | 'last12months';
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ShortcodesDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-shortcodes-shortcodeNumber': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
        /** Shortcode Number. */
        shortcodeNumber: parameters['ShortcodeNumber'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ShortcodesWithServiceRequestDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'patch-shortcodes-shortcodeNumber': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
        /** Shortcode Number. */
        shortcodeNumber: parameters['ShortcodeNumber'];
      };
      body: {
        status?: definitions['ShortcodeStatus'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-v1-services-a2p-messaging-customers-customerNumber-contentProviders-get': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ContentProvidersDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'post-v1-services-a2p-messaging-customers-customerNumber-contentProviders-post': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
      body: {
        contentProvider?: definitions['ContentProviderPostForm'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ContentProviderIdDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'put-contentProviders': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
        /** Content Provider Identifier. */
        contentProviderId: parameters['ContentProviderId'];
      };
      body: {
        contentProvider?: definitions['ContentProviderPostForm'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'delete-contentProviders': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
        /** Content Provider Identifier. */
        contentProviderId: parameters['ContentProviderId'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-v1-services-a2p-messaging-shortcodes-overview': {
    parameters: {
      query: {
        /** Date Range */
        dateRange: parameters['DateRange'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ShortcodeOverviewDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-v1-services-a2p-messaging-shortcodes': {
    parameters: {
      query: {
        /** Date Range */
        dateRange: parameters['DateRange'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ShortcodesWithUsagesDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'get-customerNumber-service-requests': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ServiceRequestsDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  'post-customerNumber-service-requests': {
    parameters: {
      path: {
        /** MySparkDigital customer number. */
        customerNumber: parameters['CustomerNumber'];
      };
      body: {
        serviceRequest?: definitions['ServiceRequestPostForm'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ServiceRequestIdDatabaseResource'];
      };
      /** The provided token is invalid or expired. Authentication failed */
      401: {
        schema: definitions['Response'];
      };
      /** The user does not have the right to perform the action. Authorisation failed. */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
