/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/utility/content/articles': {
    get: operations['getArticleList'];
  };
  '/v1/utility/content/articles/{articleId}': {
    get: operations['getArticleDetail'];
  };
  '/v1/utility/content/help/categories/{rootCategory}': {
    get: operations['getHelpCategories'];
  };
  '/v1/utility/content/assets': {
    get: operations['getAssets'];
  };
  '/v1/utility/content/assets/{assetId}': {
    get: operations['getAssetById'];
  };
  '/v2/utility/content/assets': {
    get: operations['getAssetsV2'];
  };
  '/v1/utility/content/journey': {
    get: operations['getJourneyContentDetail'];
  };
  '/v1/utility/content/menu': {
    get: operations['getMenuContentDetail'];
  };
}

export interface definitions {
  ArticleTileListResponse: definitions['Response'] & {
    /** An array of the articles to be presented, either as article tiles or a single article detail view. Mandatory but the array may be empty. */
    articles: definitions['ArticleItem'][];
  };
  ArticleDetailResponse: definitions['Response'] & definitions['ArticleItem'];
  CategoriesResponse: definitions['Response'] & {
    /** An array of the help article categories to be presented. Mandatory but the array may be empty. */
    categories: definitions['HelpArticleCategoryItem'][];
  };
  /** An individual newsfeed article tile object. */
  ArticleItem: {
    /** Uniform Identifier pertaining to the content of the article (not the tag). This is used to allow the UI to request content based on the URI */
    articleId: string;
    /** The presentation layout that should be presented for the article. */
    layoutType: string;
    /** Category of the article, this categoryType will determine the backend services for the channel to determine the relevant CTA to use. */
    categoryType: string;
    /** The product or event for which the article relates too. This is not always populated. */
    productOfferId?: string;
    /** The date which is to be presented to the customer in ISO 8601 format. */
    presentationDate?: string;
    /** This defines if the article is a detail view or a tile view. */
    articleType: 'Tile' | 'Detail';
    /** A path to the relevant image content. */
    image?: string;
    /** The title/headline of the article. */
    title?: string;
    /** The array of copy required to build single or multiple paragraphs. */
    body?: definitions['CopyItem'][];
    /** The tags defined for this article. */
    tags?: string[];
    /** Defines if a gallery should be presented within the article. */
    gallery?: definitions['GalleryItem'][];
    /** Array of CTA's of which any one can be used. */
    availableCTAs?: definitions['CTAItem'][];
  };
  /** A gallery item to be presented within the article as part of a image gallery. */
  GalleryItem: {
    /** URL to the image within the dam. */
    image?: string;
    /** The copy supporting the image within the gallery. */
    paragraph?: definitions['CopyItem'][];
  };
  /** A single article CTA item. */
  CTAItem: {
    /** Title of the CTA. */
    title?: string;
    /** The copy supporting the CTA. */
    paragraph?: definitions['CopyItem'][];
    /** The Label to be placed on the CTA button. */
    ctaLabel: string;
    /** The ctaType will allow for mapping to be done on the presentation side to ensure the correct CTA can be presented. */
    ctaType?: string;
    /** The web link for the article CTA */
    webCTALink?: string;
    /** The mobile action type which will determine which journey/screen the CTA will navigate to. */
    mobileActionType?: string;
    /** Determines if authentication is required, this occurs when we move from App to Web. Although journeys should be native, this is being included to allow for versatility within the news feed. */
    shouldAuth?: boolean;
  };
  /** An individual help article category object. */
  HelpArticleCategoryItem: {
    /** The unique resource identifier for the content. */
    uri: string;
    /** The label shown on the menu structure. */
    menuLabel: string;
    /** The description shown on the menu structure */
    menuDescription?: string;
    /** The unique ID of the category. */
    categoryId: string;
    /** The parent category path within AEM, not including the routepath. */
    parentCategoryPath?: string;
    /** The label shown within the category, this can sometimes be longer than the menuLabel. */
    label: string;
    /** The label to be presented for each grouping. */
    description1?: string;
    /** The product or event for which the article relates to. This is used to retrieve the sub-category in order to navigate to the relevant page. */
    description2?: string;
    /** The level in the hierarchy structure 0=root category, 1 = sub category. */
    hierarchy: number;
    /** The order in which categories must be presented 1 = first category to be presented. */
    presentationOrder?: number;
    /** Provides the URL to the article. */
    articleURL?: string;
  };
  /** A single paragraph of text. */
  CopyItem: {
    copy?: string;
  };
  AssetsResponse: definitions['Response'] & {
    /** An array of assets */
    assets: definitions['Asset'][];
  };
  AssetsV2Response: definitions['Response'] & {
    /** An array of assets */
    assets: definitions['AssetV2'][];
  };
  AssetResponse: definitions['Response'] & definitions['Asset'];
  Asset: {
    /** The id of the content fragment */
    id: string;
    /** The unique content model name in AEM */
    modelId: string;
    /** The type of asset */
    type: 'Image' | 'Icon' | 'Document';
    /** The format of asset */
    format: 'png' | 'jpg' | 'zip' | 'pdf';
    /** The URL to retrieve the asset from the AEM dam. */
    url: string;
    /** The URI is the unique resource indicator to the content fragment within AEM. */
    uri: string;
    /** The tags of the content fragments */
    tags: string[];
    /** The key value pairs that allow for the service to map the asset to the presentation */
    references: definitions['Reference'][];
  };
  AssetV2: {
    /** The id of the content fragment */
    id: string;
    /** The unique content model name in AEM */
    modelId: string;
    /** The tags of the content fragments */
    tags: string[];
    /** The key value pairs that allow for the service to map the asset to the presentation */
    references: definitions['ReferenceV2'][];
    /** An array of one or more content types */
    contents: definitions['Content'][];
  };
  Content: {
    /** The type of asset */
    assetType: 'Image' | 'Icon' | 'Document' | 'Video' | 'TextContent' | 'CTA';
    /** The format of asset */
    format: 'png' | 'gif' | 'jpg' | 'zip' | 'pdf' | 'mp4' | 'text' | 'cta';
    /** The URL to retrieve the asset from the AEM dam. */
    url?: string;
    /** The URI is the unique resource indicator to the content fragment within AEM. */
    uri?: string;
    /** The type of asset */
    type?: 'heading' | 'cta' | 'paragraph';
    /** Usually blank, only populated if component type is cta. Where friendly text is displayed instead of hyperlink */
    text?: string;
    /** Content value for given type. */
    value?: string;
  };
  Reference: {
    /** The reference identifier that the service will use to map the asset to the context to be presented */
    key:
      | 'productOfferId'
      | 'cardProvider'
      | 'bankProvider'
      | 'campaignId'
      | 'productName'
      | 'shopCategories';
    /** The value to be mapped against to determine the correct asset to be presented */
    value: string;
  };
  ReferenceV2: {
    /** The v2 version reference identifier that the service will use to map the asset to the context to be presented */
    key:
      | 'productOfferId'
      | 'cardProvider'
      | 'bankProvider'
      | 'campaignId'
      | 'productName'
      | 'shopCategories'
      | 'channel'
      | 'assetFilter';
    /** The value to be mapped against to determine the correct asset to be presented */
    value: string;
  };
  FooterMenuResponse: definitions['Response'] & definitions['FooterMenu'];
  FooterMenu: {
    /** The string representing the API reference-able ID for the menu and content fragment path pertaining to the menu */
    id: string;
    /** The tags assigned to the menu. */
    tags: string[];
    /** The title of the menu. */
    title: string;
    /** The description of the menu. This almost certainly has no customer-facing use-case, but is returned for completeness. */
    description: string;
    /** The array of menu definitions associated with the menu area. If no menu entries have been curated for this menu then an empty array should be returned to the client. */
    menus: definitions['MenuFields'][];
  };
  MenuFields: {
    /** The type of menu, where the type = the first part of the downstream AEM menu-type attribute associated with a menu field. */
    menuType: 'PRIMARY' | 'SECONDARY' | 'TERTIARY';
    menuSections: definitions['MenuSections'][];
  };
  MenuSections: {
    menuItems: definitions['MenuItemType'][];
  };
  MenuItemType: {
    /** An enum representing the type of content represented by this menu item. */
    itemType: 'HEADING' | 'HYPERLINK' | 'IMAGE';
    /** The required text value of the menu item. */
    itemValue: string;
    /** The required URL corresponding to the href rendered for the <a> tag that encapsulates the menu item text or image. */
    itemUrl: string;
    /** The optional URL corresponding to the URL of the image if the field is of type IMAGE. */
    itemImageUrl?: string;
  };
  JourneyDetailResponse: definitions['Response'] & definitions['JourneyDetail'];
  JourneyDetail: {
    /** The string representing the folder(s) and content fragment path pertaining to the journey step */
    id: string;
    /** The tags assigned to the journey step. */
    tags: string[];
    /** The title of the journey step. */
    title: string;
    /** The description of the journey step for rendering as <meta> tags SEO and usability purposes such as screen readers. */
    description: string;
    /** The array of content fields associated with the journey step. */
    fields: definitions['Fields'][];
  };
  Fields: {
    /** The key associated to the content field. */
    fieldKey: string;
    /** An enum representing the type of content represented by this field */
    fieldType:
      | 'HEADING'
      | 'SUB_HEADING'
      | 'PARAGRAPH'
      | 'LABEL'
      | 'IMAGE'
      | 'UNORDERED_LIST_ITEM'
      | 'ORDERED_LIST_ITEM'
      | 'HYPERLINK';
    /** The optional text value of the field */
    fieldValue?: string;
    /** The URL corresponding to the URL of the image or hyperlink */
    fieldUrl?: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  /** The tags to search for the specific content fragments in AEM */
  tags: string[];
  /** The name of the variation to return, defaults to master if not provided */
  variation: string;
}

export interface operations {
  getArticleList: {
    parameters: {
      query: {
        /** A list of content article tags. */
        tags: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ArticleTileListResponse'];
      };
      /** BAD_REQUEST */
      400: {
        schema: definitions['Response'];
      };
      /** NOT_FOUND */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getArticleDetail: {
    parameters: {
      path: {
        /** Uniform  Identifier pertaining to the content of the article. */
        articleId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ArticleDetailResponse'];
      };
      /** BAD_REQUEST */
      400: {
        schema: definitions['Response'];
      };
      /** NOT_FOUND */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getHelpCategories: {
    parameters: {
      path: {
        /** The root category that is requested. */
        rootCategory: 'help' | 'learn' | 'legal' | 'popular' | 'terms';
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['CategoriesResponse'];
      };
      /** BAD_REQUEST */
      400: {
        schema: definitions['Response'];
      };
      /** NOT_FOUND */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getAssets: {
    parameters: {
      query: {
        /** The tags to search for the specific content fragments in AEM */
        tags: parameters['tags'];
        /** The type of asset */
        type?: 'Image' | 'Icon' | 'Document';
        /** The format of asset */
        format?: 'png' | 'jpg' | 'zip' | 'pdf';
      };
    };
    responses: {
      /** Assets fetched successfully */
      200: {
        schema: definitions['AssetsResponse'];
      };
      /** Bad Request, internal error code 4200 */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, internal error code 5200 */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getAssetById: {
    parameters: {
      path: {
        /** The unique assetId that is to be queried from AEM */
        assetId: string;
      };
      query: {
        /** The type of asset */
        type?: 'Image' | 'Icon' | 'Document';
        /** The format of asset */
        format?: 'png' | 'jpg' | 'zip' | 'pdf';
      };
    };
    responses: {
      /** The Asset fetched successfully */
      200: {
        schema: definitions['AssetResponse'];
      };
      /** Bad Request, internal error code 4200 */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, internal error code 5200 */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getAssetsV2: {
    parameters: {
      query: {
        /** The tags to search for the specific content fragments in AEM */
        tags: parameters['tags'];
        /** The type of asset */
        type?: 'Image' | 'Icon' | 'Document' | 'Video' | 'TextContent' | 'CTA';
        /** The format of asset */
        format?: 'png' | 'gif' | 'jpg' | 'zip' | 'pdf' | 'text';
        /** Provides the ability to filter based on asset references key/value pairs */
        referenceFilters?: string[];
      };
    };
    responses: {
      /** Assets fetched successfully */
      200: {
        schema: definitions['AssetsV2Response'];
      };
      /** Bad Request, internal error code 4200 */
      400: {
        schema: definitions['Response'];
      };
      /** No contents found */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, internal error code 5200 */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getJourneyContentDetail: {
    parameters: {
      query: {
        /** The string representing the folder(s) and content fragment path pertaining to the journey step */
        id: string;
        /** The name of the variation to return, defaults to master if not provided */
        variation?: parameters['variation'];
      };
    };
    responses: {
      /** Journey details fetched successfully */
      200: {
        schema: definitions['JourneyDetailResponse'];
      };
      /** Bad Request, internal error code 4200 */
      400: {
        schema: definitions['Response'];
      };
      /** No contents found */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, internal error code 5200 */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getMenuContentDetail: {
    parameters: {
      query: {
        /** The string representing the folder(s) and content fragment path pertaining to the requested menu */
        id: string;
        /** The name of the variation to return, defaults to master if not provided */
        variation?: parameters['variation'];
      };
    };
    responses: {
      /** Consumer footer menu fetched successfully */
      200: {
        schema: definitions['FooterMenuResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** No menu content found */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
