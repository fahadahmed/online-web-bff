/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/shopping/checkout/cart/{cartId}/summary': {
    get: operations['retrieveCheckoutSummary'];
  };
  '/v1/shopping/checkout/cart/{cartId}/section/{sectionId}': {
    get: operations['retrieveCheckoutSectionStructure'];
    post: operations['submitCheckoutSection'];
  };
  '/v1/shopping/checkout/cart/{cartId}/details': {
    get: operations['retrieveCheckoutSectionDetails'];
  };
  '/v1/shopping/checkout/cart/{cartId}': {
    get: operations['retrieveCheckoutData'];
  };
  '/v1/shopping/checkout/cart/{cartId}/internal': {
    get: operations['retrieveCheckoutDataInternally'];
  };
  '/v1/shopping/checkout/cart/{cartId}/validate': {
    post: operations['validateCheckoutData'];
  };
  '/v1/shopping/checkout/cart/{cartId}/deliveryoption/clicktocollect': {
    get: operations['retrieveStoreStockData'];
  };
}

export interface definitions {
  CheckoutSummaryResponse: definitions['Response'] &
    definitions['MinimalCheckoutResponse'];
  CheckoutDataResponse: definitions['Response'] & {
    sections?: definitions['SectionData'][];
  };
  /** Checkour flow is divided into sections. Each section can have one or more steps within it */
  SectionData: {
    /** Unique Id for a section as defined in configuration file */
    sectionId?: string;
    steps?: definitions['CaptureStepData'][];
  };
  MinimalCheckoutResponse: {
    sections?: definitions['SectionSummary'][];
  };
  SectionSummary: {
    /** Name of the section */
    name?: string;
    /** Unique Id for a section */
    sectionId?: string;
    steps?: definitions['StepSummary'][];
  };
  StepSummary: {
    /** Name of the step */
    name?: string;
    /** Unique Id for a step */
    stepId?: string;
  };
  CheckoutSectionDetailResponse: definitions['Response'] & {
    sections: definitions['CheckoutStructureSection'][];
  };
  CheckoutSectionStructureResponse: definitions['Response'] &
    definitions['CheckoutStructureSection'];
  SubmitCheckoutSectionRequest: {
    steps: definitions['CaptureStepData'][];
  };
  SubmitCheckoutSectionErrorResponse: definitions['Response'] & {
    steps: definitions['CaptureStepData'][];
  };
  ValidateCheckoutDataErrorResponse: definitions['Response'] & {
    sections: definitions['SectionData'][];
  };
  /** Each section has a sectionId, name and list of steps in it */
  CheckoutStructureSection: {
    customAttributes?: definitions['Attribute0'][];
    /** Name of the section */
    name?: string;
    /** Unique Id for a section */
    sectionId?: string;
    steps?: definitions['CheckoutStructureStep'][];
  };
  /** List of custom attributes with key and value */
  Attribute0: {
    /** Name of the key. For e.g. category */
    key?: string;
    /** Value of the key */
    value?: string;
  };
  /** Step consists of options and fields for capturing necessary input from user. It also has certain attributes which defines how the information is captured in User Interface */
  CheckoutStructureStep: {
    /** Associated cart item id for which this step is being captured */
    cartItemId?: string;
    customAttributes?: definitions['Attribute0'][];
    endpoints?: definitions['EndPoint'][];
    fields?: definitions['Field'][];
    /** If this flag is set to true and if the level of the step is offerContainer / cartItem / cartItemQuantity then user will be prompted if user wants to keep same data for each offer container or cart item or wants to provide different information for different offer container / cart items. If user selects yes, then UI will capture the data only once. The selection of the user will be stored in capture Data request as groupByLevel. */
    groupByLevelEnabled?: boolean;
    /**
     * Possible values: order, offerContainer, cartItem, cartItemQuantity
     * order: step must be captured only once
     * offerContainer: step must be captured once for each offer container
     * cartItem: step must be captured once for each cart item
     * cartItemQuantity: step must be captured for each cart item as many times as the quantity of the cart item
     */
    level?: string;
    /** Name of the step */
    name?: string;
    /** Associated offer container id for which this step is being captured */
    offerContainerId?: string;
    /**
     * If level is cartItemQuantity, then each step for the same cart item is differentiated using sequence which is auto populated by the service
     * defalut value: 1, possible values: 1,2,3,4... so on
     */
    sequence?: string;
    /** The id of the step from which the data in this step can be copied. If stepDataRef is defined, UI will give option to user if the information in this step is same as the step as defined by stepDataRef. For e.g. user has already filled Billing Address and Delivery Address has stepDataRef defined in Billing Address then when user reached Delivery Address step, user will be asked if the delivery address is same as the billing address. If user selects yes then user is not required to fill information for this step and UI will copy the data. Assumption is that the fields in stepDataRef must be same. */
    stepDataRef?: string;
    /** Unique Id for a step */
    stepId?: string;
    /** Id of the referenced ui component */
    uiRef?: string;
    validationExpressions?: definitions['ValidationExpressions'][];
    visible?: boolean;
  };
  /** This object provides endpoint, request inputs and also the response mappings. Request mappings with source=UI are derived by UI component while user fills the data in UI */
  EndPoint: {
    /**
     * Endpoing URL
     * If this contains any dynamic parameter (enclosed in curly brackets), UI component needs to evaluate it
     */
    basePath?: string;
    /** Method such as GET, POST */
    method?: string;
    /** If there are multiple end points defined in a step, name can be used to unique identify a endpoint */
    name?: string;
    requestMapping?: definitions['RequestMapping'][];
    responseMapping?: definitions['FieldMapping'][];
    uiFields?: definitions['UiField0'][];
  };
  Field: {
    customAttributes?: definitions['Attribute0'][];
    dataRef?: definitions['DataRef'][];
    /** URL to retrieve list of possible values for this field */
    dataRefURL?: string;
    /** Data type of the field. For e.g. string, number, date etc. */
    datatype?: string;
    /** Default value of the field */
    defaultValue?: string;
    fieldRule?: definitions['FieldRule0'];
    /** Label of the field to be shown in UI */
    label?: string;
    /** Name of the field */
    name?: string;
    options?: definitions['Option0'][];
    /** Type of the field. This will be used by UI to display field in UI. For e.g. text field, dropdown, radioOption, checkOption etc. */
    type?: string;
    /** Id of the UI component referenced */
    uiRef?: string;
  };
  ValidationExpressions: {
    expression?: string;
    message?: string;
    uiFields?: definitions['UiField0'][];
  };
  /** Define input parameters for the endpoint */
  RequestMapping: {
    /** If evaluated value is blank then default value should be used as input parameter value */
    defaultValue?: string;
    /** Name of the input parameter */
    name?: string;
    /**
     * Source from where the input parameter's value needs to be retrieved
     * If value is 'UI' then UI component needs to evaluate
     * If value is 'Context', value will be prepopulated
     */
    source?: string;
    /** Type of the input. For e.g. header, body */
    type?: string;
    /** Expression containing input parameters (enclosed in curly brackets) */
    value?: string;
  };
  /** Mapping of fields in step with response paramter */
  FieldMapping: {
    /** Name of the field in step */
    sourceField?: string;
    /** Path of the parameter in response. For e.g. data.appointment.referenceId */
    targetField?: string;
  };
  UiField0: {
    /** Cart Item Id associated to the step */
    cartItemId?: string;
    /** Name of the field */
    name?: string;
    /** Offer container Id associated to the step */
    offerContainerId?: string;
    /** Id of the section */
    sectionId?: string;
    /** Unique sequence number associated to the step */
    sequence?: string;
    /** Id of the step */
    stepId?: string;
  };
  /** Provides list of values allowed in a field */
  DataRef: {
    /** Id of the value */
    id?: string;
    /** Text value to be shown in dropdown */
    text?: string;
  };
  FieldRule0: {
    required?: definitions['Required'];
    state?: definitions['State'];
    validations?: definitions['Validations'];
    visibility?: definitions['Visibility'];
  };
  /** Define the list of fields to capture for each value defined with in option. For e.g each paymeth method requires different set of fields to be captured */
  Option0: {
    fields?: definitions['Field'][];
    /** Value of the option selected */
    value?: string;
    visibility?: definitions['Visibility'];
  };
  Required: {
    /** Expression which if evaluates to true then this field is mandatory */
    expression?: string;
    uiFields?: definitions['UiField0'][];
  };
  State: {
    /** Expression which if evaluates to true then this field is shown as enabled in UI */
    expression?: string;
    uiFields?: definitions['UiField0'][];
  };
  Validations: {
    /** Name of the field in this step which must have same value as this field */
    compare?: string;
    /** Maximum length of this field value */
    maxLength?: number;
    /** Maximum value of this field. This attribute can be defined when it's data type is number */
    maxValue?: number;
    /** Minimum length of this field value */
    minLength?: number;
    /** Minimum value of this field. This attribute can be defined when it's data type is number */
    minValue?: number;
    regex?: definitions['Regex01'];
  };
  Visibility: {
    /** Expression which if evaluates to true then this field / option value is visible to the user */
    expression?: string;
    uiFields?: definitions['UiField0'][];
  };
  Regex01: {
    /** Regular expression to verify the expected pattern of the field value */
    expression?: string;
    /** Error message to be displayed if value provided in the field does not match the pattern defined using regular expression */
    message?: string;
  };
  CaptureStepData: {
    /** Associated cart item id for which this step is being captured */
    cartItemId?: string;
    fields?: definitions['CaptureFieldData'][];
    /** This attribute will store the choice of the user about capturing the information either once for each offerContainer / cartItem or separately for each of them when step level = offerContainer / cartItem / cartItemQuantity. If user has selected yes / no then next time when UI loads this information, it displays the information based on the choice already selected */
    groupByLevel?: boolean;
    /** Associated offer container id for which this step is being captured */
    offerContainerId?: string;
    options?: definitions['CaptureOptionData'][];
    /** If level is cartItemQuantity, then each step for the same cart item is differentiated using sequence */
    sequence?: string;
    /** This attribute will store the choice of the user about using same data as captured in the step referred in this step. If user has choosen to keep the information same in this step as the step already captured and defined as stepDateRef in this step, then next time when UI loads this step, it does ask user to choose if he wants to fill the information or keep it same as referred step */
    stepDataRefChoice?: boolean;
    /** Unique Id for a step as defined in configuration file */
    stepId: string;
  };
  CaptureFieldData: {
    /** Name of the field */
    name?: string;
    /** Value captured for this field */
    value?: string;
  };
  CaptureOptionData: {
    fields?: definitions['CaptureFieldData'][];
    /** Name of the option */
    name?: string;
    /** Value of the option selected */
    value?: string;
  };
  StoreStockDataResponse: definitions['Response'] & {
    stores: definitions['StoreStockData'][];
  };
  StoreStockData: {
    /** The StoreId that uniquely identifies the store. */
    id: string;
    /** Identifies the store's stock status. */
    stockStatus: 'IN_STOCK' | 'OUT_OF_STOCK';
    /** The name of the location. */
    displayName: string;
    /** The first line of the address associated with the location, normally a street or building number. */
    addressLine1?: string;
    /** The second line of the address associated with the location. */
    addressLine2?: string;
    /** The suburb where the location resides within. */
    suburb?: string;
    /** The city where the location resides within. */
    city?: string;
    /** The geographic latitude of the location. */
    latitude: number;
    /** The geographic longitude of the location. */
    longitude: number;
    /** The URL representation of customer-friendly directions for getting to the location. */
    directions?: string;
    /** An image of the point of interest. */
    image?: string;
    /** The optional primary contact phone number of the store. */
    phoneNumber?: string;
    /** The optional primary email address of the store. */
    emailAddress?: string;
    operatingHours?: definitions['OperatingHoursData'][];
  };
  OperatingHoursData: {
    /** The day of the week associated with the opening hours record. */
    day?:
      | 'Monday'
      | 'Tuesday'
      | 'Wednesday'
      | 'Thursday'
      | 'Friday'
      | 'Saturday'
      | 'Sunday';
    /** The local time that the location is opens for operation on the nominated day. */
    open?: string;
    /** The local time that the location is closes for operation on the nominated day. */
    close?: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  /** Reference id that uniquely identifies a cart in blue marble. */
  CartId: string;
  /** The unique identifier of the section. */
  SectionId: string;
  Channel: string;
}

export interface operations {
  retrieveCheckoutSummary: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the summary of checkout structure from blue marble. */
      200: {
        schema: definitions['CheckoutSummaryResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveCheckoutSectionStructure: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** The unique identifier of the section. */
        sectionId: parameters['SectionId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the checkout section structure from blue marble. */
      200: {
        schema: definitions['CheckoutSectionStructureResponse'];
      };
      /** Bad Request, invalid cart id, invalid section id. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  submitCheckoutSection: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** The unique identifier of the section. */
        sectionId: parameters['SectionId'];
      };
      body: {
        /** The Request Container for submiting checkout section data */
        submitCheckoutSectionRequest: definitions['SubmitCheckoutSectionRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the checkout section structure from blue marble. */
      200: {
        schema: definitions['Response'];
      };
      /** Bad Request, invalid cart id, invalid section id, validation fails. */
      400: {
        schema: definitions['SubmitCheckoutSectionErrorResponse'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Expired validity token. */
      403: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveCheckoutSectionDetails: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the checkout section structure from blue marble. */
      200: {
        schema: definitions['CheckoutSectionDetailResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveCheckoutData: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the summary of checkout structure from blue marble. */
      200: {
        schema: definitions['CheckoutDataResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveCheckoutDataInternally: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the summary of checkout structure from blue marble. */
      200: {
        schema: definitions['CheckoutDataResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  validateCheckoutData: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully validated the checkout data against the checkout structure. */
      200: {
        schema: definitions['Response'];
      };
      /** Bad Request, invalid cart id, validation fails. */
      400: {
        schema: definitions['ValidateCheckoutDataErrorResponse'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Expired validity token. */
      403: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveStoreStockData: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieved the store information for click to collect items. */
      200: {
        schema: definitions['StoreStockDataResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
