/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/line/{lineNumber}/assure/promise': {
    get: operations['getConnectionPromisePreferences'];
    post: operations['addCustomerNotificationPreference'];
  };
  '/v1/line/{lineNumber}/assure/promise/{connectionPromiseId}': {
    delete: operations['deleteCustomerNotificationPreference'];
    patch: operations['updateCustomerNotificationPreference'];
  };
}

export interface definitions {
  /** Detail object of Connection Promise request data. */
  ConnectionPromiseRequestData: {
    /** The Spark mobile number to be associated with this Connection Promise. */
    lineNumber: string;
    /** A flag to indicate if the Spark mobile line is considered a primary or secondary alternative connection. */
    primaryLine: boolean;
  };
  /** Detail object of Connection Promise update request data. */
  ConnectionPromiseUpdateRequestData: {
    /** A flag to indicate if the Spark mobile line is considered a primary or secondary alternative connection. */
    primaryLine: boolean;
  };
  ConnectionPromiseLinesResponse: definitions['Response'] & {
    /** A list of line details associated with this Connection Promise. */
    connectionPromiseLines?: definitions['ConnectionPromiseData'][];
  };
  /** Detail object of line associated with Connection Promise. */
  ConnectionPromiseData: {
    /** The unique identifier for the Connection Promise record */
    connectionPromiseId: string;
    /** The Spark mobile line number associated with this Connection Promise. */
    lineNumber: string;
    /** A flag to indicate if the Spark mobile line is considered a primary (20GB data over 7 days) or secondary (5GB data over 7 days) alternative connection. */
    primaryLine: boolean;
  };
  Response: {
    /** List of messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface operations {
  getConnectionPromisePreferences: {
    parameters: {
      path: {
        /** The line number to retrieve the Connection Promise configuration details */
        lineNumber: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ConnectionPromiseLinesResponse'];
      };
      /** Invalid parameters provided */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised to get connection promise preference */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  addCustomerNotificationPreference: {
    parameters: {
      path: {
        /** The line number to retrieve the Connection Promise configuration details */
        lineNumber: string;
      };
      body: {
        /** The connection promise record request data */
        ConnectionPromiseRequestData?: definitions['ConnectionPromiseRequestData'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ConnectionPromiseLinesResponse'];
      };
      /** Invalid parameters provided */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised to get connection promise preference */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  deleteCustomerNotificationPreference: {
    parameters: {
      path: {
        /** The line number to retrieve the Connection Promise configuration details */
        lineNumber: string;
        /** The Connection Promise record to modify. */
        connectionPromiseId: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Invalid parameters provided */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised to get connection promise preference */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  updateCustomerNotificationPreference: {
    parameters: {
      path: {
        /** The line number to retrieve the Connection Promise configuration details */
        lineNumber: string;
        /** The Connection Promise record to modify. */
        connectionPromiseId: string;
      };
      body: {
        /** The connection promise update request data */
        ConnectionPromiseUpdateRequestData?: definitions['ConnectionPromiseUpdateRequestData'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ConnectionPromiseLinesResponse'];
      };
      /** Invalid parameters provided */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised to get connection promise preference */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
