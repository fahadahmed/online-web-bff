/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/finance/wallet/me': {
    get: operations['getPaymentMethods'];
    post: operations['addPaymentMethod'];
  };
  '/v1/finance/wallet/me/{paymentmethodid}': {
    delete: operations['removePaymentMethod'];
    patch: operations['patchPaymentMethod'];
  };
}

export interface definitions {
  PaymentMethodResponse: definitions['Response'] & {
    paymentMethods?: definitions['PaymentMethod'][];
  };
  SinglePaymentMethodResponse: definitions['Response'] &
    definitions['BasePaymentMethodProperties'] &
    definitions['AdditionalPaymentMethodProperties'];
  PaymentMethodUpdateRequest: {
    /** A customised name given by the user for the payment method. */
    personalisedName?: string;
    /** true indicates that the payment method is chosen as the default method of payment. */
    isPreferred?: boolean;
  };
  BasePaymentMethodProperties: {
    /** the unique identifier of this payment method. */
    paymentMethodId: string;
    /** Indicates the source of the payment method association. */
    source?: 'WALLET_SELF' | 'WALLET_OTHER' | 'DIRECT';
  };
  AdditionalPaymentMethodProperties: {
    /** true indicates that this payment method already exists. */
    isDuplicate?: boolean;
  };
  PaymentMethod: definitions['PaymentMethodRecord'] &
    definitions['BasePaymentMethodProperties'];
  PaymentMethodRecord: {
    /** Indicates if the payment method is a card or bank account. */
    type: 'CREDIT' | 'BANK';
    /** A customised name given by the user for the payment method. */
    personalisedName?: string;
    cardDetail?: definitions['CardDetail'];
    /** true indicates that he payment method is chosen as the default method of payment. */
    isPreferred: boolean;
    bankAccountDetail?: definitions['BankAccountDetail'];
    associations?: definitions['Association'][];
  };
  CardDetail: {
    /** the masked card number */
    maskedCardNumber?: string;
    /** The name on the card */
    cardName?: string;
    /** indicates the card vendor */
    cardType?: string;
    /** the month of expiry on the card */
    expiryMonth?: number;
    /** the year of expiry on the card */
    expiryYear?: number;
    /** The token representing the card in Bambora. */
    token?: string;
    /** temporary representation of the token until registration in Bambora. */
    oneTimeToken?: string;
    /** The secure transaction token provided by bambora to register the card. */
    secureTransactionToken?: string;
  };
  BankAccountDetail: {
    /** the name of the bank */
    bankName?: string;
    /** the name of the account */
    accountName?: string;
    /** the account number */
    accountNumber: string;
  };
  Association: {
    /** the type of association, as of now we support only one type. */
    type: 'RECURRING';
    /** the access type of the association. */
    accessType: 'ACCOUNT' | 'LINE';
    /** the spark post pay account number if teh association is on the account. */
    accountNumber?: string;
    /** the spark line number if the association is on the line. */
    lineNumber?: string;
    /** the unique identifier of the associated payment method. */
    paymentMethodId: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface operations {
  getPaymentMethods: {
    responses: {
      /** OK */
      200: {
        schema: definitions['PaymentMethodResponse'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  addPaymentMethod: {
    parameters: {
      body: {
        /** The Payment method to add */
        paymentMethod?: definitions['PaymentMethodRecord'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['SinglePaymentMethodResponse'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  removePaymentMethod: {
    parameters: {
      path: {
        /** id of a payment method */
        paymentmethodid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  patchPaymentMethod: {
    parameters: {
      path: {
        /** id of a payment method */
        paymentmethodid: string;
      };
      body: {
        /** The Payment method update request */
        paymentMethodUpdateRequest?: definitions['PaymentMethodUpdateRequest'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
