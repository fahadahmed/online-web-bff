/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/location/address/results/search': {
    get: operations['fetchAddresses'];
  };
  '/v1/location/address/details/{elid}': {
    get: operations['getAddressDetails'];
  };
}

export interface definitions {
  AddressSearchResponse: definitions['Response'] & {
    /** Array of addresses retrieved from downstream systems. */
    addresses: definitions['Address'][];
  };
  Address: {
    /** Full address */
    label: string;
    /** Valid address identifier */
    elid: string;
    /** Search term */
    term: string;
    /** boolean indicating whether unverified addresses (no ELID) should be returned (default = false) */
    unVerified: boolean;
  };
  AddressDetails: definitions['Response'] & {
    /** Unique identifier for an address */
    elid: string;
    addressLine1: string;
    addressLine2?: string;
    addressLine3?: string;
    addressLine4?: string;
    /** The name of the building */
    buildingName?: string;
    /** The begining number of a street, for address 135-137 Vincent Street the value will be 137 */
    streetNumberFirst?: string;
    /** The end number of a street, for address 135-137 Vincent Street the value will be 135 */
    streetNumberLast?: string;
    /** The level number */
    levelNumber?: string;
    /** Level type */
    levelType?: string;
    /** First suffix from street number */
    streetNumberFirstSuffix?: string;
    /** Sub unit number */
    subUnitNumber?: string;
    /** Sub unit type */
    subUnitType?: string;
    /** Street name */
    streetName?: string;
    /** Street type */
    streetType?: string;
    /** Street Sufix */
    streetSuffix?: string;
    /** Locality */
    locality?: string;
    /** Town or City */
    townOrCity?: string;
    /** Postal code */
    postcode?: string;
    /** Box Number */
    boxNumber?: string;
    /** Private bag number */
    privateBagNumber?: string;
    /** Counter delivery point */
    counterDeliveryPoint?: string;
    /** Box lobby name */
    boxLobbyName?: string;
    /** Addres type */
    addressType?: string;
    /** Region */
    region?: string;
    terrAuthName?: string;
    /** Addres verification status */
    verified: boolean;
    /** Rural identifier */
    ruralIdentifier?: string;
    /** The post mail town */
    mailTown?: string;
    /** The geocode information like latitude and longitude. */
    geographicCoordinate: definitions['GeographicCoordinate'];
    /** Alternate reference details for the given ELID */
    alternateReference: definitions['AlternateReference'][];
  };
  GeographicCoordinate: {
    latitude: number;
    longitude: number;
    nztmX: number;
    nztmY: number;
  };
  AlternateReference: {
    /** A unique identifier represents the reference type. */
    type?: string;
    /** A value for the given reference type. */
    value?: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface operations {
  fetchAddresses: {
    parameters: {
      query: {
        /** Partial Address - Minimum 3 characters */
        partialAddress: string;
        /** Type of address */
        addressType?: 'all' | 'physical' | 'postal';
      };
    };
    responses: {
      /** The matching addresses have been fetched successfully. */
      200: {
        schema: definitions['AddressSearchResponse'];
      };
      /** Bad Request, internal error code 4200 */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, internal error code 5200 */
      500: {
        schema: definitions['Response'];
      };
      /** Request Time out, internal error code 5400 */
      504: {
        schema: definitions['Response'];
      };
    };
  };
  getAddressDetails: {
    parameters: {
      path: {
        /** The elid to fetch the address details */
        elid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['AddressDetails'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised to fetch usage about this line */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
