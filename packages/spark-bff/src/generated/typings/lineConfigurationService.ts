/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/line/configuration/{lineNumber}/smartcap': {
    get: operations['getSmartCap'];
    put: operations['updateSharerCap'];
    delete: operations['deleteSharerCap'];
  };
  '/v2/line/configuration/{lineNumber}/smartcap': {
    put: operations['updateSmartCap'];
    delete: operations['deleteSmartCap'];
  };
  '/v1/line/configuration/{lineNumber}/groupcaps': {
    get: operations['getGroupCaps'];
  };
}

export interface definitions {
  UpdateSmartCapRequest: definitions['SmartCapData'];
  Cap: {
    /** The new value of the smartcap. */
    value: number;
    /** The units of the value */
    unit?: 'GB' | 'MB' | 'DOLLAR';
  };
  SmartCapData: {
    /** The type of smart cap being applied. */
    type: 'SHARER_LIMIT' | 'LOCAL' | 'ROAMING';
    cap: definitions['Cap'];
    isUncapped?: definitions['UncappedType'];
  };
  GetSmartCapResponse: definitions['Response'] & {
    /** The group id that the line is belong to, it is only required for sharer plan. */
    groupId?: string;
    isUncapped?: definitions['UncappedType'];
    SmartCapDetails: definitions['SmartCapData'];
  };
  GetGroupCapsResponse: definitions['Response'] & {
    group: definitions['Group'];
  };
  Group: {
    /** The Siebel reference id of the group. */
    id: string;
    /** The name of the group. */
    name: string;
    /** An object providing the total data that group has access to. */
    totalData: definitions['TotalData'];
    /** An array of the members which are included in the group. */
    members: definitions['Member'][];
  };
  Member: {
    /** The service/connection number for the group member */
    serviceId: string;
    /** The role of the member in the group.  Only expect 'Leader' or 'Mobile Sharer' */
    type: 'Leader' | 'MobileSharer';
    /** The status of the group member.  Only expect 'Active' or 'Pending' */
    status: string;
    isUncapped: definitions['UncappedType'];
    /** The value of the sharer cap, it the share group member is capped. Can be 0 or any number. Optional, but required is isUncapped is false. */
    capValue?: string;
    /** The amount used by the sharer. Can be 0 or any number. Optional but expected, even if it's 0. */
    usedValue?: string;
    /** The units of the value */
    unit?: 'GB' | 'MB';
  };
  /** Indicates if the cap is set to unlimited.  If unlimited the value will be true. */
  UncappedType: boolean;
  TotalData: {
    /** Total data consumed. */
    value: string;
    /** Unit of value. */
    unit: 'GB' | 'MB';
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  /** The type of smart cap */
  queryType: 'SHARER_LIMIT' | 'LOCAL' | 'ROAMING';
}

export interface operations {
  getSmartCap: {
    parameters: {
      path: {
        /** The line number for which the smart caps need to be retrieved */
        lineNumber: string;
      };
      query: {
        /** The type of smart cap */
        type: parameters['queryType'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['GetSmartCapResponse'];
      };
      /** Invalid input parameters were provided. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to query the line */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  updateSharerCap: {
    parameters: {
      path: {
        /** The line number for which the smart caps should be changed. */
        lineNumber: string;
      };
      body: {
        updateSmartCapRequest?: definitions['UpdateSmartCapRequest'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** Invalid input parameters were provided. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to update the line */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  deleteSharerCap: {
    parameters: {
      path: {
        /** The line number for which the smart caps should be changed. */
        lineNumber: string;
      };
      query: {
        /** The type of smart cap to remove */
        type: 'SHARER_LIMIT';
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** Invalid input parameters were provided. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to delete the line */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  updateSmartCap: {
    parameters: {
      path: {
        /** The line number for which the smart caps should be changed. */
        lineNumber: string;
      };
      body: {
        updateSmartCapRequest?: definitions['UpdateSmartCapRequest'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** Invalid input parameters were provided. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to update the line */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  deleteSmartCap: {
    parameters: {
      path: {
        /** The line number for which the smart caps should be changed. */
        lineNumber: string;
      };
      query: {
        /** The type of smart cap */
        type: parameters['queryType'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** Invalid input parameters were provided. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to delete the line */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getGroupCaps: {
    parameters: {
      path: {
        /** The line number for which the smart caps need to be retrieved */
        lineNumber: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['GetGroupCapsResponse'];
      };
      /** Invalid input parameters were provided. Line is not part of a group or is not the leader of the group. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to query the line */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
