/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/line/{lineNumber}/assure/diagnostics': {
    post: operations['obtainDiagnosticTestResults'];
  };
}

export interface definitions {
  DiagnosticResultsResponse: definitions['Response'] & {
    /** The type of diagnostic test suite run against the line number. */
    testSuiteType: 'FIBRE_CHORUS' | 'FIBRE_OTHER' | 'COPPER' | 'WIRELESS_BB';
    /** For the v1 implementation, it will always return true. Included as a future-proofing option. */
    testSuiteComplete: boolean;
    /** A list of diagnostic results. If there are no results then an empty array will be returned. */
    diagnosticResults: definitions['DiagnosticResult'][];
    /** An object representing the basic account and hardware details for the line in question */
    lineDetails: definitions['LineDetails'];
  };
  DiagnosticResult: {
    /** The type of diagnostic test performed */
    testType: 'NETWORK' | 'ACCESS_POINT' | 'CONNECTIVITY';
    /** The customer-facing label associated with the diagnostic test result */
    testLabel: string;
    /** A flag indicated whether this particular diagnostic test has been executed or was not performed due to connectivity issues identified earlier. */
    testExecuted: boolean;
    /** A flag indicating whether the diagnostic test has been completed successfully. */
    testPassed: boolean;
    /** If an issue was encountered during the execution of this test, this attribute is the key that represents the nature of the issue experienced. */
    diagnosticSummaryCode?: string;
    /** The title/headline of the diagnostic result */
    title?: string;
    /** An array of body content text that summarises the result of the test and call to action options. If no body text is defined an empty array is returned. */
    body: string[];
    /** The array of Call To Actions(CTA) representing the next steps the customer can take to troubleshoot their connection should an issue be identified. If no relevant CTAs are possible for this diagnostic result then an empty available CTAs will be returned. */
    availableCTAs: definitions['AvailableCTA'][];
  };
  /** The available call to actions */
  AvailableCTA: {
    /** The label for the CTA */
    ctaLabel: string;
    /** The cta type will allow for mapping to be done on the presentation side to ensure the correct CTA can be presented */
    ctaType: 'CONNECTION_TROUBLESHOOTER' | 'CHAT' | 'DIAGNOSTIC_CHECK';
    /** The web link for the article CTA */
    webCTALink?: string;
    /** The mobile action type which will determine which journey/screen the CTA will navigate the user to on selection */
    mobileActionType?: string;
  };
  /** An object representing the basic account and hardware details for the line in question */
  LineDetails: {
    /** The line number that diagnostics where performed on */
    lineNumber: string;
    /** The account name associated with this line */
    accountName: string;
    /** The account number associated with this line */
    accountNumber: string;
    /** The type of product associated with this line */
    productType:
      | 'ADSL_DATA'
      | 'ADSL_DATA_VOICE'
      | 'ADSL_VOICE'
      | 'COPPER_DATA'
      | 'COPPER_DATA_VOICE'
      | 'COPPER_VOICE'
      | 'FIBRE_DATA'
      | 'FIBRE_DATA_VOICE'
      | 'FIBRE_VOICE'
      | 'VDSL_DATA'
      | 'VDSL_DATA_VOICE'
      | 'VDSL_VOICE'
      | 'WIRELESS_RURAL_DATA'
      | 'WIRELESS_RURAL_DATA_VOICE'
      | 'WIRELESS_RURAL_VOICE'
      | 'WIRELESS_URBAN_DATA'
      | 'WIRELESS_URBAN_DATA_VOICE'
      | 'WIRELESS_URBAN_VOICE';
    /** The manufacturer of the modem if known */
    modemManufacturer?: string;
    /** The gateway modem model if known */
    modemModel?: string;
    /** The gateway modem serial number if known */
    modemSerialNumber?: string;
    /** The gateway modem identifier if known */
    modemIdentifier?: string;
    /** A reference to an AEM DAM image resource. */
    modemImage?: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface operations {
  obtainDiagnosticTestResults: {
    parameters: {
      path: {
        lineNumber: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['DiagnosticResultsResponse'];
      };
      /** Performing connection diagnostics on this line is unsupported */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated to this api. */
      401: {
        schema: definitions['Response'];
      };
      /** Unauthorised access to api or connection diagnostic cannot be performed on a locked line. */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
