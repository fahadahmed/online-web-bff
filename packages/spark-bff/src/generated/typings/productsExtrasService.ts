/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/product/{lineNumber}/extras': {
    get: operations['getProductExtras'];
  };
}

export interface definitions {
  ProductExtrasResponse: definitions['Response'] & {
    /** Array of extras available */
    extras: definitions['ExtrasResponse'][];
  };
  ExtrasResponse: {
    product: definitions['Product'];
    action: definitions['Action'];
    /** Indicates whether the extra is free as it's included through some form of eligibility. */
    isIncluded?: boolean;
    /** If the type of extra is included for free, how many of this extra are available. */
    includedCount?: number;
    expiresDate?: string;
    /** Indicates whether the type of extra is already active. */
    isActive?: boolean;
    /** The sequence to show the extras in on the page. */
    viewPriority?: number;
  };
  Product: {
    /** Type of extras in related products array. */
    type: 'Data' | 'Voice' | 'Text' | 'Plan' | 'Speed' | 'Roaming';
    /** ID associated with product grouping */
    groupId:
      | 'SMAR_Bundle_Addon'
      | 'SMAR_Data_Addon'
      | 'SMAR_Text_Addon'
      | 'SMAR_Voice_Addon'
      | 'SMPO_Bundle_Addon'
      | 'SMPO_Data_Addon'
      | 'SMPO_Text_Addon'
      | 'SMPO_Voice_Addon'
      | 'SMPO_Roaming_Addon'
      | 'SMAR_Roaming_Addon'
      | 'SMPO_Speed_Addon';
    /** Offer id of the extra. */
    offerId: string;
    /** Name of the extra from the catalogue. */
    name: string;
    /** Description of extra from catalogue. */
    description: string;
    /** Indicates whether the extra is available for purchase. */
    allowPurchase?: boolean;
    /** Price of the extra from the catalogue. */
    priceInclGST: number;
    /** Price of the extra from the catalogue. */
    priceExclGST: number;
    /** What period the purchase applies to.  Can be daily, monthly, etc. */
    chargePeriod: string;
    /** Indicates if the extra is renewable, and therefore auto-renew is available. */
    isRenewable: boolean;
    /** If the extra, like a roaming pack, includes individual entitlements, these are returned. */
    entitlements?: definitions['Entitlement'][];
  };
  Entitlement: {
    /** Id of the entitlement. */
    id: string;
    /** The display name of the entitlement. */
    name: string;
    /** The display text to show for the entitlement. */
    description: string;
    /** The type of the unit. */
    type: 'Country' | 'Voice' | 'Text' | 'Data' | 'Included';
    /** The number of units of the type of entitlement. */
    unit: number;
    /** The order in which the entitlements should be listed. */
    displayPriority?: number;
  };
  Action: {
    /** Label for the button. */
    label: string;
    /** State to show the button in. */
    state: string;
    /** If an action is pending, as in it was redeemed, but the order hasn't completed. The pending will provide what's inflight. */
    isPending: boolean;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface operations {
  getProductExtras: {
    parameters: {
      path: {
        /** The line number for which the eligible Extra's will be returned. */
        lineNumber: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ProductExtrasResponse'];
      };
      /** The required parameters do not appear to be valid. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to get extras */
      403: {
        schema: definitions['Response'];
      };
      /** The server failed to process the request properly. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
