/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/line/{lineNumber}/details': {
    get: operations['getLineDetails'];
  };
  '/v1/line/{lineNumber}/plan': {
    get: operations['getLinePlan'];
    patch: operations['modifyLine'];
  };
  '/v1/line/{lineNumber}/allowances': {
    get: operations['getLineAllowances'];
  };
}

export interface definitions {
  LineDetails: definitions['Response'] & {
    /** Account number of the line */
    accountNumber?: string;
    /** Status of the account which is associated with the line */
    accountStatus: string;
    /** Alias name from the line access */
    aliasName?: string;
    /** Flag to indicate the change plan is allowed or not */
    allowChangePlan: boolean;
    /** Auto topup details of the line */
    autoTopupDetails?: definitions['AutoTopupDetails'];
    /** Balance management value of account associated with line */
    balanceManagement: 'POSTPAID' | 'PREPAID';
    /** Billing frequency code of the plan associated with this line */
    billingFrequencyCode?: string;
    /** Type of CMO service */
    cmoServiceType?: string;
    /** Contract end date */
    contractEndDate?: string;
    /** Contract renewal type of plan */
    contractRenewalType?: string;
    /** Contract start date */
    contractStartDate?: string;
    /** Contract term frequncy of plan */
    contractTermFrequency?: string;
    /** Contract term value */
    contractTermNumber?: number;
    /** Customer segment of the line */
    customerSegment: string;
    /** Data stack allowance detail list applicable for this plan */
    dataStackAllowances?: definitions['DataStackAllowance'][];
    /** Entitlements of the plan */
    entitlements?: definitions['EntitlementDetails'][];
    /** External promotions of the line */
    externalPromotions?: definitions['ExternalPromotionDetails'][];
    /** Extras associated with the line */
    extras?: definitions['ExtraDetails'][];
    /** Description of the line */
    lineDescription?: string;
    /** Line number */
    lineNumber: string;
    /** Offer id of the plan */
    offerId?: string;
    /** One number details associated with the plan */
    oneNumberDetails?: definitions['OneNumberDetails'];
    /** Price of the plan */
    price: number;
    priceType: string;
    /** Plan product id from hybris catalog */
    productId: string;
    /** Plan product instance id from the Siebel */
    productInstanceId: string;
    /** Plan product name */
    productName: string;
    /** Type of the product */
    planType?:
      | 'ADSL_DATA'
      | 'ADSL_DATA_VOICE'
      | 'ADSL_VOICE'
      | 'COPPER_DATA'
      | 'COPPER_DATA_VOICE'
      | 'COPPER_VOICE'
      | 'FIBRE_DATA'
      | 'FIBRE_DATA_VOICE'
      | 'FIBRE_VOICE'
      | 'LIGHT_BOX'
      | 'MOBILE'
      | 'MOBILE_BROADBAND'
      | 'MOBILE_BROADBAND_POSTPAID_NOTERM'
      | 'MOBILE_BROADBAND_POSTPAID_TERM'
      | 'MOBILE_BROADBAND_PREPAID'
      | 'MOBILE_POSTPAID_DATA_SHARER'
      | 'MOBILE_POSTPAID_NORMAL_SHARER'
      | 'MOBILE_POSTPAID_NOTERM'
      | 'MOBILE_POSTPAID_TERM'
      | 'MOBILE_PREPAID'
      | 'NONE'
      | 'SMARTTECH_WEARABLE_POSTPAID_NOTERM'
      | 'SMARTTECH_WEARABLE_POSTPAID_TERM'
      | 'SMARTTECH_WEARABLE_PREPAID'
      | 'VDSL_DATA'
      | 'VDSL_DATA_VOICE'
      | 'VDSL_VOICE'
      | 'WIRELESS_RURAL_DATA'
      | 'WIRELESS_RURAL_DATA_VOICE'
      | 'WIRELESS_RURAL_VOICE'
      | 'WIRELESS_URBAN_DATA'
      | 'WIRELESS_URBAN_DATA_VOICE'
      | 'WIRELESS_URBAN_VOICE';
    /** Casual rates of the plan */
    rates?: definitions['CasualRate'][];
    /** Sim number associated with the wireless connection. */
    wirelessServiceId?: string;
    /** Plan renewal frequency */
    renewalFrequency?: string;
    /** Auto purchage roaming product details */
    roamingDetails?: definitions['RoamingDetails'];
    /** Auto purchage roaming product details */
    rolloverDetails?: definitions['RolloverDetails'];
    /** Service address */
    serviceAddress?: definitions['Address'];
    /** Service end date */
    serviceEndDate?: string;
    /** Service start date */
    serviceStartDate?: string;
    /** Share plan details associated with the plan */
    sharePlanDetails?: definitions['SharePlanDetails'];
    /** Status of the line */
    status: string;
    /** Plan subscription term */
    subscriptionTermName?: string;
    /** Usage tier details associated with the plan */
    tiers?: definitions['Tier'][];
    /** Plan subscription term validity message */
    validityMessage?: string;
  };
  LinePlan: definitions['Response'] & {
    /** Account number of the line */
    accountNumber?: string;
    /** Status of the account which is associated with the line */
    accountStatus: string;
    /** Alias name from the line access */
    aliasName?: string;
    /** Flag to indicate the change plan is allowed or not */
    allowChangePlan: boolean;
    /** Balance management value of account associated with line */
    balanceManagement: 'POSTPAID' | 'PREPAID';
    /** Billing frequency code of the plan associated with this line */
    billingFrequencyCode?: string;
    /** Type of CMO service */
    cmoServiceType?: string;
    /** Contract end date */
    contractEndDate?: string;
    /** Contract renewal type of plan */
    contractRenewalType?: string;
    /** Contract start date */
    contractStartDate?: string;
    /** Contract term frequncy of plan */
    contractTermFrequency?: string;
    /** Contract term value */
    contractTermNumber?: number;
    /** Customer segment of the line */
    customerSegment: string;
    /** External promotions of the line */
    externalPromotions?: definitions['ExternalPromotionDetails'][];
    /** Description of the line */
    lineDescription?: string;
    /** The high-level business unit responsible for this line */
    lineOfBusiness: string;
    /** The legal category for this line */
    legalCategory?: string;
    /** Line number */
    lineNumber: string;
    /** Offer id of the plan */
    offerId?: string;
    /** One number details associated with the plan */
    oneNumberDetails?: definitions['OneNumberDetails'];
    /** Price of the plan */
    price: number;
    priceType: string;
    /** Plan product id from hybris catalog */
    productId: string;
    /** Plan product instance id from the Siebel */
    productInstanceId: string;
    /** Plan product name */
    productName: string;
    /** Type of the product */
    planType?:
      | 'ADSL_DATA'
      | 'ADSL_DATA_VOICE'
      | 'ADSL_VOICE'
      | 'COPPER_DATA'
      | 'COPPER_DATA_VOICE'
      | 'COPPER_VOICE'
      | 'FIBRE_DATA'
      | 'FIBRE_DATA_VOICE'
      | 'FIBRE_VOICE'
      | 'LIGHT_BOX'
      | 'MOBILE'
      | 'MOBILE_BROADBAND'
      | 'MOBILE_BROADBAND_POSTPAID_NOTERM'
      | 'MOBILE_BROADBAND_POSTPAID_TERM'
      | 'MOBILE_BROADBAND_PREPAID'
      | 'MOBILE_POSTPAID_DATA_SHARER'
      | 'MOBILE_POSTPAID_NORMAL_SHARER'
      | 'MOBILE_POSTPAID_NOTERM'
      | 'MOBILE_POSTPAID_TERM'
      | 'MOBILE_PREPAID'
      | 'NONE'
      | 'SMARTTECH_WEARABLE_POSTPAID_NOTERM'
      | 'SMARTTECH_WEARABLE_POSTPAID_TERM'
      | 'SMARTTECH_WEARABLE_PREPAID'
      | 'VDSL_DATA'
      | 'VDSL_DATA_VOICE'
      | 'VDSL_VOICE'
      | 'WIRELESS_RURAL_DATA'
      | 'WIRELESS_RURAL_DATA_VOICE'
      | 'WIRELESS_RURAL_VOICE'
      | 'WIRELESS_URBAN_DATA'
      | 'WIRELESS_URBAN_DATA_VOICE'
      | 'WIRELESS_URBAN_VOICE';
    /** Casual rates of the plan */
    rates?: definitions['CasualRate'][];
    /** Sim number associated with the wireless connection. */
    wirelessServiceId?: string;
    /** Plan renewal frequency */
    renewalFrequency?: string;
    /** Service address */
    serviceAddress?: definitions['Address'];
    /** Service start date */
    serviceStartDate?: string;
    /** An enum that indicates whether this plan is currently shared in some manner */
    sharerType: 'NOT_SHARED' | 'LEADER' | 'SHARER';
    /** Status of the line */
    status: string;
    /** Plan subscription term */
    subscriptionTermName?: string;
    /** Usage tier details associated with the plan */
    tiers?: definitions['Tier'][];
    /** Plan subscription term validity message */
    validityMessage?: string;
  };
  Address: {
    /** Building name */
    buildingName?: string;
    /** Delivery Point ID of address */
    dpid?: string;
    /** Electronic Location Identification Number value of the address */
    elid: string;
    /** Latitude value of address */
    latitude?: string;
    /** Level number in address */
    levelNumber?: string;
    /** Level type in address */
    levelType?: string;
    /** Locality of address */
    locality?: string;
    /** Longitude of the address */
    longitude?: string;
    /** Postal code value */
    postcode?: string;
    /** Street name in address */
    streetName?: string;
    /** Street number first */
    streetNumberFirst?: string;
    /** Street number first suffix value */
    streetNumberFirstSuffix?: string;
    /** Street number last value */
    streetNumberLast?: string;
    /** Street suffix value */
    streetSuffix?: string;
    /** Type of the street */
    streetType?: string;
    /** Sub unit number */
    subUnitNumber?: string;
    /** Sub unit type */
    subUnitType?: string;
    /** Name of the town or city */
    townOrCity?: string;
    /** Tui value of the address */
    tui?: string;
  };
  AutoPurchase: {
    /** Description of auto purchase pack */
    description: string;
    /** Auto purchase setting details */
    settings?: definitions['AutoPurchaseSetting'];
    /** Title of the auto purchase */
    title: string;
  };
  AutoPurchaseSetting: {
    /** Name of the settings */
    name: string;
    /** Product details associated with the auto purchase */
    valueOffers: definitions['Product'][];
    /** Value of the auto purchase setting */
    valueText: string;
  };
  AutoTopupDetails: {
    /** Topup settings associated with the line */
    topupSettings: definitions['TopupSetting'][];
  };
  TopupSetting: {
    /** Card details associated with the topup setting */
    cardDetails: definitions['CardDetails'];
    /** Maximum monthly topup limit for low balance payment preference */
    monthlyTopupLimit?: number;
    /** Upcoming payment date of the RT and RT28 payment preference */
    nextPaymentDate?: string;
    /** Id of payment method/setup */
    paymentMethodId: string;
    /** Payment method type of the payment setup */
    paymentMethodType: string;
    /** Payment preference type of the topup setting */
    paymentPreferenceType: string;
    /** Threshlold amount to trigger low balance auto topup payment preference */
    thresholdAmount?: number;
    /** Topup amount of the topup setting */
    topupAmount: number;
    /** Topup day of RT payment preference */
    topupDay?: number;
  };
  CardDetails: {
    /** Month of card expiry */
    expiryMonth: string;
    /** Year of card expiry */
    expiryYear: string;
    /** Issuer of the card */
    issuer: string;
    /** Issuer of the card */
    lastFourDigits: string;
  };
  CasualRate: {
    /** Name of the casual rate */
    name: string;
    /** Value of the casual rate */
    value: string;
  };
  Country: {
    /** Country code value */
    code: string;
    /** Name of the country */
    name: string;
    /** Network type supported in country */
    network?: string;
  };
  DataStackAllowance: {
    /** Limit of the data stack allowance */
    capLimit: number;
    /** Status of the data stack entitlement */
    endDateTime: string;
    /** Id of the data stack entitlement */
    id: string;
    /** Remaining from data stack allowance */
    remainingVolume: number;
    /** Start date of the data stack entitlement */
    startDateTime: string;
    /** Status of the data stack entitlement */
    status: 'ACTIVE' | 'GRACE';
    /** Used data from the data stack */
    usedVolume?: number;
    /** Type/Unit of the volume */
    volumeType: 'KB' | 'MB' | 'GB';
  };
  EntitlementDetails: {
    /** Description of entitlement */
    description?: string;
    /** Detailed description of entitlement */
    detailedDescription?: string;
    /** Display priority of entitlement */
    displayPriority?: number;
    /** Id of the entitlement */
    id: string;
    /** Name of the entitlement */
    name: string;
    /** Quantity of the entitlement */
    quantity?: number;
    /** Subtype of the entitlement */
    subtype?: string;
    /** The throttle message of the entitlement */
    throttleMessage?: string;
    /** True, if unlimited quantity */
    unlimited: boolean;
    /** Type of the entitlement */
    usageType: string;
    /** The unit of the quantity */
    entitlementQuantityUnit?: 'GB' | 'MB' | 'MIN' | 'TEXT' | 'MBPS';
  };
  ExternalPromotionDetails: {
    /** Description of the promotion */
    description?: string;
    /** Redirect url to manage the promotion */
    redirectUrl?: string;
    /** Features of the promotions */
    features?: string[];
    /** Name of the promotion */
    name: string;
    /** Offer id of the promotion */
    offerId: string;
    /** Promotion id associated with the promotion partner */
    partnerPromotionId?: string;
    /** Product id of the promotion product in online catalogue */
    productId: string;
    /** Product instance id of the promotion product */
    productInstanceId?: string;
    /** Service start date of the promotion */
    serviceStartDate?: string;
    /** Status of the promotion */
    state?: 'Activated' | 'Enrolled' | 'Pending Enrol' | 'PreActive';
    /** Status of the promotion */
    status: string;
    /** Type of the external promotion */
    type: 'NETFLIX' | 'SKYFANPASS';
    /** Version of the promotion */
    version: 'V1' | 'V2' | 'V3';
  };
  ExtraDetails: {
    /** The optional number of this type of extra that the customer allowed to have available to activate. */
    allowedCount?: number;
    /** The number of this type of extra that the customer currently has available to activate. */
    availableCount?: number;
    /** Billing frequency code */
    billingFrequencyCode?: string;
    /** Billing frequency name */
    billingFrequencyName?: string;
    /** Contract renewal type */
    contractRenewalType?: string;
    /** Contract term frequency */
    contractTermFrequency?: string;
    /** Contract term number */
    contractTermNumber?: number;
    countries?: definitions['Country'][];
    /** Display priority of extra */
    displayPriority?: number;
    /** Entitlements of the extra */
    entitlements?: definitions['EntitlementDetails'][];
    /** Flag to indicate the extra is renewable or not */
    renewable?: boolean;
    /** Offer id of the extra */
    offerId: string;
    /** End date of the subscription */
    periodEndDate?: string;
    /** Flag to indicate the addon/extra product is prepaid base plan value pack */
    prepaidBasePlanValuePack: boolean;
    /** Price of the extra product */
    price?: number;
    /** Price type of the extra */
    priceType?: string;
    /** Product id of the extra */
    productId: string;
    /** Product instance id of the extra */
    productInstanceId: string;
    /** Name of the product */
    productName: string;
    /** Renewal frequency of the extra */
    renewalFrequency?: string;
    /** Renewal state of the extra */
    renewalState?: 'GUARANTEE_RENEWAL' | 'OFF' | 'ON' | 'PENDING_PAYMENT';
    /** Status of the extra */
    status: string;
    /** Subscription term name */
    subscriptionTermName?: string;
    /** Subtype of the extra */
    subtype: 'DOMESTIC' | 'ROAMING';
    /** Type of extra */
    type: string;
    /** Usage type of the extra */
    usageType?: string;
  };
  LineAllowances: definitions['Response'] & {
    /** Data stack allowance detail list applicable for this plan */
    dataStackAllowances?: definitions['DataStackAllowance'][];
    /** Entitlements of the plan */
    entitlements?: definitions['EntitlementDetails'][];
    /** Extras associated with the line */
    extras?: definitions['ExtraDetails'][];
    /** Auto purchase roaming product details */
    rolloverDetails?: definitions['RolloverDetails'];
    /** Share plan details associated with the plan */
    sharePlanDetails?: definitions['SharePlanDetails'];
    /** The information about the speed allowance associated with the plan. */
    speedAllowances?: definitions['SpeedAllowancesDetails'];
  };
  OneNumberDetails: {
    /** Flag to identify the primary line */
    primaryLine: boolean;
    /** Primary line number of one number plan */
    primaryLineNumber: string;
    /** Secondary lines associated with the line */
    secondaryLines?: definitions['SecondaryLine'][];
  };
  RoamingDetails: {
    /** Roaming auto purchase details */
    autoPurchase?: definitions['AutoPurchase'];
  };
  Product: {
    /** Activation description of the product */
    activationDescription: string;
    /** Period information of pack */
    chargePeriod: string;
    /** List of pack applicable countries */
    countries: definitions['Country'][];
    /** description of the pack */
    description?: string;
    /** Id of the product */
    id: string;
    /** Name of the product */
    name: string;
    /** Offer id of the product */
    offerId: string;
    /** Price of the product */
    price?: number;
    /** Price type of the product */
    priceType?: string;
    /** Usage description of the product */
    usageDescription?: string;
  };
  RolloverDetails: {
    /** List of rollover allowance detail */
    rolloverAllowances?: definitions['RolloverAllowance'][];
  };
  RolloverAllowance: {
    /** Remaining amount from roll over allowance */
    remainingAmount: number;
    /** Remaining amount unit of roll over allowance */
    remainingUnit: string;
    /** List of roll over allowance details */
    rolloverExpiry?: definitions['RolloverExpiry'][];
    /** Rollover priority value */
    rolloverPriority?: number;
    /** Status of the rollover */
    rolloverStatus?: string;
    /** Type of the rollover */
    rolloverType?: string;
    /** Type of usage */
    usageType: string;
  };
  RolloverExpiry: {
    /** Value of expiry amount */
    expiryAmount: number;
    /** Expiry amount unit */
    expiryAmountUnit: string;
    /** Expiry date time */
    expiryDate: string;
  };
  SecondaryLine: {
    /** line number of secondary line */
    lineNumber: string;
  };
  SharePlanDetails: {
    /** Group id of the share plan */
    groupId?: string;
    /** List of lines shared the share plan */
    lines?: definitions['SharePlanLineDetails'][];
    /** Share plan type of the current plan */
    type?: definitions['SharePlanType'];
  };
  SharePlanLineDetails: {
    /** Line number of the sharer plan */
    lineNumber: string;
    /** Plan name of the line */
    planName?: string;
    /** Service id of the sharer line */
    serviceId: string;
    /** Sharer type */
    sharerType?: 'DATA' | 'MOBILE';
    /** Sharer line type */
    type: definitions['SharePlanType'];
  };
  SharePlanType: 'LEADER' | 'SHARER';
  Tier: {
    /** Lower value of the tier */
    lowerValue: number;
    /** Amount value of the tier */
    price?: number;
    /** Upper value of the tier */
    upperValue?: number;
  };
  UsageUnit: {
    /** Id of the usage unit */
    id: string;
    /** Name of the usage unit */
    name: string;
    /** Name of the usage unit for more than one value */
    nameInPlural: string;
  };
  /** Includes neccessary information for modifyLine */
  ModifyLineRequest: {
    /** The billing reference identifier. */
    billingReference?: string;
    /** Name of the cost centre to record change costs against. */
    billingCostCentre?: string;
    /** A list of optional contact details that holds details of the person who requested the change and the effected user (if not the requestor). */
    contacts?: definitions['Contact'][];
    /** Notes regarding the change request for recording in the downstream systems. */
    generalNotes?: string;
    /** The date that the line termination is requested for. */
    terminationDateTime: string;
    /** The reason for the termination request. */
    terminationReason: string;
  };
  /** The contact details for the person who should be notified about the fulfilment status of this termination request. */
  Contact: {
    /** The first name of the contact. */
    firstName: string;
    /** The last name of the contact. */
    lastName: string;
    /** Name of the Company that is associated with the contact */
    companyName?: string;
    /** Attention line for a delivery address if required */
    deliveryAttention?: string;
    /** Delivery address for the contact, identified by ELID */
    deliveryAddressElid?: string;
    /** The email address of the contact. */
    email?: string;
    /** The alternative phone number of the contact. */
    alternativePhoneNumber?: string;
    /** The mobile phone number of the contact. */
    mobilePhoneNumber?: string;
    /** The work phone number of the contact. */
    workPhoneNumber?: string;
    /** The notification channel */
    notificationChannel?: 'EMAIL' | 'SMS' | 'BOTH' | 'NONE';
    /** Type of contact */
    type: 'DELIVERY' | 'OWNER' | 'USER';
  };
  ModifyLineResponse: definitions['Response'] & {
    /** The order reference number associated with the modifyLine request. */
    orderId: string;
    /** Description of the order type and fulfilment process. */
    description: string;
    affectedProducts: definitions['AffectedProduct'][];
    /** An array of next steps that the customer should follow. */
    nextSteps: string[];
  };
  /** The product primarily affected by this order and its subsequent fulfilment request. */
  AffectedProduct: {
    /** The product identifier */
    productId: string;
    /** The type of product that will be affected. */
    productType: 'LINE' | 'DEVICE';
    /** Description of the affected product. */
    description: string;
  };
  SpeedAllowancesDetails: {
    /** The status of the speed allowance */
    status: 'DEFAULT' | 'ACTIVE' | 'NEXT';
    /** The optional current speed cap limit associated with the plan in the unit of measure specified by the unitType attribute. */
    capLimit?: number;
    /** The optional string representing the type of units the speed cap is measured by. */
    unitType?: string;
    /** The optional identifier of the product associated with the speed allowance */
    offerId?: string;
    /** The optional name of the product associated with the speed allowance */
    productName?: string;
    /** The optional type of product associated with this speed allowance */
    allowanceType?: string;
    /** Expiry date time */
    expiryDateTime?: string;
    /** The optional data allowance remaining if the speed allowance is expired after a certain amount of data is consumed. */
    allowanceRemainingAmount?: number;
    /** The optional unit of measure for a speed allowance that is expired after a certain amount of data is consumed. */
    allowanceRemainingUnit?: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  /** The line number to retrieve the details */
  lineNumber: string;
}

export interface operations {
  getLineDetails: {
    parameters: {
      path: {
        /** The line number to retrieve the details */
        lineNumber: parameters['lineNumber'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['LineDetails'];
      };
      /** The provided token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to access the line */
      403: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getLinePlan: {
    parameters: {
      path: {
        /** The line number to retrieve the details */
        lineNumber: parameters['lineNumber'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['LinePlan'];
      };
      /** The provided token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to access the line */
      403: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  modifyLine: {
    parameters: {
      path: {
        /** The line number that is nominated */
        lineNumber: string;
      };
      body: {
        /** Modifyline request details of the nominated line */
        modifyLineRequest: definitions['ModifyLineRequest'];
      };
    };
    responses: {
      /** Accepted */
      202: {
        schema: definitions['ModifyLineResponse'];
      };
      /** Invalid input */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Unauthorised access */
      403: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
      /** Not implemented */
      501: {
        schema: definitions['Response'];
      };
    };
  };
  getLineAllowances: {
    parameters: {
      path: {
        /** The line number to retrieve the details */
        lineNumber: parameters['lineNumber'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['LineAllowances'];
      };
      /** The provided token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to access the line */
      403: {
        schema: definitions['Response'];
      };
      /** Plan details could not be found */
      404: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
