/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/products/category/{categoryId}/details': {
    get: operations['fetchProductDetailsByCategoryId'];
  };
  '/v1/products/offers/details': {
    get: operations['fetchProductDetails'];
  };
  '/v1/products/offers/search': {
    post: operations['fetchCompatibleProductDetails'];
  };
  '/v1/products/offers/subscriptions/search': {
    post: operations['fetchCompatibleSubscriptionProductDetails'];
  };
  '/v2/products/offers/subscriptions/me': {
    get: operations['fetchCompatibleGroupedSubscriptionProductDetails'];
  };
  '/v2/products/offers/subscriptions/lines/{lineNumber}/{productInstanceId}': {
    get: operations['fetchEligibleSubscriptionProductDetails'];
  };
  '/v1/products/category/{categoryId}/filters': {
    get: operations['fetchProductFilters'];
  };
  '/v1/products/group/{groupId}/variants': {
    get: operations['fetchProductVariantByGroupId'];
  };
  '/v1/products/offers/deviceaddons/search': {
    post: operations['fetchCompatibleDeviceAddonsProductDetails'];
  };
  '/v1/products/offers/plans/search': {
    post: operations['fetchCompatiblePlanProductDetails'];
  };
  '/v1/products/offers/ifp/search': {
    post: operations['fetchCompatibleIfpProductDetails'];
  };
  '/v1/products/promotions/mpd/search': {
    post: operations['fetchMultipleProductDiscountPromotionsDetails'];
  };
  '/v2/products/offers/plans/lines/{lineNumber}': {
    get: operations['fetchEligiblePlanProductDetails'];
  };
  '/v2/products/offers/extras/lines/{lineNumber}': {
    get: operations['getExtrasByLineNumber'];
  };
  '/v2/products/offers/extras/lines/{lineNumber}/roaming': {
    get: operations['getRoamingExtrasByLineNumber'];
  };
  '/v1/products/offers/plans/comparison/subscriptions': {
    get: operations['retrieveSubscriptionsComparison'];
  };
  '/v1/products/offers/plans/comparison/mpd': {
    get: operations['fetchCustomerLevelMultiProductDiscount'];
  };
  '/v1/products/eligibility/plans/{offerId}/me/lines': {
    get: operations['fetchEligibleLinesToChange'];
  };
  '/v1/products/eligibility/wearables/{offerId}/me/lines': {
    get: operations['fetchEligibleWearableLinesToChange'];
  };
  '/v1/products/promotions/mpd/search/internal': {
    post: operations['fetchMultipleProductDiscountPromotionsDetailsInternally'];
  };
  '/v2/products/offers/extras/lines/{lineNumber}/categories': {
    get: operations['getExtrasGroupedByCategory'];
  };
}

export interface definitions {
  SubscriptionsComparisonResponse: definitions['Response'] &
    definitions['SubscriptionsComparisonDetail'];
  SubscriptionsComparisonDetail: {
    /** The array object to hold changes for each subscription. */
    comparisons: definitions['Comparison'][];
  };
  Comparison: {
    /** The unique identifier for the recommendation. */
    recommendationId: string;
    /** The subscriptions which are no longer available. */
    unavailable?: definitions['UnavailableSubscriptions'];
    /** The subscriptions which are now available. */
    available?: definitions['AvailableSubscriptions'];
    /** The actions to be taken on the subscription. */
    ctas?: definitions['CtaComparison'][];
  };
  UnavailableSubscriptions: {
    /** The offerId of the unavailable subscription */
    offerId: string;
  };
  AvailableSubscriptions: {
    /** The offerId of the available subscription */
    offerId: string;
  };
  CtaComparison: {
    /** The action type. */
    type: 'INFORM' | 'KEEP' | 'CANCEL';
  };
  FetchEligibleProductDetailsResponse: definitions['Response'] &
    definitions['OfferDetails'] & {
      /** Array of notifications to be presented to frontend. */
      notifications?: definitions['Notification'][];
    };
  FetchCompatibleGroupedSubscriptionProductDetailsResponse: definitions['Response'] & {
    /** The array object to hold subscription details. */
    subscriptions: definitions['Subscription'][];
  };
  FetchCustomerLevelMultiProductDiscountResponse: definitions['Response'] &
    definitions['MpdCartResponse'] &
    definitions['ExistingPlansResponse'];
  Subscription: definitions['OfferDetails'] & {
    /** The title of subscription. */
    name: string;
    /** The lines that the product offer is eligible for. */
    lineNumbers?: string[];
    /** The accounts that the product offer is eligible for. */
    accountNumbers?: string[];
    /** The Call to Action displayed to user. */
    ctas?: definitions['Cta'][];
  };
  /** The available call to actions. */
  Cta: {
    /** The type of Call to Action. */
    type: 'ADD';
    /** The formatted label of the Call to Action. */
    label: string;
  };
  ProductDetailByCategoryResponse: definitions['Response'] & {
    category: definitions['Category'];
  };
  Category: definitions['OfferDetails'] & {
    /** Id of the category */
    id: string;
    /** Name of the category */
    name: string;
    /** Description of the category */
    description?: string;
    /** False if contains offer details, True if contains subcategories */
    isCategoryContainer: boolean;
    /** Boolean to decide if this has to be visible to online or not. */
    visibility?: boolean;
    /** Boolean that indicates if this has to be selected by default. */
    defaultSelected?: boolean;
    /** Represents the sorting order. */
    sortOrder?: number;
    /** List of SubCategory objects */
    subCategories?: definitions['SubCategory'][];
  };
  ProductDetailByOfferIdsResponse: definitions['Response'] &
    definitions['OfferDetails'];
  FetchCompatibleProductDetailsRequest: {
    /** The unique identifier of cart id */
    cartId?: string;
    /** This would indicate that the cart does not exist but compatibility is required. */
    simulated?: boolean;
    /** The array objects to hold bundle details. */
    bundles: definitions['BundleDetail'][];
  };
  FetchCompatibleProductDetailsResponse: definitions['Response'] &
    definitions['CompatibleProductDetail'];
  FetchMultipleProductDiscountPromotionsDetailsResponse: definitions['Response'] &
    definitions['CartDetails'];
  CartDetails: {
    /** The unique identifier of the cart in blue marble. */
    cartId: string;
    /** The array of cart price objects. */
    price?: definitions['CartPrice'][];
    bundles?: definitions['CartBundle'][];
  };
  /** The price information. */
  CartPrice: {
    /** The price type. */
    priceType: 'Recurring' | 'OneOff';
    frequency?: definitions['Frequency'];
    /** The actual price of the product. */
    basePrice: number;
    /** The final price of the product calculated after deducting the discount(both percentage and flat). */
    effectivePrice: number;
    /** Same as basePrice but excluding tax. */
    basePriceExcludingTax?: number;
    /** Same as effectivePrice but excluding tax. */
    effectivePriceExcludingTax?: number;
    discount?: definitions['Discount'];
  };
  /** The discount information. */
  Discount: {
    /** The name of the discount. */
    name: string;
    /** The discount description. */
    description: string;
    /** The unit used to represent discount. */
    discountType: 'Percentage' | 'Flat';
    /** The amount of discount applied. */
    appliedValue: number;
    /** Same as appliedValue but excluding tax. */
    appliedValueExcludingTax?: number;
    /** The discount category identified from the promotions applicable. */
    discountCategory: string;
    /** The value reduced as a result of the discount. */
    discountedValue: number;
    /** Same as discountedValue but excluding tax. */
    discountedValueExcludingTax?: number;
  };
  /** Represents a bundled product. */
  CartBundle: {
    /** The index of each Cart Bundle within cart data starting from 1. */
    index?: number;
    /** The unique identifier of Cart Bundle. */
    id: string;
    category?: definitions['CartCategory'];
    /** The array of cart bundle price objects. */
    price: definitions['CartPrice'][];
    items: definitions['BundleEntry'][];
  };
  CartCategory: {
    /** The category id. */
    id: string;
    /** The category name. */
    name: string;
  };
  /** Represents a product. */
  BundleEntry: {
    /** The index of each entry/item of the Cart Bundle starting from 1. */
    index: number;
    /** The unique identifier of bundle entry. */
    id: string;
    /** Represents the quantity or the number of products. */
    quantity?: number;
    /** The array of bundle entry price objects. */
    price: definitions['CartPrice'][];
    /** The product offering id. */
    productOfferingId: string;
    /** Balance management of the account. */
    balanceManagement?: 'PREPAID' | 'POSTPAID';
    /** The product categories. */
    category?: string[];
  };
  ProductFilterResponse: definitions['Response'] & {
    /** Total count of the results. */
    count: number;
    /** Array to hold the filter objects. */
    filters: definitions['ProductFilter'][];
  };
  ProductFilter: {
    /** The name of the filter */
    name: string;
    /** Array to hold the options. */
    options: definitions['FilterOption'][];
  };
  FilterOption: {
    /** The name of the option */
    name: string;
    /** The count of results under this option. */
    count: number;
  };
  ProductVariantResponse: definitions['Response'] & definitions['OfferDetails'];
  CompatibleProductDetail: {
    /** The array object to hold bundle details. */
    bundles: definitions['Bundle'][];
  };
  Bundle: definitions['OfferDetails'] & {
    /** The unique identifier of bundle id */
    id: string;
  };
  BundleDetail: {
    /** The unique identifier of cart, bundle or item id */
    id?: string;
    /** The category corresponding to the bundle */
    categoryId?: string;
    /** The array objects to hold item details. */
    items: definitions['ItemDetail'][];
  };
  ItemDetail: {
    /** The unique identifier of item id */
    id?: string;
    /** The offering id whose related products are to be fetched. */
    offeringId?: string;
  };
  /** Sub category */
  SubCategory: {
    /** Id of a particular offer */
    id: string;
    /** Name of the offer */
    name: string;
    /** Boolean to decide if this has to be visible to online or not. */
    visibility?: boolean;
    /** Boolean that indicates if this has to be selected by default. */
    defaultSelected?: boolean;
    /** Represents the sorting order. */
    sortOrder?: number;
    /** False if contains offer details, True if contains subcategories */
    isCategoryContainer?: boolean;
    /** List of SubCategory objects */
    subCategories?: definitions['SubCategory'][];
    /** List of offer detail objects. */
    offerDetails?: definitions['OfferDetail'][];
  };
  OfferDetails: {
    /** List of OfferDetail objects */
    offerDetails: definitions['OfferDetail'][];
  };
  /** Offer Detail objects (not anchorCategory) */
  OfferDetail: {
    /** Unique identifier of a particular offer */
    id: string;
    /** True indicates that the product is grandFathered. */
    grandFathered?: boolean;
    /** Type of the product. */
    productType?: string;
    /** The e2e identifier of the product */
    externalId?: string;
    /** Name of the offer */
    name: string;
    /** Description of the offer */
    description?: string;
    /** The launch date of the product */
    launchDate?: string;
    /** Array of Categories */
    category?: definitions['CategoryRef'][];
    contractTerm?: definitions['Term'];
    /** The journeyStepId value to associate with the product. This additional information in the form of text, lists and links to be displayed to the customer in an information sidebar. */
    contentKey?: string;
    /** The container object for price details. */
    price?: definitions['Price'];
    /** Array of Associated prices other than the base price */
    associatedPrices?: definitions['Price'][];
    /** Container to hold the product group information. */
    group?: definitions['Group'];
    /** Array of image details */
    images?: definitions['Image'][];
    /** Array of entitlement details */
    entitlements?: definitions['Entitlement'][];
    /** The promotions associated with the product. */
    promotions?: definitions['Promotion'][];
    /** The container object for product features. */
    productFeatures?: definitions['ProductFeature'];
    /** Container to hold productCharacteristics */
    productCharacteristics?: definitions['ProductCharacteristic'];
    /** Array of rules */
    associatedPriceRules?: definitions['AssociatedPriceRule'][];
    /** The container object to hold stock details. */
    stock?: definitions['Stock'];
    /** Array to hold the specification objects like display specs, camera specs etc */
    productSpecifications?: definitions['ProductSpecification'][];
    /** Array to hold the information to override CTAs in UI. */
    ctaOverrides?: definitions['CtaOverride'][];
    /** The supported list of destinations in ISO Alpha-3 country code format */
    supportedDestinations?: string[];
    /** The container object to hold default plan details. */
    defaultPlan?: definitions['OfferDetail'];
    /** The container object to hold default price details. */
    defaultPrice?: definitions['Price'];
    /** The container object to hold default term details. */
    defaultTerm?: definitions['Term'];
  };
  Term: {
    /** The name of the contract term. */
    name?: string;
    /** The description of the contract term. */
    description?: string;
    /** The value of the contract term. */
    value: number;
    /** The unit representation of the contract term. */
    unit: 'Hour' | 'Day' | 'Week' | 'Month' | 'Year';
  };
  ProductSpecification: {
    /** The Name of the specification */
    name: string;
    /** Array to hold the values of specifications. */
    values: definitions['Value'][];
    /** the sort order of the specification */
    sortOrder?: number;
  };
  CtaOverride: {
    /** The type of CTA. */
    type: string;
    /** The label of CTA. */
    label?: string;
    /** The segment which this CTA override applies to. */
    segment?: 'CONSUMER' | 'BUSINESS';
    /** The data which can be configured to drive the CTA process (links/urls). */
    data?: string;
    /** The related digital component/page that this CTA override relates to. */
    relatesTo?: string;
    /** The sort order of the CTA within the given product set. */
    sortOrder?: number;
    /** The type of styling to apply to the CTA. */
    style?: 'PRIMARY' | 'SECONDARY';
  };
  Value: {
    /** The Name of the specification */
    value: string;
    /** The group name under which specs can be to grouped together */
    group?: string;
    /** the sort order of the value */
    sortOrder?: number;
  };
  Stock: {
    /** Identifies the overall Stock status. */
    status: definitions['StockStatus'];
    /** Identifies the store Stock status. */
    storeStatus: definitions['StockStatus'];
    /** Identifies the warehouse Stock status. */
    warehouseStatus: definitions['StockStatus'];
  };
  StockStatus: 'IN_STOCK' | 'OUT_OF_STOCK';
  AssociatedPriceRule: {
    /** The description of the rule. */
    description: string;
    /** The unique identifier of the rule. */
    pricePointID: string;
    /** Whether its IFP or Regular rule */
    ruleType: 'IFP' | 'REGULAR';
    /** Array of OfferDetail Objects. */
    sources: definitions['OfferDetail'][];
    /** The container object for price details. */
    price: definitions['Price'];
  };
  ProductFeature: {
    /** The color name provided by the manufacturer. */
    color?: string;
    /** A more generic color classification. */
    primaryColor?: string;
    /** the color of the product in hexcode format. */
    colorHex?: string;
    /** the brand name. */
    brand?: string;
    /** The network band supported by the device. */
    band?: string;
    /** The storage capacity of the device in GB. */
    storage?: string;
  };
  ProductCharacteristic: {
    /** True if the product is shippable. */
    isShippable?: boolean;
    /** the vas type. */
    entitledEntity?: 'LINE' | 'ACCOUNT';
    /** Identifies partner id of subscription. This value used for downstrean orchestration. ie. for activation flows */
    partnerId?: string;
    /** True is the product supports IFP. */
    isDeferrable?: boolean;
    /** True if the subscription is included or can be purchased standalone. */
    isIncluded?: boolean;
    /** Identifies the base subscription plan if applicable. */
    basePlanOfferId?: string;
    /** True if this offer is already part of the cart. */
    addedInCart?: boolean;
    /** True indicates that the product is a featured Product. */
    isFeatured?: boolean;
    /** True indicates that the product can be sold separately as a standalone product without plans. */
    soldSeparately?: boolean;
    /** PREPAID or POSTPAID */
    balanceManageMent?: 'PREPAID' | 'POSTPAID';
  };
  CategoryRef: {
    /** Offer details category */
    id: string;
  };
  /** Container to hold the product group information */
  Group: {
    /** An identifier which groups related offer ids. */
    id: string;
    /** a display name of the group */
    name: string;
    /** description of the group */
    description?: string;
    /** a sort order (or effectively a rank) used in scenarios where related offer positioning is important. For example, subscriptions. */
    sortOrder?: number;
    /** Array of image details */
    images?: definitions['Image'][];
    /** Identifies if this produst is the default amongst the group. */
    isDefault?: boolean;
  };
  Image: {
    /** description about the image, can be used as alternate message. */
    description?: string;
    /** the unique identifier of the image */
    id?: string;
    /** the sort order for the promotion and this need not be in sequence. This can be used to display the images in certain order, the lowest values come first. */
    sortOrder?: number;
    /** the default image url */
    defaultUrl?: string;
    /** the url of the zoomed image */
    zoomUrl?: string;
    /** the url of the standard image */
    standardUrl?: string;
    /** the url of the thumbnail */
    thumbnailUrl?: string;
    /** the tiny url */
    tinyUrl?: string;
    /** The type of image. */
    type?:
      | 'LOGO'
      | 'PRODUCT'
      | 'GALLERY'
      | 'FEATURED'
      | 'SHOWCASE'
      | 'BACKGROUND'
      | 'OTHER';
  };
  Entitlement: {
    /** The name of the entitlement. */
    name: string;
    /** The journeyStepId value to associate with the entitlement. This additional information in the form of text, lists and links to be displayed to the customer in an information sidebar. */
    contentKey?: string;
    /** The short description about the entitlement. */
    shortDescription?: string;
    /** The long description about the entitlement */
    longDescription?: string;
    /** the count of the entitlement provided */
    quantity?: string;
    /** the url if the image icon for the entitlement */
    iconUrl?: string;
    /** the sort order for the entitlement. need not be a sequence. */
    sortOrder?: number;
    /** The type of the entitlement. */
    type?: string;
  };
  Promotion: {
    /** the name of the promotion. */
    name: string;
    /** The journeyStepId value to associate with the promotion. This additional information in the form of text, lists and links to be displayed to the customer in an information sidebar. */
    contentKey?: string;
    /** the type of promotion. */
    productType: 'MARKETING' | 'DEAL' | 'CHARACTERISTIC' | 'FEATURE';
    /** the short description about the promotion. */
    shortDescription?: string;
    /** the long description about the promotion. */
    longDescription?: string;
    /** the sort order for the promotion.need not be in sequence.. */
    sortOrder?: number;
    /** The icon image url */
    iconUrl?: string;
  };
  Price: {
    /** Price type of the product */
    priceType: string;
    /** Frequency */
    frequency?: definitions['Frequency'];
    /** The actual price of the product */
    basePrice?: number;
    /** Same as base price with tax deducted, to be shown where gst exclusive price is required. */
    basePriceExcludingTax?: number;
    /** The actual price of the product incase a rule changes the base price. */
    effectivePrice?: number;
    /** Same as effective price with tax deducted, to be shown where gst exclusive price is required */
    effectivePriceExcludingTax?: number;
    /** The credit amount applied to the product */
    creditAmount?: number;
    /** Same as credit amount with tax deducted, to be shown where gst exclusive price is required */
    creditAmountExcludingTax?: number;
    /** Tax percentage */
    taxPercentage?: string;
    /** The application duration of this price. Only required if the price is applicable to a certain duration. */
    length?: number;
    /** The price description used for display on the product card. */
    description?: string;
  };
  Frequency: {
    /** Indicates the frequency values. */
    period: 'Hour' | 'Day' | 'Week' | 'Month' | 'Year';
    /** The value of the frequency. This is to indicate frequencies like 4 weekly. */
    value: number;
  };
  ExistingPlansResponse: {
    /** List of Existing Plans. */
    existingPlans?: definitions['ExistingPlanDetails'][];
  };
  ExistingPlanDetails: definitions['CommonProductDetails'] & {
    currentPrice?: definitions['CartPrice'];
    updatedPrice?: definitions['CartPrice'];
  };
  /** Represents a common product information */
  CommonProductDetails: {
    /** Unique identifier of a particular offer */
    productOfferingId: string;
    /** The e2e identifier of the product */
    externalId: string;
    /** Name of the offer */
    name: string;
    /** The description of the product */
    description?: string;
    /** The action type */
    action: 'keep' | 'modify' | 'add' | 'delete';
  };
  MpdCartResponse: {
    cart: definitions['MpdCartDetails'];
  };
  MpdCartDetails: {
    /** The unique identifier of the cart in blue marble. */
    cartId: string;
    bundles?: definitions['MpdCartBundleResponse'][];
  };
  /** Represents a bundled product in the cart along with the plan indicated as add or remove offer. */
  MpdCartBundleResponse: {
    /** The unique identifier of Cart Bundle. */
    id?: string;
    /** The line number of the product */
    lineNumber?: string;
    items?: definitions['MpdBundleEntryResponse'][];
  };
  MpdBundleEntryResponse: definitions['CommonProductDetails'] & {
    /** The unique identifier of bundle entry. */
    id?: string;
    price?: definitions['CartPrice'];
  };
  EligibleLine: {
    /** The account number associated with the eligible line number. */
    accountNumber: string;
    /** The line number that the product offer is eligible for. */
    lineNumber: string;
    /** The current plan offer ID associated to the eligible line number. */
    offerId: string;
    /** The customer-facing name of the current plan associated to the eligible line number. */
    offerName: string;
  };
  EligibleLines: {
    /** List of eligibleLine objects */
    eligibleLines: definitions['EligibleLine'][];
  };
  FetchEligibleLinesToChangeResponse: definitions['Response'] &
    definitions['EligibleLines'];
  FetchEligibleWearableLinesToChangeResponse: definitions['Response'] &
    definitions['EligibleLines'];
  Notification: {
    /** The identifier of the Blue Marble recommendation rule used to trigger the notification. */
    recommendationId: string;
    /** Recommendation text. */
    text: string;
    /** Recommendation title. */
    title?: string;
    /** Notification type. */
    type: 'SUCCESS' | 'INFO' | 'WARN' | 'ERROR';
  };
  ExtrasByCategoryResponse: definitions['Response'] & {
    category?: definitions['Category'];
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  Channel: string;
  /** Reference id that uniquely identifies a cart in blue marble. */
  CartId: string;
  /** Reference id that uniquely identifies a bundle within the given cart which identifies the line number. */
  BundleId: string;
  /** The account number of the customer that is considering the change. */
  AccountNumber: string;
  /** The postpaid or prepaid line number. */
  LineNumber: string;
}

export interface operations {
  fetchProductDetailsByCategoryId: {
    parameters: {
      path: {
        /** The category Id whose product details are requested */
        categoryId: string;
      };
      query: {
        /** Indicates if associatedPriceRules need to be populated or not. */
        includePriceRules?: boolean;
        channel?: parameters['Channel'];
        /** if true, all the child categories(only categories) to the leaf node would be returned. else only the immediate children re returned. the recursive search only supports a depth of max 10 levels at the moment */
        recursiveSearch?: boolean;
        /** The sorting strategy to be used. */
        sortBy?: string;
      };
    };
    responses: {
      /** Successfully fetched product details by category */
      200: {
        schema: definitions['ProductDetailByCategoryResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchProductDetails: {
    parameters: {
      query: {
        /** The comma separated list of multiple offerIds */
        offerIds?: string[];
        /** The comma separated list of external Ids */
        externalIds?: string[];
        /** Indicates if associatedPriceRules need to be populated or not. */
        includePriceRules?: boolean;
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched product details by offer Ids */
      200: {
        schema: definitions['ProductDetailByOfferIdsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCompatibleProductDetails: {
    parameters: {
      body: {
        /** The Request Container for fetching compatible product details. */
        fetchCompatibleProductDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched compatible product details */
      200: {
        schema: definitions['FetchCompatibleProductDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCompatibleSubscriptionProductDetails: {
    parameters: {
      body: {
        /** The Request Container for fetching compatible subscription product details. */
        fetchCompatibleSubscriptionProductDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched compatible subscription product details */
      200: {
        schema: definitions['FetchCompatibleProductDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCompatibleGroupedSubscriptionProductDetails: {
    responses: {
      /** Successfully fetched compatible grouped subscription product details */
      200: {
        schema: definitions['FetchCompatibleGroupedSubscriptionProductDetailsResponse'];
      };
      /** The provided token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to access the line */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchEligibleSubscriptionProductDetails: {
    parameters: {
      path: {
        /** The postpaid or prepaid line number. */
        lineNumber: parameters['LineNumber'];
        /** The bundle offer product instance id of the subscription being managed. */
        productInstanceId: string;
      };
    };
    responses: {
      /** Successfully fetched compatible subscription product details */
      200: {
        schema: definitions['FetchEligibleProductDetailsResponse'];
      };
      /** The provided token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated user doesn't have the right to access the line */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchProductFilters: {
    parameters: {
      path: {
        /** The unique identifier of the category for which the filters are being requested. */
        categoryId: string;
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched product filter details */
      200: {
        schema: definitions['ProductFilterResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchProductVariantByGroupId: {
    parameters: {
      path: {
        /** The group ID for which the variants are to be retrieved. */
        groupId: string;
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched product variant details by group id. */
      200: {
        schema: definitions['ProductVariantResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCompatibleDeviceAddonsProductDetails: {
    parameters: {
      body: {
        /** The Request Container for fetching compatible device addons product details. */
        fetchCompatibleDeviceAddonsProductDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched compatible device addons product details */
      200: {
        schema: definitions['FetchCompatibleProductDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCompatiblePlanProductDetails: {
    parameters: {
      body: {
        /** The Request Container for fetching compatible plan product details. */
        fetchCompatiblePlanProductDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched compatible plan product details */
      200: {
        schema: definitions['FetchCompatibleProductDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCompatibleIfpProductDetails: {
    parameters: {
      body: {
        /** The Request Container for fetching compatible ifp product details. */
        fetchCompatibleIfpProductDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched compatible ifp product details */
      200: {
        schema: definitions['FetchCompatibleProductDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchMultipleProductDiscountPromotionsDetails: {
    parameters: {
      body: {
        /** The Request Container for fetching multiple product discount promotions details. */
        fetchMultipleProductDiscountPromotionsDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched related multiple product discount promotions details. */
      200: {
        schema: definitions['FetchMultipleProductDiscountPromotionsDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchEligiblePlanProductDetails: {
    parameters: {
      path: {
        /** The postpaid or prepaid line number. */
        lineNumber: parameters['LineNumber'];
      };
      query: {
        /** The instance identifier of the value pack to be changed. If this is not supplied for prepaid then a pre to post journey will be assumed. For postpay plan this will be ignored. */
        packInstanceId?: string;
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched eligible product details */
      200: {
        schema: definitions['FetchEligibleProductDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid */
      401: {
        schema: definitions['Response'];
      };
      /** User has no right to retrieve eligible plans or packs for given line number */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getExtrasByLineNumber: {
    parameters: {
      path: {
        /** The postpaid or prepaid line number. */
        lineNumber: parameters['LineNumber'];
      };
    };
    responses: {
      /** Successfully fetched the compatible extras. */
      200: {
        schema: definitions['FetchEligibleProductDetailsResponse'];
      };
      /** The provided access token is invalid. */
      401: {
        schema: definitions['Response'];
      };
      /** The line number is forbidden. */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getRoamingExtrasByLineNumber: {
    parameters: {
      path: {
        /** The postpaid or prepaid line number. */
        lineNumber: parameters['LineNumber'];
      };
      query: {
        /** The list of destination country codes that the customer intends to travel to. */
        destinations?: string[];
      };
    };
    responses: {
      /** Successfully fetched the roaming extras. */
      200: {
        schema: definitions['FetchEligibleProductDetailsResponse'];
      };
      /** The provided access token is invalid. */
      401: {
        schema: definitions['Response'];
      };
      /** Unauthorised. */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveSubscriptionsComparison: {
    parameters: {
      query: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** Reference id that uniquely identifies a bundle within the given cart which identifies the line number. */
        bundleId: parameters['BundleId'];
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions['SubscriptionsComparisonResponse'];
      };
      /** No valid plans to compare. */
      400: {
        schema: definitions['Response'];
      };
      /** The authenticated myspark id doesn't have access to the line. */
      403: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
      /** The given request type is not implemented. */
      501: {
        schema: definitions['Response'];
      };
    };
  };
  fetchCustomerLevelMultiProductDiscount: {
    parameters: {
      query: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** Reference id that uniquely identifies a bundle within the given cart. */
        bundleId?: string;
        /** The current line that is being changed. */
        lineNumber?: string;
        /** The to-be added plan offer id (BM external id). */
        addOffer?: string;
        /** The to-be removed plan offer id (BM external id). */
        removeOffer?: string;
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully fetched multi product discount at customer level. */
      200: {
        schema: definitions['FetchCustomerLevelMultiProductDiscountResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid */
      401: {
        schema: definitions['Response'];
      };
      /** User doesn't have access to the line. */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchEligibleLinesToChange: {
    parameters: {
      path: {
        /** The offer ID associated to the plan that the client is checking the account/line-level eligibility for. */
        offerId: string;
      };
      query: {
        /** The account number of the customer that is considering the change. */
        accountNumber?: parameters['AccountNumber'];
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions['FetchEligibleLinesToChangeResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated access to API. */
      401: {
        schema: definitions['Response'];
      };
      /** Unauthorised access to API. */
      403: {
        schema: definitions['Response'];
      };
      /** Something went wrong. */
      500: {
        schema: definitions['Response'];
      };
      /** Not supported yet/Not implemented yet. */
      501: {
        schema: definitions['Response'];
      };
    };
  };
  fetchEligibleWearableLinesToChange: {
    parameters: {
      path: {
        /** The offer ID associated to the wearable plan that the client is checking the account/line-level eligibility for. */
        offerId: string;
      };
      query: {
        /** The account number of the customer that is considering the change. */
        accountNumber?: parameters['AccountNumber'];
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions['FetchEligibleWearableLinesToChangeResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated access to API. */
      401: {
        schema: definitions['Response'];
      };
      /** Unauthorised access to API. */
      403: {
        schema: definitions['Response'];
      };
      /** Something went wrong. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  fetchMultipleProductDiscountPromotionsDetailsInternally: {
    parameters: {
      body: {
        /** The Request Container for fetching multiple product discount promotions details. */
        fetchMultipleProductDiscountPromotionsDetailsRequest: definitions['FetchCompatibleProductDetailsRequest'];
      };
      query: {
        channel?: parameters['Channel'];
        /** The customer number of the customer for which the mpd is requested. */
        customerNumber?: string;
      };
    };
    responses: {
      /** Successfully fetched related multiple product discount promotions details. */
      200: {
        schema: definitions['FetchMultipleProductDiscountPromotionsDetailsResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getExtrasGroupedByCategory: {
    parameters: {
      path: {
        /** The postpaid or prepaid line number. */
        lineNumber: parameters['LineNumber'];
      };
    };
    responses: {
      /** Successfully fetched the compatible extras grouped under categories. */
      200: {
        schema: definitions['ExtrasByCategoryResponse'];
      };
      /** The provided access token is invalid. */
      401: {
        schema: definitions['Response'];
      };
      /** The line number is forbidden. */
      403: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
