/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/shopping/cart/{cartId}': {
    get: operations['retrieveCartById'];
    delete: operations['deleteCartById'];
    patch: operations['updateCart'];
  };
  '/v1/shopping/cart': {
    get: operations['retrieveCart'];
  };
  '/v1/shopping/cart/{cartId}/bundle/{bundleId}': {
    delete: operations['removeBundleById'];
  };
  '/v1/shopping/cart/{cartId}/bundle/{bundleId}/items/{itemId}': {
    delete: operations['removeItemFromExistingBundleById'];
  };
  '/v1/shopping/cart/items': {
    post: operations['addItemsToCart'];
  };
  '/v1/shopping/cart/{cartId}/bundle/{bundleId}/items': {
    post: operations['addItemToExistingBundle'];
  };
  '/v1/shopping/cart/{cartId}/items': {
    post: operations['addItemToNewBundle'];
  };
  '/v1/shopping/cart/{cartId}/checkout': {
    post: operations['initiateCheckout'];
  };
  '/v1/shopping/cart/{cartId}/bundle/{bundleId}/recommendations': {
    post: operations['submitCartRecommendations'];
  };
  '/v1/shopping/cart/lines/{lineNumber}/extra': {
    post: operations['addExtrasToCart'];
  };
}

export interface definitions {
  CartResponse: definitions['Response'] & definitions['CartData'];
  CartData: {
    /** The unique identifier of the cart in blue marble. */
    cartId: string;
    /** The account number of the user. */
    accountNumber?: string;
    /** True if account selection is required */
    accountRequired?: boolean;
    channel?: definitions['Channel'];
    /** Segment assigned to the cart */
    segment?: string;
    /** The array of cart price objects. */
    price?: definitions['Price'][];
    bundles?: definitions['CartBundle'][];
    /** true if logged in user. */
    authenticated?: boolean;
    /** true if guest user. */
    guest?: boolean;
  };
  /** The channel information. */
  Channel: {
    /** The channel id. */
    id?: string;
    /** The channel name. */
    name?: string;
  };
  /** The price information. */
  Price: {
    /** The price type. */
    priceType: 'Recurring' | 'OneOff';
    frequency?: definitions['Frequency'];
    /** The base price. */
    basePrice: number;
    /** The base price excluding GST. */
    basePriceExcludingTax: number;
    /** The applied GST on basePrice */
    basePriceTax: number;
    /** The actual applicable price. */
    effectivePrice: number;
    /** The actual applicable price excluding GST. */
    effectivePriceExcludingTax: number;
    /** The applied GST on effectivePrice. */
    effectivePriceTax: number;
    /** The percentage of GST applicable. */
    taxPercentage?: number;
    /** The period from which the pricing would start. */
    periodStart?: number;
    /** The number of months/weeks/days the pricing would be applied. */
    length?: number;
    discount?: definitions['Discount'];
  };
  /** The discount information. */
  Discount: {
    /** The name of the discount. */
    name: string;
    /** The discount description. */
    description?: string;
    /** The unit used to represent discount. */
    discountType: 'Percentage' | 'Flat';
    /** The discount value. */
    appliedValue: number;
    /** The discount value excluding GST. */
    appliedValueExcludingTax?: number;
    /** The actual discounted amount. */
    discountedValue: number;
    /** The actual discounted amount excluding GST. */
    discountedValueExcludingTax?: number;
  };
  Frequency: {
    /** The unit used for representing frequency. */
    period: 'Hour' | 'Day' | 'Week' | 'Month' | 'Year';
    /** The numerical representation of frequency. */
    value: number;
  };
  /** Represents a bundled product. */
  CartBundle: {
    /** The index of each Cart Bundle within cart data starting from 1. */
    index?: number;
    /** The unique identifier of Cart Bundle. */
    id: string;
    /** Line number. */
    lineNumber?: string;
    /** True when the offer container requires a linenumber. */
    lineRequired?: boolean;
    /** True when the offer container is newly added or if a new item is added to the offer container. */
    affected?: boolean;
    category?: definitions['Category'];
    /** The array of cart bundle price objects. */
    price?: definitions['Price'][];
    items?: definitions['BundleEntry'][];
  };
  Category: {
    /** The category id. */
    id: string;
    /** The category name. */
    name?: string;
  };
  /** Represents a product. */
  BundleEntry: {
    /** The index of each entry/item of the Cart Bundle starting from 1. */
    index?: number;
    /** The unique identifier of bundle entry. */
    id: string;
    /** The action to perform on the cart item by BM during submit customer order. */
    action?: 'keep' | 'modify' | 'add' | 'delete';
    /** Represents the quantity or the number of products. */
    quantity?: number;
    /** The array of bundle entry price objects. */
    price?: definitions['Price'][];
    /** The image representation of the bundle entry. */
    entryImageUrl?: string;
    /** The bundle entry name. */
    name?: string;
    /** The bundle entry description. */
    description?: string;
    /** The summary text. */
    summary?: string;
    /** The product offering id. */
    productOfferingId?: string;
    /** The external id of the product. */
    externalId?: string;
    /** The product categories. */
    category?: string[];
    contractTerm?: definitions['Term'];
    /** true if the product needs shipping. */
    shippable?: boolean;
    /** Balance management of the account. */
    balanceManagement?: 'PREPAID' | 'POSTPAID';
    /** true if subscription is included with plan. */
    isIncluded?: boolean;
    /** true if the product can be removed. */
    removable?: boolean;
    /** True when the item is added for the first time to the cart. */
    affected?: boolean;
  };
  Term: {
    /** The name of the contract term. */
    name: string;
    /** The description of the contract term. */
    description?: string;
    /** The value of the contract term. */
    value: number;
    /** The unit representation of the contract term. */
    unit: 'Hour' | 'Day' | 'Week' | 'Month' | 'Year';
  };
  AddToCartRequest: {
    /** The array of cart bundle to be added to the cart. */
    bundles: definitions['Bundle'][];
  };
  Bundle: {
    category?: definitions['Category'];
    /** The line number of the offer container. */
    lineNumber?: string;
    /** The account number for the offer container. */
    accountNumber?: string;
    /** The array of item information within each bundle to be added to the cart. */
    items: definitions['Item'][];
  };
  Item: {
    /** Represents the quantity or the number of products. */
    quantity?: number;
    /** the unique identifier of the product. */
    productOfferingId: string;
    /** The action to perform on the cart item by BM during submit customer order. */
    action?: 'keep' | 'modify' | 'add' | 'delete';
    /** Product instance id of the Siebel asset. */
    productInstanceId?: string;
    productCharacteristics?: definitions['ProductCharacteristics'];
  };
  AddItemsToCartRequest: definitions['Bundle'];
  CustomerDetails: {
    /** The account number of the user. */
    accountNumber: string;
  };
  SubmitRecommendationCartRequest: {
    /** The collection of recommendations. */
    recommendations: definitions['Recommendation'][];
  };
  Recommendation: {
    /** The unique identifier of the recommendation. */
    recommendationId: string;
    /** The the action chosen based on the subscription comparison response. */
    action: 'INFORM' | 'KEEP' | 'CANCEL';
  };
  /** Includes necessary information for the extra purchase. */
  BuyExtraRequest: {
    /** Offer id of the extra to be purchased. */
    offerId: string;
    /** True indicates that auto renewal should be set up for the extra purchased. */
    autoRenew: boolean;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
  ProductCharacteristics: {
    /** Use to cancel or resume an existing product. */
    autorenew?: 'ON' | 'GR' | 'OFF';
    /** Use to send action to downstream CRM to invoke follow on orders. */
    systemAction?:
      | 'CANCEL'
      | 'TERMINATE'
      | 'UPDATE'
      | 'RESUME'
      | 'ADDED'
      | 'NONE';
  };
}

export interface parameters {
  /** Reference id that uniquely identifies a cart in blue marble. */
  CartId: string;
  /** Reference id that uniquely identifies a bundle within the given cart in blue marble. */
  BundleId: string;
  /** Reference id that uniquely identifies a cart item within the given bundle in blue marble. */
  ItemId: string;
  Channel: string;
  /** The line number of the user */
  LineNumber: string;
}

export interface operations {
  retrieveCartById: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the cart from blue marble. */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  deleteCartById: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully deleted the cart from blue marble. */
      200: {
        schema: definitions['Response'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  updateCart: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      body: {
        /** Customer details */
        updateCartRequest: definitions['CustomerDetails'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['CartResponse'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Unauthorised account. */
      403: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  retrieveCart: {
    parameters: {
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully retrieves the cart from blue marble. */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** The user has not yet created cart. */
      204: never;
      /** unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  removeBundleById: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** Reference id that uniquely identifies a bundle within the given cart in blue marble. */
        bundleId: parameters['BundleId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully removed the bundle from blue marble. */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request, invalid cart id or bundle id. */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  removeItemFromExistingBundleById: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** Reference id that uniquely identifies a bundle within the given cart in blue marble. */
        bundleId: parameters['BundleId'];
        /** Reference id that uniquely identifies a cart item within the given bundle in blue marble. */
        itemId: parameters['ItemId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully removed the item from blue marble. */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  addItemsToCart: {
    parameters: {
      body: {
        /** The Request Container. */
        addToCartRequest: definitions['AddToCartRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Successfully added items to new cart in blue marble */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  addItemToExistingBundle: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** Reference id that uniquely identifies a bundle within the given cart in blue marble. */
        bundleId: parameters['BundleId'];
      };
      body: {
        /** The Request Container. */
        addItemsToCartRequest: definitions['AddItemsToCartRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Sucessfully added item to existing bundle in blue marble */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  addItemToNewBundle: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      body: {
        /** The Request Container. */
        addToCartRequest: definitions['AddToCartRequest'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Sucessfully added item to new bundle in blue marble */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  initiateCheckout: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Checkout process initiated successfully. */
      200: {
        schema: definitions['Response'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  submitCartRecommendations: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: parameters['CartId'];
        /** Reference id that uniquely identifies a bundle within the given cart in blue marble. */
        bundleId: parameters['BundleId'];
      };
      query: {
        channel?: parameters['Channel'];
      };
      body: {
        /** The Request Container. */
        submitRecommendationCartRequest: definitions['SubmitRecommendationCartRequest'];
      };
    };
    responses: {
      /** Request successfully processed. */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  addExtrasToCart: {
    parameters: {
      path: {
        /** The line number of the user */
        lineNumber: parameters['LineNumber'];
      };
      body: {
        /** Buy Extras request. */
        buyExtraRequest: definitions['BuyExtraRequest'];
      };
    };
    responses: {
      /** Request successfully processed. */
      200: {
        headers: {};
        schema: definitions['CartResponse'];
      };
      /** Bad Request */
      400: {
        schema: definitions['Response'];
      };
      /** Internal Server Error, something went wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
