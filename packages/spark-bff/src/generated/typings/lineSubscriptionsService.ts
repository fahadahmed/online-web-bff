/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/lines/{lineNumber}/subscriptions/{productInstanceId}/activation': {
    get: operations['getActivationUrlForLineProduct'];
  };
  '/v1/lines/subscriptions/me': {
    get: operations['getLinesSubscriptions'];
  };
  '/v1/lines/{lineNumber}/subscriptions/{productInstanceId}': {
    get: operations['getLinesSubscriptionsProductId'];
  };
}

export interface definitions {
  ActivationResponse: definitions['Response'] & {
    /** The activation url to activate the product at partner site. */
    activationUrl: string;
    /** The lock duration TTL (Time to Live) in seconds of the subscription type for the given product instance id if configured */
    lockTtl?: number;
    /** Identifies whether the URL is for reactivation. */
    isReactivation: boolean;
  };
  SubscriptionsProductResponse: definitions['Response'] &
    definitions['Subscription'] & {
      /** The lock TTL (in seconds) for the correlating PROCESSING status. */
      lockTtl?: number;
      /** The renewal date-time when the subscription will be next renewed. */
      nextRenewalDate?: string;
      /** The subscription date-time when the subscription will end. */
      subscriptionEndDate?: string;
      /** The username used by the customer to activate the subscription. */
      username?: string;
      /** The Call To Actions (CTAs) available for the given Subscription. */
      ctas?: definitions['Cta'][];
      /** Auto renew status of the asset from Siebel */
      autorenew?: 'ON' | 'OFF' | 'GR';
    };
  LinesSubscriptionsResponse: definitions['Response'] & {
    subscriptions: definitions['Subscription'][];
  };
  /** Summary of the subscription product. */
  Subscription: {
    offer: definitions['Offer'];
    bundleOffer?: definitions['BundleOffer'];
    /** The date-time the asset was initially active in Siebel. */
    assetStartDate: string;
    /** The Siebel account number of which the Subscription product is associated with. */
    accountNumber: string;
    /** The Siebel line number of which the Subscription product is associated to. */
    lineNumber: string;
    status: definitions['Status'];
  };
  /** The offer for the subscription */
  Offer: {
    /** The BlueMarble unique identifier of the subscription component. */
    id: string;
    /** The BlueMarble offer name of the subscription component. */
    name: string;
    /** The Siebel product instance id of the offer */
    productInstanceId: string;
  };
  /** The parent bundle offer for the offer */
  BundleOffer: {
    /** The BlueMarble unique identifier of the bundle. */
    id: string;
    /** The BlueMarble offer name of the bundle. */
    name?: string;
    /** The Siebel product instance id of the bundle */
    productInstanceId: string;
  };
  Status: {
    /** The status of the subscription, the following values are supported */
    type:
      | 'NOT_ACTIVE'
      | 'ACTIVE'
      | 'CANCELLED'
      | 'TERMINATED'
      | 'PROCESSING_ORDER_AUTORENEW_CANCEL'
      | 'PROCESSING_ORDER_AUTORENEW_RESUME'
      | 'PROCESSING_ORDER_ADD'
      | 'PROCESSING_ORDER_CHANGEPLAN'
      | 'PROCESSING_ORDER_CHANGEPAYMENTMETHOD'
      | 'PROCESSING_ACTIVATION';
    /** The label of the subscription, the following values are supported; ["Ready to activate", "Active", "Cancelled","Cancelled", "Processing", "Processing", "Processing", "Processing", "Updating"] */
    label?: string;
  };
  /** The Call To Actions (CTAs) available for the given Subscription. */
  Cta: {
    /** The cta type. Possible values are; */
    type:
      | 'ACTIVATE'
      | 'CANCEL'
      | 'RESUME'
      | 'CHANGE_PAYMENT_METHOD'
      | 'EDIT_PARTNER_ACCOUNT'
      | 'ACTIVATE_RETRY'
      | 'REACTIVATE';
    /** the cta label. Possible values are; ["Activate (offer.name)", "Cancel (offerBundle.name)", "Resume (offerBundle.name)", "Change payment method", "Go to (offer.productFeatures.brand)", "Start again"] */
    label: string;
    /** The web link if opening external tab or webview of the CTA. */
    webLink?: string;
  };
  Message: {
    code: number;
    message: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
}

export interface parameters {
  /** Line number */
  lineNumber: string;
  /** The product instance id of the vas product */
  productInstanceId: string;
}

export interface operations {
  getActivationUrlForLineProduct: {
    parameters: {
      path: {
        /** Line number */
        lineNumber: parameters['lineNumber'];
        /** The product instance id of the vas product */
        productInstanceId: parameters['productInstanceId'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['ActivationResponse'];
      };
      /** The vas activation request is invalid */
      400: {
        schema: definitions['Response'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Forbidden */
      403: {
        schema: definitions['Response'];
      };
      /** The system failed to process the request. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getLinesSubscriptions: {
    responses: {
      /** Success */
      200: {
        schema: definitions['LinesSubscriptionsResponse'];
      };
      /** Unauthenticated access to API */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated myspark id doesn't have access to the line. */
      403: {
        schema: definitions['Response'];
      };
      /** System error */
      500: {
        schema: definitions['Response'];
      };
      /** The given request type is not implemented. */
      501: {
        schema: definitions['Response'];
      };
    };
  };
  getLinesSubscriptionsProductId: {
    parameters: {
      path: {
        /** Line number */
        lineNumber: parameters['lineNumber'];
        /** The product instance id of the vas product */
        productInstanceId: parameters['productInstanceId'];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions['SubscriptionsProductResponse'];
      };
      /** Unauthenticated access to API */
      401: {
        schema: definitions['Response'];
      };
      /** The authenticated myspark id doesn't have access to the line. */
      403: {
        schema: definitions['Response'];
      };
      /** System error */
      500: {
        schema: definitions['Response'];
      };
      /** The given request type is not implemented. */
      501: {
        schema: definitions['Response'];
      };
    };
  };
}
