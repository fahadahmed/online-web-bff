/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/shopping/order/{orderId}/status': {
    get: operations['getOrderStatus'];
  };
  '/v1/shopping/order/cart/{cartId}': {
    get: operations['generateOrderNumber'];
    post: operations['submitOrder'];
  };
  '/v1/shopping/order/feasibility/plans/lines/{lineNumber}': {
    get: operations['checkChangePlanOrderFeasibility'];
  };
  '/v1/shopping/order/feasibility/extras/lines/{lineNumber}': {
    get: operations['checkExtrasOrderFeasibility'];
  };
}

export interface definitions {
  PaymentInfo: {
    payment?: definitions['Payment'];
  };
  Payment: {
    /** The source of the payment/card */
    source:
      | 'DIRECT'
      | 'WALLET_SELF'
      | 'NEW_CARD'
      | 'VOUCHER'
      | 'ACCOUNT'
      | 'POLI_PAY';
    /** the voucher number. */
    voucherNumber?: string;
    /** The amount to be paid in NZD. This can either be an entire amount or a partial amount. */
    amount: number;
    /** The secure transaction token required to pay the amount without persisting any card details. */
    secureTransactionToken?: string;
    /** The unique identifier of the payment method. */
    paymentMethodId?: string;
    /** The type of client which initiated the request. */
    clientType: 'SMARTPHONE' | 'CQ_DESKTOP' | 'CQ_MOBILE';
    /** Indicates partial payment. */
    partialPay: boolean;
  };
  SubmitOrderResponse: definitions['Response'] & {
    /** Reference number of the order. */
    orderNumber?: string;
    /** The email to which the confirmation mail is sent. */
    confirmationEmailId?: string;
  };
  SubmitOrderDataValidationResponse: definitions['SubmitOrderResponse'] & {
    /** The object to hold the section id and steps object as applicable to indicate the missing data. */
    sections?: definitions['Section'][];
  };
  OrderStatusResponse: definitions['Response'] & {
    /** Status of the order. */
    orderStatus: 'INPROGRESS' | 'COMPLETED' | 'FAILURE' | 'QUEUEDFORRETRY';
    /** True if there are any errors with the order. These might have reached bm with errors. */
    errorsPresent: boolean;
  };
  GenerateOrderNumberResponse: definitions['Response'] & {
    /** Reference number of the order. */
    orderNumber: string;
  };
  Section: {
    sectionId: string;
    /** The object to hold the step id field object as applicable to indicate the missing data. */
    steps?: definitions['Step'][];
  };
  Step: {
    stepId: string;
    /** The object to hold the field name as applicable to indicate the missing data. */
    fields?: definitions['Field'][];
  };
  Field: {
    /** The name of the missing field. */
    name: string;
  };
  FeasibilityResponse: definitions['Response'] & {
    /** A flag to indicate if the order if feasible. */
    orderFeasible: boolean;
    /** The reason associated with the feasibility outcome. */
    feasibilityReason:
      | 'ALLOWED'
      | 'IN_PROGRESS'
      | 'CALL_CENTRE'
      | 'TERMINATE'
      | 'CHANGE_OFFER'
      | 'PORT_OUT'
      | 'SERVICE_NOT_ACTIVATED'
      | 'UNKNOWN';
  };
  Message: {
    message: string;
    code: number;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
}

export interface parameters {
  Channel: string;
  /** The line number for which order feasibility has to be checked */
  LineNumber: string;
}

export interface operations {
  getOrderStatus: {
    parameters: {
      path: {
        /** The unique identifier of the order. */
        orderId: string;
      };
      query: {
        channel?: parameters['Channel'];
        mode?: string;
      };
    };
    responses: {
      /** Order status retrieved Successfully. */
      200: {
        schema: definitions['OrderStatusResponse'];
      };
      /** Bad Request. */
      400: {
        schema: definitions['Response'];
      };
      /** Authentication Failure. */
      401: {
        schema: definitions['Response'];
      };
      /** Forbidden. */
      403: {
        schema: definitions['Response'];
      };
      /** Order not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  generateOrderNumber: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: string;
      };
      query: {
        channel?: parameters['Channel'];
      };
    };
    responses: {
      /** Order number generated successfully. */
      200: {
        schema: definitions['GenerateOrderNumberResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['SubmitOrderDataValidationResponse'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  submitOrder: {
    parameters: {
      path: {
        /** Reference id that uniquely identifies a cart in blue marble. */
        cartId: string;
      };
      query: {
        channel?: parameters['Channel'];
      };
      body: {
        /** The Request Container for payment details required for order submission. */
        payment?: definitions['PaymentInfo'];
      };
    };
    responses: {
      /** Order submitted successfully. */
      200: {
        schema: definitions['SubmitOrderResponse'];
      };
      /** Bad Request, invalid cart id. */
      400: {
        schema: definitions['SubmitOrderDataValidationResponse'];
      };
      /** The provided access token is invalid or Unauthorised cart. */
      401: {
        schema: definitions['Response'];
      };
      /** Cart not found. */
      404: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  checkChangePlanOrderFeasibility: {
    parameters: {
      path: {
        /** The line number for which order feasibility has to be checked */
        lineNumber: parameters['LineNumber'];
      };
      query: {
        planChangeDate?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions['FeasibilityResponse'];
      };
      /** Unauthenticated access */
      401: {
        schema: definitions['Response'];
      };
      /** Forbidden */
      403: {
        schema: definitions['Response'];
      };
      /** Line details could not be found */
      404: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  checkExtrasOrderFeasibility: {
    parameters: {
      path: {
        /** The line number for which order feasibility has to be checked */
        lineNumber: parameters['LineNumber'];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions['FeasibilityResponse'];
      };
      /** Unauthenticated access */
      401: {
        schema: definitions['Response'];
      };
      /** Forbidden */
      403: {
        schema: definitions['Response'];
      };
      /** Line details could not be found */
      404: {
        schema: definitions['Response'];
      };
      /** Internal server error */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
