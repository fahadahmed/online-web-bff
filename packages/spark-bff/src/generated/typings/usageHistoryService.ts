/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/line/usage/me/{lineNumber}/{usageType}/{summaryType}': {
    get: operations['getUsageHistory'];
  };
  '/v2/line/{lineNumber}/usage/{usageType}/{interval}': {
    get: operations['getUsageHistoryV2'];
  };
  '/v2/line/{lineNumber}/usage/{usageType}/{interval}/{periodBreakdownId}': {
    get: operations['getUsageHistoryV2ByPeriodBreakdownId'];
  };
}

export interface definitions {
  UsageHistory: definitions['Response'] & {
    /** The unit of time that the usage data is aggregated by */
    summaryType: 'HOURLY' | 'DAILY' | 'MONTHLY';
    /** The type of account associated with this usage summary. */
    accountType: 'POSTPAID' | 'PREPAID';
    /** The start of the usage history summary */
    startDateTime: string;
    /** The end of the usage history summary */
    endDateTime: string;
    /** The average for the type of usage covered by this response */
    averagePeriodUsage: definitions['PeriodUsage'];
    /** Summarised periods covered in this historical usage query sorted chronologically based on startDateTime */
    summarisedPeriods: definitions['SummaryPeriodUsage'][];
  };
  UsageHistoryV2: definitions['Response'] & {
    /** The unit of time that the usage data is aggregated by */
    interval: 'HOURLY' | 'DAILY' | 'MONTHLY';
    /** The type of account associated with this usage summary. */
    accountType: 'POSTPAID' | 'PREPAID';
    /** An enum that indicates whether this plan is currently shared in some manner. */
    sharerType: 'NOT_SHARED' | 'LEADER' | 'SHARER';
    /** The start of the usage history summary */
    startDateTime: string;
    /** The end of the usage history summary */
    endDateTime: string;
    /** The average for the type of usage covered by this response */
    averagePeriodUsage: definitions['PeriodUsage'];
    /** The average for the type of usage covered by this response */
    averageGroupPeriodUsage?: definitions['PeriodUsage'];
    /** Summarised periods covered in this historical usage query sorted chronologically based on startDateTime */
    summarisedPeriods: definitions['SummaryPeriodUsage'][];
  };
  UsageHistoryByPeriodBreakdownIDV2: definitions['Response'] & {
    /** The unit of time that the usage data is aggregated by */
    interval: 'HOURLY' | 'DAILY' | 'MONTHLY';
    /** Represents the high-level product type associated with the breakdown */
    breakdownType: 'PLAN' | 'ADDITIONAL_INCLUDED' | 'ADDITIONAL_PAID';
    /** The start of the usage history summary */
    startDateTime: string;
    /** The end of the usage history summary */
    endDateTime: string;
    /** The value representing the total usage for this breakdown during the period. */
    periodUsage: definitions['PeriodUsage'];
    /** The value representing the total usage for this breakdown during the period. */
    periodGroupUsage?: definitions['PeriodUsage'];
    /** Whether this summarised period has been billed - always false if PREPAID. */
    unbilled?: boolean;
    /** An array of the products that contributed to this usage over the nominated period. */
    contributingProducts: definitions['ContributingProduct'][];
  };
  PeriodUsage: {
    /** The usage during this period; this should be rounded to have no more than two decimal places */
    value: number;
    /** The units of the value */
    unit: 'GB' | 'MB' | 'MIN' | 'TEXT';
  };
  SummaryPeriodUsage: {
    /** The start of this specific time period */
    startDateTime: string;
    /** The end of this specific time period */
    endDateTime: string;
    periodUsage: definitions['PeriodUsage'];
    periodGroupUsage?: definitions['PeriodUsage'];
    /** Whether this summarised period has been billed - always false if PREPAID. */
    unbilled?: boolean;
    /** Represents a breakdown of the high-level product types that contributed to the overall usage of this period. */
    periodBreakdown?: definitions['PeriodBreakdown'][];
  };
  PeriodBreakdown: {
    /** Represents the high-level product type associated with the breakdown */
    breakdownType: 'PLAN' | 'ADDITIONAL_INCLUDED' | 'ADDITIONAL_PAID';
    /** Represents an identifier for a specific period */
    periodBreakdownId?: string;
    periodUsage: definitions['PeriodUsage'];
    periodGroupUsage?: definitions['PeriodUsage'];
    periodLimit?: definitions['PeriodLimit'];
    periodGroupLimit?: definitions['PeriodLimit'];
    periodRemaining?: definitions['PeriodRemaining'];
    periodGroupRemaining?: definitions['PeriodRemaining'];
  };
  PeriodLimit: {
    /** The value of the usage limit for this type of breakdown during the time period in question */
    value: number;
    /** The units of the value */
    unit: 'GB' | 'MB' | 'MIN' | 'TEXT';
  };
  PeriodRemaining: {
    /** The value of the usage remaining for this type of breakdown during the time period in question. */
    value: number;
    /** The units of the value */
    unit: 'GB' | 'MB' | 'MIN' | 'TEXT';
  };
  ContributingProduct: {
    /** The downstream Offer ID associated to this product. */
    offerId?: string;
    /** The customer-facing name for this product. */
    productName: string;
    /** The date when the instance of this product was purchased, renewed or activated. */
    acquisitionDate: string;
    periodUsage: definitions['PeriodUsage'];
    periodGroupUsage?: definitions['PeriodUsage'];
    periodLimit?: definitions['PeriodLimit'];
    periodGroupLimit?: definitions['PeriodLimit'];
    periodRemaining?: definitions['PeriodRemaining'];
    periodGroupRemaining?: definitions['PeriodRemaining'];
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface parameters {
  /** The line number to fetch the usage history for */
  lineNumber: string;
  /** The type of usage required */
  usageType: 'data' | 'voice' | 'sms';
  /** The unit of time to aggregate usage data by */
  interval: 'hourly' | 'daily' | 'monthly';
  /** The start timestamp of the historical data to fetch; the default value for this depends on the value of summaryType */
  start: string;
  /** The end timestamp of the historical data to fetch; the default value for this depends on the value of summaryType */
  end: string;
  /** The identifier for the period and usage type combination that product-level usage details should be returned for */
  periodBreakdownId: string;
}

export interface operations {
  getUsageHistory: {
    parameters: {
      path: {
        /** The line number to fetch the usage history for */
        lineNumber: parameters['lineNumber'];
        /** The type of usage required */
        usageType: parameters['usageType'];
        /** The unit of time to aggregate usage data by */
        summaryType: 'hourly' | 'daily' | 'monthly';
      };
      query: {
        /** The start timestamp of the historical data to fetch; the default value for this depends on the value of summaryType */
        start?: parameters['start'];
        /** The end timestamp of the historical data to fetch; the default value for this depends on the value of summaryType */
        end?: parameters['end'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['UsageHistory'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised to fetch usage history about this line */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getUsageHistoryV2: {
    parameters: {
      path: {
        /** The line number to fetch the usage history for */
        lineNumber: parameters['lineNumber'];
        /** The type of usage required */
        usageType: parameters['usageType'];
        /** The unit of time to aggregate usage data by */
        interval: parameters['interval'];
      };
      query: {
        /** The start timestamp of the historical data to fetch; the default value for this depends on the value of summaryType */
        start?: parameters['start'];
        /** The end timestamp of the historical data to fetch; the default value for this depends on the value of summaryType */
        end?: parameters['end'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['UsageHistoryV2'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Forbidden */
      403: {
        schema: definitions['Response'];
      };
      /** Line not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  getUsageHistoryV2ByPeriodBreakdownId: {
    parameters: {
      path: {
        /** The line number to fetch the usage history for */
        lineNumber: parameters['lineNumber'];
        /** The type of usage required */
        usageType: parameters['usageType'];
        /** The unit of time to aggregate usage data by */
        interval: parameters['interval'];
        /** The identifier for the period and usage type combination that product-level usage details should be returned for */
        periodBreakdownId: parameters['periodBreakdownId'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['UsageHistoryByPeriodBreakdownIDV2'];
      };
      /** Unauthenticated */
      401: {
        schema: definitions['Response'];
      };
      /** Forbidden */
      403: {
        schema: definitions['Response'];
      };
      /** Line or Breakdown period not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
