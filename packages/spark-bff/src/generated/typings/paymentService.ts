/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/finance/payment/creditcard/bill/{accountNumber}': {
    post: operations['payBillByCreditCard'];
  };
  '/v1/finance/payment/polipay/bill/{accountNumber}': {
    post: operations['payBillByPoliPay'];
  };
  '/v1/finance/payment/voucher/topup/{lineNumber}': {
    post: operations['topupByVoucher'];
  };
  '/v1/finance/payment/creditcard/topup/{lineNumber}': {
    post: operations['topupByCreditCard'];
  };
  '/v1/finance/payment/polipay/topup/{lineNumber}': {
    post: operations['topupByPoliPay'];
  };
  '/v1/finance/payment/creditcard/autotopup/{lineNumber}': {
    post: operations['autoTopupByCreditCard'];
    delete: operations['removeAutoTopup'];
  };
  '/v1/finance/payment/creditcard/{lineNumber}': {
    post: operations['registerCreditCard'];
  };
  '/v1/finance/payment/bill/{accountNumber}/paymentsetup': {
    post: operations['setupAutoPay'];
  };
  '/v1/finance/payment/creditcard/{lineNumber}/{paymentMethodId}': {
    delete: operations['removeRegisteredCreditCard'];
  };
  '/v1/finance/payment/bill/{accountNumber}/paymentsetup/{paymentMethodId}': {
    delete: operations['removeAutoPay'];
  };
  '/v1/finance/payment/poli/initiate': {
    post: operations['sendPoliInitiate'];
  };
  '/v1/finance/payment/poli/result': {
    post: operations['receivePoliTransactionStatus'];
  };
  '/v1/finance/payment/poli/result/{token}': {
    get: operations['getPoliTransactionResult'];
  };
}

export interface definitions {
  CreditCardTopupResponse: definitions['Response'] &
    definitions['TransactionResult'];
  TransactionResult: {
    /** The receipt number that uniquely identifies this transaction. */
    receiptNumber?: string;
    /** The total available balance. */
    availableBalance?: number;
    /** The total reserved balance. */
    reservedBalance?: number;
  };
  CreditCardPaymentProperties: {
    source: definitions['Source'];
    /** the one time token required to pay the amount without persisting any card details. */
    oneTimeToken?: string;
    /** the secure transaction token required to pay the amount without persisting any card details. */
    secureTransactionToken?: string;
    /** the unique identifier of this payment method. */
    paymentMethodId?: string;
  };
  CreditCardBillPaymentRequest: definitions['CreditCardPaymentProperties'] & {
    /** The amount to be paid from the credit card. */
    amount?: number;
    amountType: definitions['AmountType'];
    /** The type of client which initiated the request. */
    clientType: definitions['ClientType'];
    /** Indicates if the given cad has to be setup as autopay or not. */
    setupAutoPay: boolean;
  };
  CreditCardAutoTopupRequest: definitions['CreditCardPaymentProperties'] & {
    /** The auto topup amount in NZD. */
    amount: number;
    /** Indicates if autopay needs to be setup. */
    setupAutoTopup: boolean;
    /** Container for all autotopup settings. */
    autoTopupSettings: definitions['AutoTopupSettings'];
  };
  CreditCardTopupRequest: definitions['CreditCardPaymentProperties'] & {
    /** The amount to be paid from the credit card. */
    amount: number;
    /** The type of client which initiated the request. */
    clientType: definitions['ClientType'];
    /** Indicates if the given card has to be setup for auto topup or not. */
    setupAutoTopup: boolean;
    /** Container for all autotopup settings. */
    autoTopupSettings?: definitions['AutoTopupSettings'];
    /** Indicates if the given card has to be registered or not. This would just register the card and does not setup anything. */
    registerCard?: boolean;
    /** Indicates if the amount added to the account must be reserved or not. */
    reserveFunds?: boolean;
  };
  VoucherTopupRequest: {
    /** The voucher number to be redeemed */
    voucherNumber: string;
    /** The type of client that initiated the request. */
    clientType: definitions['ClientType'];
  };
  VoucherTopupResponse: definitions['Response'] &
    definitions['TransactionResult'] & {
      /** The amount redeemed by using given voucher. */
      redeemedAmount: number;
    };
  ClientType: 'SMARTPHONE' | 'CQ_DESKTOP' | 'CQ_MOBILE';
  AutoTopupSettings: {
    /** The type of auto topup to be setup. */
    type: 'LB' | 'RT';
    /** The first date from which the RT should trigger. */
    firstTopupDate?: string;
    /** The amount at which the LB will trigger. */
    thresholdAmount?: number;
    /** The Maximum amount beyond which LB autotopup will not happen within a month. */
    monthlyTopupLimit?: number;
  };
  RegisterCreditCardRequest: {
    source: definitions['Source'];
    /** the unique identifier of this payment method. */
    paymentMethodId: string;
  };
  /** The source of the payment/card. */
  Source: 'DIRECT' | 'WALLET_SELF' | 'NEW_CARD';
  PaymentSetupRequest: {
    source: definitions['Source'];
    /** the unique identifier of this payment method. */
    paymentMethodId: string;
    /** indicates if there has any payment to be debited too. */
    hasPayment: boolean;
    /** the amount to be paid in NZD. mandatory if hasPayment is true */
    amount?: number;
    amountType?: definitions['AmountType'];
    /** The type of client which initiated the request. */
    clientType: definitions['ClientType'];
  };
  /** The type of payment. */
  AmountType: 'ONEOFF' | 'TOTALDUE' | 'TOTALOVERDUE';
  PoliPayBillRequest: {
    /** The amount to be paid in NZD, mandatory for ONEOFF */
    amount?: number;
    /** The payment amount type of customer. */
    amountType: definitions['AmountType'];
    /** The type of client that initiated this request. */
    clientType: definitions['ClientType'];
  };
  PoliPayTopupRequest: {
    /** The amount to be paid in NZD */
    amount: number;
    /** The type of client that initiated this request. */
    clientType: definitions['ClientType'];
  };
  PoliPayResponse: definitions['Response'] & {
    /** Token from polipay to be used by client */
    token: string;
    /** The URL where the client will be redirected to for proceeding with payment */
    redirectUrl: string;
  };
  TransactionTypeEnum:
    | 'PAYBILL_AUTHENTICATED'
    | 'PAYBILL_UNAUTHENTICATED'
    | 'CREDIT_RECONNECTION'
    | 'CHANGE_PREPAID_PACK'
    | 'PREPAID_BUY_EXTRAS'
    | 'POSTPAID_BUY_EXTRAS'
    | 'TOPUP_AUTHENTICATED'
    | 'ANONYMOUS_TOPUP'
    | 'SETUP_MONTHLY_PAYMENT'
    | 'MANAGE_WALLET';
  /** Used to store the post information to be used to initiate the POLi pay handshake. */
  InitiateDataRequest: {
    /** Indicates the type of transaction. */
    transactionType: definitions['TransactionTypeEnum'];
    /** Indicates the payBill amount type. */
    amountType?: 'ONEOFF' | 'TOTALDUE' | 'TOTALOVERDUE';
    /** The amount to be paid in NZD */
    amount: number;
    /** The account number for which the bill needs to be paid. */
    accountNumber?: string;
    /** The customer number of the customer for which the bill to be paid */
    customerNumber?: string;
    /** The offerId of the extra to be added. */
    offerId?: string;
    /** Indicates partial payment. the rest has to be from account. */
    partialPay: boolean;
    /** The prepay line number that is requesting for topup. */
    recipient?: string;
    /** Indicates if autorenew needs to be setup on account. */
    autoRenew: boolean;
    /** The type of client which initiated the request. */
    clientType: definitions['ClientType'];
  };
  /** The response payload of POLi pay transaction result. */
  PoliTransactionResultResponse: definitions['Response'] & {
    /** Indicates the type of transaction. */
    transactionType: definitions['TransactionTypeEnum'];
    /** The transaction reference provided to customer for tracking if required */
    transactionReference?: string;
    /** The amount to be paid in NZD */
    amount?: number;
    /** The account number for which the bill needs to be paid. */
    accountNumber?: string;
    /** The offerId of the extra to be added. */
    offerId?: string;
    /** The line number for which extra needs to be bought or topup needs to be done. */
    lineNumber?: string;
    /** The name of the offer purchased */
    offerName?: string;
    /** Have or not have auto renew setup for extra */
    autoRenew: boolean;
  };
  /** The response payload of Polipay initiate endpoint. */
  PoliInitiateResponse: definitions['Response'] & {
    /** The token provided by polipay as part of initiate response. */
    token: string;
    /** The navgationurl provided by polipay for client to redirect. */
    navigationUrl: string;
  };
  /** The customized error response for polipay handshake. */
  PoliInitiateErrorResponse: definitions['Response'] & {
    /** The error code returned from polipay's initiate endpoint, 0 means a successful transaction */
    polipayErrorCode: number;
    /** A string containing details about the error. */
    polipayErrorMessage?: string;
  };
  Response: {
    /** List of Messages */
    messages: definitions['Message'][];
  };
  Message: {
    message: string;
    code: number;
  };
}

export interface operations {
  payBillByCreditCard: {
    parameters: {
      path: {
        /** The account number for which the bill has to be paid. */
        accountNumber: string;
      };
      body: {
        /** The request containg the payment details. */
        creditCardBillPaymentRequest?: definitions['CreditCardBillPaymentRequest'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
      /** Validation failure with request. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid, or access is otherwise denied. */
      401: {
        schema: definitions['Response'];
      };
      /** The requested wallet item or access is not authorised. */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  payBillByPoliPay: {
    parameters: {
      path: {
        /** The account number for which the bill has to be paid. */
        accountNumber: string;
      };
      body: {
        /** Contains details needed to perform pay bill with poli. */
        poliPayBillRequest?: definitions['PoliPayBillRequest'];
      };
    };
    responses: {
      /** Poli pay bill success. */
      200: {
        schema: definitions['PoliPayResponse'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. */
      401: {
        schema: definitions['Response'];
      };
      /** Access is not authorised. */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  topupByVoucher: {
    parameters: {
      path: {
        /** The line number, with leading zero */
        lineNumber: string;
      };
      body: {
        /** Contains details needed to perform voucher topup. */
        voucherTopupRequest?: definitions['VoucherTopupRequest'];
      };
    };
    responses: {
      /** Voucher topup success. */
      200: {
        schema: definitions['VoucherTopupResponse'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. */
      401: {
        schema: definitions['Response'];
      };
      /** Too many attempts to topup with invalid or expired voucher code in quick succession. */
      429: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  topupByCreditCard: {
    parameters: {
      path: {
        /** The prepaid line number, with leading zero */
        lineNumber: string;
      };
      body: {
        /** Contains details needed to perform topup with creditcard. */
        creditCardTopupRequest?: definitions['CreditCardTopupRequest'];
      };
    };
    responses: {
      /** Credit card topup success. */
      200: {
        schema: definitions['CreditCardTopupResponse'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. */
      401: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  topupByPoliPay: {
    parameters: {
      path: {
        /** The prepaid line number, with leading zero */
        lineNumber: string;
      };
      body: {
        /** Contains details needed to perform topup with poli-pay. */
        poliPayTopupRequest?: definitions['PoliPayTopupRequest'];
      };
    };
    responses: {
      /** Poli pay topup success. */
      200: {
        schema: definitions['PoliPayResponse'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. */
      401: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  autoTopupByCreditCard: {
    parameters: {
      path: {
        /** The prepay line number that is requesting for autotopup and the user has access to. */
        lineNumber: string;
      };
      body: {
        /** Contains details needed to perform autotopup with creditcard. */
        creditCardAutoTopupRequest?: definitions['CreditCardAutoTopupRequest'];
      };
    };
    responses: {
      /** Credit card autotopup success. */
      200: {
        schema: definitions['Response'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  removeAutoTopup: {
    parameters: {
      path: {
        /** The prepay line number whose auto-topup needs to be stopped and the user has access to. */
        lineNumber: string;
      };
    };
    responses: {
      /** Request Processed Successfully. */
      200: {
        schema: definitions['Response'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** The provided token is invalid or expired. */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  registerCreditCard: {
    parameters: {
      path: {
        /** The line number that is required for registering the card. */
        lineNumber: string;
      };
      body: {
        /** Contains details needed to register creditcard. */
        registerCreditCardRequest?: definitions['RegisterCreditCardRequest'];
      };
    };
    responses: {
      /** Card registered successfully. */
      200: {
        schema: definitions['Response'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** Authentication failed due to invalid or expired access token provided in the header. */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  setupAutoPay: {
    parameters: {
      path: {
        /** The account number for which automatic bill payment will be setup */
        accountNumber: string;
      };
      body: {
        /** Contains details needed to perform setting up auto bill payments */
        paymentSetupRequest: definitions['PaymentSetupRequest'];
      };
    };
    responses: {
      /** Payment setup success. */
      200: {
        schema: definitions['Response'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** Authentication failed due to invalid or expired access token provided in the header. */
      401: {
        schema: definitions['Response'];
      };
      /** The requested wallet item or access is not authorised. */
      403: {
        schema: definitions['Response'];
      };
      /** The resource that is being accessed is locked. */
      429: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  removeRegisteredCreditCard: {
    parameters: {
      path: {
        /** The prepay line number that is requested for card de-registration and the user has access to it. */
        lineNumber: string;
        /** The unique identifier of the registered card. */
        paymentMethodId: string;
      };
    };
    responses: {
      /** Card de-registered successfully. */
      200: {
        schema: definitions['Response'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** Authentication failed due to invalid or expired access token provided in the header. */
      401: {
        schema: definitions['Response'];
      };
      /** Not authorised on the line. */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  removeAutoPay: {
    parameters: {
      path: {
        /** The account number for which automatic bill payment setup to be removed if the given registered paymentmethodid is valid */
        accountNumber: string;
        /** the unique identifier of this payment method. */
        paymentMethodId: string;
      };
    };
    responses: {
      /** Payment method de-registered successfully. */
      200: {
        schema: definitions['Response'];
      };
      /** Request validation failure. */
      400: {
        schema: definitions['Response'];
      };
      /** Authentication failed due to invalid or expired access token provided in the header. */
      401: {
        schema: definitions['Response'];
      };
      /** The registered card is not authorised. */
      403: {
        schema: definitions['Response'];
      };
      /** Something goes wrong internally. */
      500: {
        schema: definitions['Response'];
      };
    };
  };
  sendPoliInitiate: {
    parameters: {
      body: {
        InitiateDataRequest: definitions['InitiateDataRequest'];
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['PoliInitiateResponse'];
      };
      /** BAD_REQUEST */
      400: {
        schema: definitions['PoliInitiateErrorResponse'];
      };
      /** The provided access token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The provided accountNumber or lineNumber doesn't have proper right */
      403: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
      /** GATEWAY_TIMEOUT */
      504: {
        schema: definitions['Response'];
      };
    };
  };
  receivePoliTransactionStatus: {
    parameters: {
      formData: {
        /** The unique identifier of a transaction sent from POLi */
        Token: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['Response'];
      };
    };
  };
  getPoliTransactionResult: {
    parameters: {
      path: {
        /** The unique identifier of a transaction stored in database table */
        token: string;
      };
      query: {
        /** The status of the transaction as informed to client. 'Success' is considered as successful transaction. */
        status?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions['PoliTransactionResultResponse'];
      };
      /** BAD_REQUEST */
      400: {
        schema: definitions['Response'];
      };
      /** The provided access token is invalid or access is denied */
      401: {
        schema: definitions['Response'];
      };
      /** The queried POLi transaction result is not found */
      404: {
        schema: definitions['Response'];
      };
      /** INTERNAL_SERVER_ERROR */
      500: {
        schema: definitions['Response'];
      };
    };
  };
}
